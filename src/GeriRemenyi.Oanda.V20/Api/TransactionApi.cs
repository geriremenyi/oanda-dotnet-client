/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GeriRemenyi.Oanda.V20.Client;
using GeriRemenyi.Oanda.V20.Model;

namespace GeriRemenyi.Oanda.V20.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Transactions
        /// </summary>
        /// <remarks>
        /// Get a list of Transactions pages that satisfy a time-based Transaction query.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="from">The starting time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="to">The ending time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="pageSize">The number of Transactions to include in each page of the results. (optional)</param>
        /// <param name="type">A filter for restricting the types of Transactions to retreive. (optional)</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 AccountsAccountIDTransactionsGet (string accountID, string acceptDatetimeFormat = default(string), string from = default(string), string to = default(string), int? pageSize = default(int?), List<string> type = default(List<string>));

        /// <summary>
        /// List Transactions
        /// </summary>
        /// <remarks>
        /// Get a list of Transactions pages that satisfy a time-based Transaction query.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="from">The starting time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="to">The ending time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="pageSize">The number of Transactions to include in each page of the results. (optional)</param>
        /// <param name="type">A filter for restricting the types of Transactions to retreive. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> AccountsAccountIDTransactionsGetWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string), string from = default(string), string to = default(string), int? pageSize = default(int?), List<string> type = default(List<string>));
        /// <summary>
        /// Transaction ID Range
        /// </summary>
        /// <remarks>
        /// Get a range of Transactions for an Account based on the Transaction IDs.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="from">The starting Transacion ID (inclusive) to fetch.</param>
        /// <param name="to">The ending Transaction ID (inclusive) to fetch.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="type">The filter that restricts the types of Transactions to retreive. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 AccountsAccountIDTransactionsIdrangeGet (string accountID, int from, int to, string acceptDatetimeFormat = default(string), List<string> type = default(List<string>));

        /// <summary>
        /// Transaction ID Range
        /// </summary>
        /// <remarks>
        /// Get a range of Transactions for an Account based on the Transaction IDs.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="from">The starting Transacion ID (inclusive) to fetch.</param>
        /// <param name="to">The ending Transaction ID (inclusive) to fetch.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="type">The filter that restricts the types of Transactions to retreive. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> AccountsAccountIDTransactionsIdrangeGetWithHttpInfo (string accountID, int from, int to, string acceptDatetimeFormat = default(string), List<string> type = default(List<string>));
        /// <summary>
        /// Transactions Since ID
        /// </summary>
        /// <remarks>
        /// Get a range of Transactions for an Account starting at (but not including) a provided Transaction ID.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="id">The ID of the last Transacion fetched. This query will return all Transactions newer than the TransactionID.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 AccountsAccountIDTransactionsSinceidGet (string accountID, int id, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Transactions Since ID
        /// </summary>
        /// <remarks>
        /// Get a range of Transactions for an Account starting at (but not including) a provided Transaction ID.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="id">The ID of the last Transacion fetched. This query will return all Transactions newer than the TransactionID.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> AccountsAccountIDTransactionsSinceidGetWithHttpInfo (string accountID, int id, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Transaction Details
        /// </summary>
        /// <remarks>
        /// Get the details of a single Account Transaction.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="transactionID">A Transaction ID</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 AccountsAccountIDTransactionsTransactionIDGet (string accountID, int transactionID, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Transaction Details
        /// </summary>
        /// <remarks>
        /// Get the details of a single Account Transaction.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="transactionID">A Transaction ID</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> AccountsAccountIDTransactionsTransactionIDGetWithHttpInfo (string accountID, int transactionID, string acceptDatetimeFormat = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List Transactions
        /// </summary>
        /// <remarks>
        /// Get a list of Transactions pages that satisfy a time-based Transaction query.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="from">The starting time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="to">The ending time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="pageSize">The number of Transactions to include in each page of the results. (optional)</param>
        /// <param name="type">A filter for restricting the types of Transactions to retreive. (optional)</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> AccountsAccountIDTransactionsGetAsync (string accountID, string acceptDatetimeFormat = default(string), string from = default(string), string to = default(string), int? pageSize = default(int?), List<string> type = default(List<string>));

        /// <summary>
        /// List Transactions
        /// </summary>
        /// <remarks>
        /// Get a list of Transactions pages that satisfy a time-based Transaction query.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="from">The starting time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="to">The ending time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="pageSize">The number of Transactions to include in each page of the results. (optional)</param>
        /// <param name="type">A filter for restricting the types of Transactions to retreive. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> AccountsAccountIDTransactionsGetAsyncWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string), string from = default(string), string to = default(string), int? pageSize = default(int?), List<string> type = default(List<string>));
        /// <summary>
        /// Transaction ID Range
        /// </summary>
        /// <remarks>
        /// Get a range of Transactions for an Account based on the Transaction IDs.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="from">The starting Transacion ID (inclusive) to fetch.</param>
        /// <param name="to">The ending Transaction ID (inclusive) to fetch.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="type">The filter that restricts the types of Transactions to retreive. (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> AccountsAccountIDTransactionsIdrangeGetAsync (string accountID, int from, int to, string acceptDatetimeFormat = default(string), List<string> type = default(List<string>));

        /// <summary>
        /// Transaction ID Range
        /// </summary>
        /// <remarks>
        /// Get a range of Transactions for an Account based on the Transaction IDs.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="from">The starting Transacion ID (inclusive) to fetch.</param>
        /// <param name="to">The ending Transaction ID (inclusive) to fetch.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="type">The filter that restricts the types of Transactions to retreive. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> AccountsAccountIDTransactionsIdrangeGetAsyncWithHttpInfo (string accountID, int from, int to, string acceptDatetimeFormat = default(string), List<string> type = default(List<string>));
        /// <summary>
        /// Transactions Since ID
        /// </summary>
        /// <remarks>
        /// Get a range of Transactions for an Account starting at (but not including) a provided Transaction ID.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="id">The ID of the last Transacion fetched. This query will return all Transactions newer than the TransactionID.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> AccountsAccountIDTransactionsSinceidGetAsync (string accountID, int id, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Transactions Since ID
        /// </summary>
        /// <remarks>
        /// Get a range of Transactions for an Account starting at (but not including) a provided Transaction ID.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="id">The ID of the last Transacion fetched. This query will return all Transactions newer than the TransactionID.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> AccountsAccountIDTransactionsSinceidGetAsyncWithHttpInfo (string accountID, int id, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Transaction Details
        /// </summary>
        /// <remarks>
        /// Get the details of a single Account Transaction.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="transactionID">A Transaction ID</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> AccountsAccountIDTransactionsTransactionIDGetAsync (string accountID, int transactionID, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Transaction Details
        /// </summary>
        /// <remarks>
        /// Get the details of a single Account Transaction.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="transactionID">A Transaction ID</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> AccountsAccountIDTransactionsTransactionIDGetAsyncWithHttpInfo (string accountID, int transactionID, string acceptDatetimeFormat = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionApi : ITransactionApiSync, ITransactionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionApi : ITransactionApi
    {
        private GeriRemenyi.Oanda.V20.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionApi(String basePath)
        {
            this.Configuration = GeriRemenyi.Oanda.V20.Client.Configuration.MergeConfigurations(
                GeriRemenyi.Oanda.V20.Client.GlobalConfiguration.Instance,
                new GeriRemenyi.Oanda.V20.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionApi(GeriRemenyi.Oanda.V20.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GeriRemenyi.Oanda.V20.Client.Configuration.MergeConfigurations(
                GeriRemenyi.Oanda.V20.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TransactionApi(GeriRemenyi.Oanda.V20.Client.ISynchronousClient client,GeriRemenyi.Oanda.V20.Client.IAsynchronousClient asyncClient, GeriRemenyi.Oanda.V20.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GeriRemenyi.Oanda.V20.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List Transactions Get a list of Transactions pages that satisfy a time-based Transaction query.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="from">The starting time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="to">The ending time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="pageSize">The number of Transactions to include in each page of the results. (optional)</param>
        /// <param name="type">A filter for restricting the types of Transactions to retreive. (optional)</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 AccountsAccountIDTransactionsGet (string accountID, string acceptDatetimeFormat = default(string), string from = default(string), string to = default(string), int? pageSize = default(int?), List<string> type = default(List<string>))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20018> localVarResponse = AccountsAccountIDTransactionsGetWithHttpInfo(accountID, acceptDatetimeFormat, from, to, pageSize, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Transactions Get a list of Transactions pages that satisfy a time-based Transaction query.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="from">The starting time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="to">The ending time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="pageSize">The number of Transactions to include in each page of the results. (optional)</param>
        /// <param name="type">A filter for restricting the types of Transactions to retreive. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< InlineResponse20018 > AccountsAccountIDTransactionsGetWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string), string from = default(string), string to = default(string), int? pageSize = default(int?), List<string> type = default(List<string>))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TransactionApi->AccountsAccountIDTransactionsGet");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("csv", "type", type));
            }
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20018 >("/accounts/{accountID}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTransactionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Transactions Get a list of Transactions pages that satisfy a time-based Transaction query.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="from">The starting time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="to">The ending time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="pageSize">The number of Transactions to include in each page of the results. (optional)</param>
        /// <param name="type">A filter for restricting the types of Transactions to retreive. (optional)</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> AccountsAccountIDTransactionsGetAsync (string accountID, string acceptDatetimeFormat = default(string), string from = default(string), string to = default(string), int? pageSize = default(int?), List<string> type = default(List<string>))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20018> localVarResponse = await AccountsAccountIDTransactionsGetAsyncWithHttpInfo(accountID, acceptDatetimeFormat, from, to, pageSize, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Transactions Get a list of Transactions pages that satisfy a time-based Transaction query.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="from">The starting time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="to">The ending time (inclusive) of the time range for the Transactions being queried. (optional)</param>
        /// <param name="pageSize">The number of Transactions to include in each page of the results. (optional)</param>
        /// <param name="type">A filter for restricting the types of Transactions to retreive. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20018>> AccountsAccountIDTransactionsGetAsyncWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string), string from = default(string), string to = default(string), int? pageSize = default(int?), List<string> type = default(List<string>))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TransactionApi->AccountsAccountIDTransactionsGet");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("csv", "type", type));
            }
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20018>("/accounts/{accountID}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTransactionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transaction ID Range Get a range of Transactions for an Account based on the Transaction IDs.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="from">The starting Transacion ID (inclusive) to fetch.</param>
        /// <param name="to">The ending Transaction ID (inclusive) to fetch.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="type">The filter that restricts the types of Transactions to retreive. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 AccountsAccountIDTransactionsIdrangeGet (string accountID, int from, int to, string acceptDatetimeFormat = default(string), List<string> type = default(List<string>))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20020> localVarResponse = AccountsAccountIDTransactionsIdrangeGetWithHttpInfo(accountID, from, to, acceptDatetimeFormat, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transaction ID Range Get a range of Transactions for an Account based on the Transaction IDs.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="from">The starting Transacion ID (inclusive) to fetch.</param>
        /// <param name="to">The ending Transaction ID (inclusive) to fetch.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="type">The filter that restricts the types of Transactions to retreive. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< InlineResponse20020 > AccountsAccountIDTransactionsIdrangeGetWithHttpInfo (string accountID, int from, int to, string acceptDatetimeFormat = default(string), List<string> type = default(List<string>))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TransactionApi->AccountsAccountIDTransactionsIdrangeGet");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("csv", "type", type));
            }
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20020 >("/accounts/{accountID}/transactions/idrange", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTransactionsIdrangeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transaction ID Range Get a range of Transactions for an Account based on the Transaction IDs.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="from">The starting Transacion ID (inclusive) to fetch.</param>
        /// <param name="to">The ending Transaction ID (inclusive) to fetch.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="type">The filter that restricts the types of Transactions to retreive. (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> AccountsAccountIDTransactionsIdrangeGetAsync (string accountID, int from, int to, string acceptDatetimeFormat = default(string), List<string> type = default(List<string>))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20020> localVarResponse = await AccountsAccountIDTransactionsIdrangeGetAsyncWithHttpInfo(accountID, from, to, acceptDatetimeFormat, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transaction ID Range Get a range of Transactions for an Account based on the Transaction IDs.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="from">The starting Transacion ID (inclusive) to fetch.</param>
        /// <param name="to">The ending Transaction ID (inclusive) to fetch.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="type">The filter that restricts the types of Transactions to retreive. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20020>> AccountsAccountIDTransactionsIdrangeGetAsyncWithHttpInfo (string accountID, int from, int to, string acceptDatetimeFormat = default(string), List<string> type = default(List<string>))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TransactionApi->AccountsAccountIDTransactionsIdrangeGet");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("csv", "type", type));
            }
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20020>("/accounts/{accountID}/transactions/idrange", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTransactionsIdrangeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transactions Since ID Get a range of Transactions for an Account starting at (but not including) a provided Transaction ID.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="id">The ID of the last Transacion fetched. This query will return all Transactions newer than the TransactionID.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 AccountsAccountIDTransactionsSinceidGet (string accountID, int id, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20020> localVarResponse = AccountsAccountIDTransactionsSinceidGetWithHttpInfo(accountID, id, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transactions Since ID Get a range of Transactions for an Account starting at (but not including) a provided Transaction ID.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="id">The ID of the last Transacion fetched. This query will return all Transactions newer than the TransactionID.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< InlineResponse20020 > AccountsAccountIDTransactionsSinceidGetWithHttpInfo (string accountID, int id, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TransactionApi->AccountsAccountIDTransactionsSinceidGet");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20020 >("/accounts/{accountID}/transactions/sinceid", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTransactionsSinceidGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transactions Since ID Get a range of Transactions for an Account starting at (but not including) a provided Transaction ID.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="id">The ID of the last Transacion fetched. This query will return all Transactions newer than the TransactionID.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> AccountsAccountIDTransactionsSinceidGetAsync (string accountID, int id, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20020> localVarResponse = await AccountsAccountIDTransactionsSinceidGetAsyncWithHttpInfo(accountID, id, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transactions Since ID Get a range of Transactions for an Account starting at (but not including) a provided Transaction ID.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="id">The ID of the last Transacion fetched. This query will return all Transactions newer than the TransactionID.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20020>> AccountsAccountIDTransactionsSinceidGetAsyncWithHttpInfo (string accountID, int id, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TransactionApi->AccountsAccountIDTransactionsSinceidGet");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20020>("/accounts/{accountID}/transactions/sinceid", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTransactionsSinceidGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transaction Details Get the details of a single Account Transaction.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="transactionID">A Transaction ID</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 AccountsAccountIDTransactionsTransactionIDGet (string accountID, int transactionID, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20019> localVarResponse = AccountsAccountIDTransactionsTransactionIDGetWithHttpInfo(accountID, transactionID, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transaction Details Get the details of a single Account Transaction.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="transactionID">A Transaction ID</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< InlineResponse20019 > AccountsAccountIDTransactionsTransactionIDGetWithHttpInfo (string accountID, int transactionID, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TransactionApi->AccountsAccountIDTransactionsTransactionIDGet");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("transactionID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(transactionID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20019 >("/accounts/{accountID}/transactions/{transactionID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTransactionsTransactionIDGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transaction Details Get the details of a single Account Transaction.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="transactionID">A Transaction ID</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> AccountsAccountIDTransactionsTransactionIDGetAsync (string accountID, int transactionID, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20019> localVarResponse = await AccountsAccountIDTransactionsTransactionIDGetAsyncWithHttpInfo(accountID, transactionID, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transaction Details Get the details of a single Account Transaction.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="transactionID">A Transaction ID</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20019>> AccountsAccountIDTransactionsTransactionIDGetAsyncWithHttpInfo (string accountID, int transactionID, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TransactionApi->AccountsAccountIDTransactionsTransactionIDGet");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("transactionID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(transactionID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20019>("/accounts/{accountID}/transactions/{transactionID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTransactionsTransactionIDGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

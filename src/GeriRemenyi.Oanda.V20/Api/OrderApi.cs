/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GeriRemenyi.Oanda.V20.Client;
using GeriRemenyi.Oanda.V20.Model;

namespace GeriRemenyi.Oanda.V20.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Orders
        /// </summary>
        /// <remarks>
        /// Get a list of Orders for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Order IDs to retrieve (optional)</param>
        /// <param name="state">The state to filter the requested Orders by (optional)</param>
        /// <param name="instrument">The instrument to filter the requested orders by (optional)</param>
        /// <param name="count">The maximum number of Orders to return (optional)</param>
        /// <param name="beforeID">The maximum Order ID to return. If not provided the most recent Orders in the Account are returned (optional)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 AccountsAccountIDOrdersGet (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?));

        /// <summary>
        /// List Orders
        /// </summary>
        /// <remarks>
        /// Get a list of Orders for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Order IDs to retrieve (optional)</param>
        /// <param name="state">The state to filter the requested Orders by (optional)</param>
        /// <param name="instrument">The instrument to filter the requested orders by (optional)</param>
        /// <param name="count">The maximum number of Orders to return (optional)</param>
        /// <param name="beforeID">The maximum Order ID to return. If not provided the most recent Orders in the Account are returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> AccountsAccountIDOrdersGetWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?));
        /// <summary>
        /// Cancel Order
        /// </summary>
        /// <remarks>
        /// Cancel a pending Order in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>Object</returns>
        Object AccountsAccountIDOrdersOrderSpecifierCancelPut (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string), string clientRequestID = default(string));

        /// <summary>
        /// Cancel Order
        /// </summary>
        /// <remarks>
        /// Cancel a pending Order in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AccountsAccountIDOrdersOrderSpecifierCancelPutWithHttpInfo (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string), string clientRequestID = default(string));
        /// <summary>
        /// Set Order Extensions
        /// </summary>
        /// <remarks>
        /// Update the Client Extensions for an Order in an Account. Do notset, modify, or delete clientExtensions if your account is associated with MT4.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject3"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Object</returns>
        Object AccountsAccountIDOrdersOrderSpecifierClientExtensionsPut (string accountID, string orderSpecifier, InlineObject3 inlineObject3, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Set Order Extensions
        /// </summary>
        /// <remarks>
        /// Update the Client Extensions for an Order in an Account. Do notset, modify, or delete clientExtensions if your account is associated with MT4.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject3"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AccountsAccountIDOrdersOrderSpecifierClientExtensionsPutWithHttpInfo (string accountID, string orderSpecifier, InlineObject3 inlineObject3, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Get Order
        /// </summary>
        /// <remarks>
        /// Get details for a single Order in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 AccountsAccountIDOrdersOrderSpecifierGet (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Get Order
        /// </summary>
        /// <remarks>
        /// Get details for a single Order in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> AccountsAccountIDOrdersOrderSpecifierGetWithHttpInfo (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Replace Order
        /// </summary>
        /// <remarks>
        /// Replace an Order in an Account by simultaneously cancelling it and creating a replacement Order
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject2"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>Object</returns>
        Object AccountsAccountIDOrdersOrderSpecifierPut (string accountID, string orderSpecifier, InlineObject2 inlineObject2, string acceptDatetimeFormat = default(string), string clientRequestID = default(string));

        /// <summary>
        /// Replace Order
        /// </summary>
        /// <remarks>
        /// Replace an Order in an Account by simultaneously cancelling it and creating a replacement Order
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject2"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AccountsAccountIDOrdersOrderSpecifierPutWithHttpInfo (string accountID, string orderSpecifier, InlineObject2 inlineObject2, string acceptDatetimeFormat = default(string), string clientRequestID = default(string));
        /// <summary>
        /// Create Order
        /// </summary>
        /// <remarks>
        /// Create an Order for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="inlineObject1"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Object</returns>
        Object AccountsAccountIDOrdersPost (string accountID, InlineObject1 inlineObject1, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Create Order
        /// </summary>
        /// <remarks>
        /// Create an Order for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="inlineObject1"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AccountsAccountIDOrdersPostWithHttpInfo (string accountID, InlineObject1 inlineObject1, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Pending Orders
        /// </summary>
        /// <remarks>
        /// List all pending Orders in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 AccountsAccountIDPendingOrdersGet (string accountID, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Pending Orders
        /// </summary>
        /// <remarks>
        /// List all pending Orders in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> AccountsAccountIDPendingOrdersGetWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List Orders
        /// </summary>
        /// <remarks>
        /// Get a list of Orders for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Order IDs to retrieve (optional)</param>
        /// <param name="state">The state to filter the requested Orders by (optional)</param>
        /// <param name="instrument">The instrument to filter the requested orders by (optional)</param>
        /// <param name="count">The maximum number of Orders to return (optional)</param>
        /// <param name="beforeID">The maximum Order ID to return. If not provided the most recent Orders in the Account are returned (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> AccountsAccountIDOrdersGetAsync (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?));

        /// <summary>
        /// List Orders
        /// </summary>
        /// <remarks>
        /// Get a list of Orders for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Order IDs to retrieve (optional)</param>
        /// <param name="state">The state to filter the requested Orders by (optional)</param>
        /// <param name="instrument">The instrument to filter the requested orders by (optional)</param>
        /// <param name="count">The maximum number of Orders to return (optional)</param>
        /// <param name="beforeID">The maximum Order ID to return. If not provided the most recent Orders in the Account are returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> AccountsAccountIDOrdersGetAsyncWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?));
        /// <summary>
        /// Cancel Order
        /// </summary>
        /// <remarks>
        /// Cancel a pending Order in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AccountsAccountIDOrdersOrderSpecifierCancelPutAsync (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string), string clientRequestID = default(string));

        /// <summary>
        /// Cancel Order
        /// </summary>
        /// <remarks>
        /// Cancel a pending Order in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AccountsAccountIDOrdersOrderSpecifierCancelPutAsyncWithHttpInfo (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string), string clientRequestID = default(string));
        /// <summary>
        /// Set Order Extensions
        /// </summary>
        /// <remarks>
        /// Update the Client Extensions for an Order in an Account. Do notset, modify, or delete clientExtensions if your account is associated with MT4.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject3"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AccountsAccountIDOrdersOrderSpecifierClientExtensionsPutAsync (string accountID, string orderSpecifier, InlineObject3 inlineObject3, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Set Order Extensions
        /// </summary>
        /// <remarks>
        /// Update the Client Extensions for an Order in an Account. Do notset, modify, or delete clientExtensions if your account is associated with MT4.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject3"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AccountsAccountIDOrdersOrderSpecifierClientExtensionsPutAsyncWithHttpInfo (string accountID, string orderSpecifier, InlineObject3 inlineObject3, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Get Order
        /// </summary>
        /// <remarks>
        /// Get details for a single Order in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> AccountsAccountIDOrdersOrderSpecifierGetAsync (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Get Order
        /// </summary>
        /// <remarks>
        /// Get details for a single Order in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> AccountsAccountIDOrdersOrderSpecifierGetAsyncWithHttpInfo (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Replace Order
        /// </summary>
        /// <remarks>
        /// Replace an Order in an Account by simultaneously cancelling it and creating a replacement Order
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject2"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AccountsAccountIDOrdersOrderSpecifierPutAsync (string accountID, string orderSpecifier, InlineObject2 inlineObject2, string acceptDatetimeFormat = default(string), string clientRequestID = default(string));

        /// <summary>
        /// Replace Order
        /// </summary>
        /// <remarks>
        /// Replace an Order in an Account by simultaneously cancelling it and creating a replacement Order
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject2"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AccountsAccountIDOrdersOrderSpecifierPutAsyncWithHttpInfo (string accountID, string orderSpecifier, InlineObject2 inlineObject2, string acceptDatetimeFormat = default(string), string clientRequestID = default(string));
        /// <summary>
        /// Create Order
        /// </summary>
        /// <remarks>
        /// Create an Order for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="inlineObject1"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AccountsAccountIDOrdersPostAsync (string accountID, InlineObject1 inlineObject1, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Create Order
        /// </summary>
        /// <remarks>
        /// Create an Order for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="inlineObject1"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AccountsAccountIDOrdersPostAsyncWithHttpInfo (string accountID, InlineObject1 inlineObject1, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Pending Orders
        /// </summary>
        /// <remarks>
        /// List all pending Orders in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> AccountsAccountIDPendingOrdersGetAsync (string accountID, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Pending Orders
        /// </summary>
        /// <remarks>
        /// List all pending Orders in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> AccountsAccountIDPendingOrdersGetAsyncWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApi : IOrderApiSync, IOrderApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderApi : IOrderApi
    {
        private GeriRemenyi.Oanda.V20.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi(String basePath)
        {
            this.Configuration = GeriRemenyi.Oanda.V20.Client.Configuration.MergeConfigurations(
                GeriRemenyi.Oanda.V20.Client.GlobalConfiguration.Instance,
                new GeriRemenyi.Oanda.V20.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderApi(GeriRemenyi.Oanda.V20.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GeriRemenyi.Oanda.V20.Client.Configuration.MergeConfigurations(
                GeriRemenyi.Oanda.V20.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrderApi(GeriRemenyi.Oanda.V20.Client.ISynchronousClient client,GeriRemenyi.Oanda.V20.Client.IAsynchronousClient asyncClient, GeriRemenyi.Oanda.V20.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GeriRemenyi.Oanda.V20.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List Orders Get a list of Orders for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Order IDs to retrieve (optional)</param>
        /// <param name="state">The state to filter the requested Orders by (optional)</param>
        /// <param name="instrument">The instrument to filter the requested orders by (optional)</param>
        /// <param name="count">The maximum number of Orders to return (optional)</param>
        /// <param name="beforeID">The maximum Order ID to return. If not provided the most recent Orders in the Account are returned (optional)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 AccountsAccountIDOrdersGet (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse2009> localVarResponse = AccountsAccountIDOrdersGetWithHttpInfo(accountID, acceptDatetimeFormat, ids, state, instrument, count, beforeID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Orders Get a list of Orders for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Order IDs to retrieve (optional)</param>
        /// <param name="state">The state to filter the requested Orders by (optional)</param>
        /// <param name="instrument">The instrument to filter the requested orders by (optional)</param>
        /// <param name="count">The maximum number of Orders to return (optional)</param>
        /// <param name="beforeID">The maximum Order ID to return. If not provided the most recent Orders in the Account are returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< InlineResponse2009 > AccountsAccountIDOrdersGetWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling OrderApi->AccountsAccountIDOrdersGet");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (instrument != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (beforeID != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "beforeID", beforeID));
            }
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2009 >("/accounts/{accountID}/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOrdersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Orders Get a list of Orders for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Order IDs to retrieve (optional)</param>
        /// <param name="state">The state to filter the requested Orders by (optional)</param>
        /// <param name="instrument">The instrument to filter the requested orders by (optional)</param>
        /// <param name="count">The maximum number of Orders to return (optional)</param>
        /// <param name="beforeID">The maximum Order ID to return. If not provided the most recent Orders in the Account are returned (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> AccountsAccountIDOrdersGetAsync (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse2009> localVarResponse = await AccountsAccountIDOrdersGetAsyncWithHttpInfo(accountID, acceptDatetimeFormat, ids, state, instrument, count, beforeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Orders Get a list of Orders for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Order IDs to retrieve (optional)</param>
        /// <param name="state">The state to filter the requested Orders by (optional)</param>
        /// <param name="instrument">The instrument to filter the requested orders by (optional)</param>
        /// <param name="count">The maximum number of Orders to return (optional)</param>
        /// <param name="beforeID">The maximum Order ID to return. If not provided the most recent Orders in the Account are returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse2009>> AccountsAccountIDOrdersGetAsyncWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling OrderApi->AccountsAccountIDOrdersGet");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (instrument != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (beforeID != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "beforeID", beforeID));
            }
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2009>("/accounts/{accountID}/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOrdersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Order Cancel a pending Order in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>Object</returns>
        public Object AccountsAccountIDOrdersOrderSpecifierCancelPut (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string), string clientRequestID = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = AccountsAccountIDOrdersOrderSpecifierCancelPutWithHttpInfo(accountID, orderSpecifier, acceptDatetimeFormat, clientRequestID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Order Cancel a pending Order in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< Object > AccountsAccountIDOrdersOrderSpecifierCancelPutWithHttpInfo (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string), string clientRequestID = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierCancelPut");

            // verify the required parameter 'orderSpecifier' is set
            if (orderSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'orderSpecifier' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierCancelPut");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(orderSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            if (clientRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ClientRequestID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(clientRequestID)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Object >("/accounts/{accountID}/orders/{orderSpecifier}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOrdersOrderSpecifierCancelPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Order Cancel a pending Order in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AccountsAccountIDOrdersOrderSpecifierCancelPutAsync (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string), string clientRequestID = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = await AccountsAccountIDOrdersOrderSpecifierCancelPutAsyncWithHttpInfo(accountID, orderSpecifier, acceptDatetimeFormat, clientRequestID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel Order Cancel a pending Order in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<Object>> AccountsAccountIDOrdersOrderSpecifierCancelPutAsyncWithHttpInfo (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string), string clientRequestID = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierCancelPut");

            // verify the required parameter 'orderSpecifier' is set
            if (orderSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'orderSpecifier' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierCancelPut");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(orderSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            if (clientRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ClientRequestID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(clientRequestID)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/accounts/{accountID}/orders/{orderSpecifier}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOrdersOrderSpecifierCancelPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Order Extensions Update the Client Extensions for an Order in an Account. Do notset, modify, or delete clientExtensions if your account is associated with MT4.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject3"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Object</returns>
        public Object AccountsAccountIDOrdersOrderSpecifierClientExtensionsPut (string accountID, string orderSpecifier, InlineObject3 inlineObject3, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = AccountsAccountIDOrdersOrderSpecifierClientExtensionsPutWithHttpInfo(accountID, orderSpecifier, inlineObject3, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Order Extensions Update the Client Extensions for an Order in an Account. Do notset, modify, or delete clientExtensions if your account is associated with MT4.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject3"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< Object > AccountsAccountIDOrdersOrderSpecifierClientExtensionsPutWithHttpInfo (string accountID, string orderSpecifier, InlineObject3 inlineObject3, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierClientExtensionsPut");

            // verify the required parameter 'orderSpecifier' is set
            if (orderSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'orderSpecifier' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierClientExtensionsPut");

            // verify the required parameter 'inlineObject3' is set
            if (inlineObject3 == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'inlineObject3' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierClientExtensionsPut");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(orderSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = inlineObject3;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Object >("/accounts/{accountID}/orders/{orderSpecifier}/clientExtensions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOrdersOrderSpecifierClientExtensionsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Order Extensions Update the Client Extensions for an Order in an Account. Do notset, modify, or delete clientExtensions if your account is associated with MT4.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject3"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AccountsAccountIDOrdersOrderSpecifierClientExtensionsPutAsync (string accountID, string orderSpecifier, InlineObject3 inlineObject3, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = await AccountsAccountIDOrdersOrderSpecifierClientExtensionsPutAsyncWithHttpInfo(accountID, orderSpecifier, inlineObject3, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Order Extensions Update the Client Extensions for an Order in an Account. Do notset, modify, or delete clientExtensions if your account is associated with MT4.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject3"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<Object>> AccountsAccountIDOrdersOrderSpecifierClientExtensionsPutAsyncWithHttpInfo (string accountID, string orderSpecifier, InlineObject3 inlineObject3, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierClientExtensionsPut");

            // verify the required parameter 'orderSpecifier' is set
            if (orderSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'orderSpecifier' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierClientExtensionsPut");

            // verify the required parameter 'inlineObject3' is set
            if (inlineObject3 == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'inlineObject3' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierClientExtensionsPut");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(orderSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = inlineObject3;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/accounts/{accountID}/orders/{orderSpecifier}/clientExtensions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOrdersOrderSpecifierClientExtensionsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Get details for a single Order in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 AccountsAccountIDOrdersOrderSpecifierGet (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20011> localVarResponse = AccountsAccountIDOrdersOrderSpecifierGetWithHttpInfo(accountID, orderSpecifier, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Get details for a single Order in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< InlineResponse20011 > AccountsAccountIDOrdersOrderSpecifierGetWithHttpInfo (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierGet");

            // verify the required parameter 'orderSpecifier' is set
            if (orderSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'orderSpecifier' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierGet");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(orderSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20011 >("/accounts/{accountID}/orders/{orderSpecifier}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOrdersOrderSpecifierGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Get details for a single Order in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> AccountsAccountIDOrdersOrderSpecifierGetAsync (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20011> localVarResponse = await AccountsAccountIDOrdersOrderSpecifierGetAsyncWithHttpInfo(accountID, orderSpecifier, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Order Get details for a single Order in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20011>> AccountsAccountIDOrdersOrderSpecifierGetAsyncWithHttpInfo (string accountID, string orderSpecifier, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierGet");

            // verify the required parameter 'orderSpecifier' is set
            if (orderSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'orderSpecifier' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierGet");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(orderSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/accounts/{accountID}/orders/{orderSpecifier}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOrdersOrderSpecifierGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Order Replace an Order in an Account by simultaneously cancelling it and creating a replacement Order
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject2"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>Object</returns>
        public Object AccountsAccountIDOrdersOrderSpecifierPut (string accountID, string orderSpecifier, InlineObject2 inlineObject2, string acceptDatetimeFormat = default(string), string clientRequestID = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = AccountsAccountIDOrdersOrderSpecifierPutWithHttpInfo(accountID, orderSpecifier, inlineObject2, acceptDatetimeFormat, clientRequestID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Order Replace an Order in an Account by simultaneously cancelling it and creating a replacement Order
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject2"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< Object > AccountsAccountIDOrdersOrderSpecifierPutWithHttpInfo (string accountID, string orderSpecifier, InlineObject2 inlineObject2, string acceptDatetimeFormat = default(string), string clientRequestID = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierPut");

            // verify the required parameter 'orderSpecifier' is set
            if (orderSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'orderSpecifier' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierPut");

            // verify the required parameter 'inlineObject2' is set
            if (inlineObject2 == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'inlineObject2' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierPut");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(orderSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            if (clientRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ClientRequestID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(clientRequestID)); // header parameter
            }
            localVarRequestOptions.Data = inlineObject2;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Object >("/accounts/{accountID}/orders/{orderSpecifier}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOrdersOrderSpecifierPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Order Replace an Order in an Account by simultaneously cancelling it and creating a replacement Order
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject2"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AccountsAccountIDOrdersOrderSpecifierPutAsync (string accountID, string orderSpecifier, InlineObject2 inlineObject2, string acceptDatetimeFormat = default(string), string clientRequestID = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = await AccountsAccountIDOrdersOrderSpecifierPutAsyncWithHttpInfo(accountID, orderSpecifier, inlineObject2, acceptDatetimeFormat, clientRequestID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace Order Replace an Order in an Account by simultaneously cancelling it and creating a replacement Order
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="orderSpecifier">The Order Specifier</param>
        /// <param name="inlineObject2"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="clientRequestID">Client specified RequestID to be sent with request. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<Object>> AccountsAccountIDOrdersOrderSpecifierPutAsyncWithHttpInfo (string accountID, string orderSpecifier, InlineObject2 inlineObject2, string acceptDatetimeFormat = default(string), string clientRequestID = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierPut");

            // verify the required parameter 'orderSpecifier' is set
            if (orderSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'orderSpecifier' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierPut");

            // verify the required parameter 'inlineObject2' is set
            if (inlineObject2 == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'inlineObject2' when calling OrderApi->AccountsAccountIDOrdersOrderSpecifierPut");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(orderSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            if (clientRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ClientRequestID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(clientRequestID)); // header parameter
            }
            localVarRequestOptions.Data = inlineObject2;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/accounts/{accountID}/orders/{orderSpecifier}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOrdersOrderSpecifierPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Order Create an Order for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="inlineObject1"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Object</returns>
        public Object AccountsAccountIDOrdersPost (string accountID, InlineObject1 inlineObject1, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = AccountsAccountIDOrdersPostWithHttpInfo(accountID, inlineObject1, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Order Create an Order for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="inlineObject1"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< Object > AccountsAccountIDOrdersPostWithHttpInfo (string accountID, InlineObject1 inlineObject1, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling OrderApi->AccountsAccountIDOrdersPost");

            // verify the required parameter 'inlineObject1' is set
            if (inlineObject1 == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'inlineObject1' when calling OrderApi->AccountsAccountIDOrdersPost");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = inlineObject1;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/accounts/{accountID}/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Order Create an Order for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="inlineObject1"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AccountsAccountIDOrdersPostAsync (string accountID, InlineObject1 inlineObject1, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = await AccountsAccountIDOrdersPostAsyncWithHttpInfo(accountID, inlineObject1, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Order Create an Order for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="inlineObject1"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<Object>> AccountsAccountIDOrdersPostAsyncWithHttpInfo (string accountID, InlineObject1 inlineObject1, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling OrderApi->AccountsAccountIDOrdersPost");

            // verify the required parameter 'inlineObject1' is set
            if (inlineObject1 == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'inlineObject1' when calling OrderApi->AccountsAccountIDOrdersPost");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = inlineObject1;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/accounts/{accountID}/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pending Orders List all pending Orders in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 AccountsAccountIDPendingOrdersGet (string accountID, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20010> localVarResponse = AccountsAccountIDPendingOrdersGetWithHttpInfo(accountID, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pending Orders List all pending Orders in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< InlineResponse20010 > AccountsAccountIDPendingOrdersGetWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling OrderApi->AccountsAccountIDPendingOrdersGet");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20010 >("/accounts/{accountID}/pendingOrders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDPendingOrdersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pending Orders List all pending Orders in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> AccountsAccountIDPendingOrdersGetAsync (string accountID, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20010> localVarResponse = await AccountsAccountIDPendingOrdersGetAsyncWithHttpInfo(accountID, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pending Orders List all pending Orders in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20010>> AccountsAccountIDPendingOrdersGetAsyncWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling OrderApi->AccountsAccountIDPendingOrdersGet");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20010>("/accounts/{accountID}/pendingOrders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDPendingOrdersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

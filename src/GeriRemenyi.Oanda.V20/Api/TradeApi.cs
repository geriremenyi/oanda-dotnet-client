/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GeriRemenyi.Oanda.V20.Client;
using GeriRemenyi.Oanda.V20.Model;

namespace GeriRemenyi.Oanda.V20.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Open Trades
        /// </summary>
        /// <remarks>
        /// Get the list of open Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 AccountsAccountIDOpenTradesGet (string accountID, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// List Open Trades
        /// </summary>
        /// <remarks>
        /// Get the list of open Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> AccountsAccountIDOpenTradesGetWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// List Trades
        /// </summary>
        /// <remarks>
        /// Get a list of Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 AccountsAccountIDTradesGet (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?));

        /// <summary>
        /// List Trades
        /// </summary>
        /// <remarks>
        /// Get a list of Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> AccountsAccountIDTradesGetWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?));
        /// <summary>
        /// Set Trade Client Extensions
        /// </summary>
        /// <remarks>
        /// Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject5"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Object</returns>
        Object AccountsAccountIDTradesTradeSpecifierClientExtensionsPut (string accountID, string tradeSpecifier, InlineObject5 inlineObject5, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Set Trade Client Extensions
        /// </summary>
        /// <remarks>
        /// Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject5"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AccountsAccountIDTradesTradeSpecifierClientExtensionsPutWithHttpInfo (string accountID, string tradeSpecifier, InlineObject5 inlineObject5, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Close Trade
        /// </summary>
        /// <remarks>
        /// Close (partially or fully) a specific open Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject4"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Object</returns>
        Object AccountsAccountIDTradesTradeSpecifierClosePut (string accountID, string tradeSpecifier, InlineObject4 inlineObject4, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Close Trade
        /// </summary>
        /// <remarks>
        /// Close (partially or fully) a specific open Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject4"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AccountsAccountIDTradesTradeSpecifierClosePutWithHttpInfo (string accountID, string tradeSpecifier, InlineObject4 inlineObject4, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Trade Details
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 AccountsAccountIDTradesTradeSpecifierGet (string accountID, string tradeSpecifier, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Trade Details
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> AccountsAccountIDTradesTradeSpecifierGetWithHttpInfo (string accountID, string tradeSpecifier, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Set Dependent Orders
        /// </summary>
        /// <remarks>
        /// Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject6"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Object</returns>
        Object AccountsAccountIDTradesTradeSpecifierOrdersPut (string accountID, string tradeSpecifier, InlineObject6 inlineObject6, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Set Dependent Orders
        /// </summary>
        /// <remarks>
        /// Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject6"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AccountsAccountIDTradesTradeSpecifierOrdersPutWithHttpInfo (string accountID, string tradeSpecifier, InlineObject6 inlineObject6, string acceptDatetimeFormat = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List Open Trades
        /// </summary>
        /// <remarks>
        /// Get the list of open Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> AccountsAccountIDOpenTradesGetAsync (string accountID, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// List Open Trades
        /// </summary>
        /// <remarks>
        /// Get the list of open Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> AccountsAccountIDOpenTradesGetAsyncWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// List Trades
        /// </summary>
        /// <remarks>
        /// Get a list of Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> AccountsAccountIDTradesGetAsync (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?));

        /// <summary>
        /// List Trades
        /// </summary>
        /// <remarks>
        /// Get a list of Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> AccountsAccountIDTradesGetAsyncWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?));
        /// <summary>
        /// Set Trade Client Extensions
        /// </summary>
        /// <remarks>
        /// Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject5"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AccountsAccountIDTradesTradeSpecifierClientExtensionsPutAsync (string accountID, string tradeSpecifier, InlineObject5 inlineObject5, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Set Trade Client Extensions
        /// </summary>
        /// <remarks>
        /// Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject5"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AccountsAccountIDTradesTradeSpecifierClientExtensionsPutAsyncWithHttpInfo (string accountID, string tradeSpecifier, InlineObject5 inlineObject5, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Close Trade
        /// </summary>
        /// <remarks>
        /// Close (partially or fully) a specific open Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject4"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AccountsAccountIDTradesTradeSpecifierClosePutAsync (string accountID, string tradeSpecifier, InlineObject4 inlineObject4, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Close Trade
        /// </summary>
        /// <remarks>
        /// Close (partially or fully) a specific open Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject4"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AccountsAccountIDTradesTradeSpecifierClosePutAsyncWithHttpInfo (string accountID, string tradeSpecifier, InlineObject4 inlineObject4, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Trade Details
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> AccountsAccountIDTradesTradeSpecifierGetAsync (string accountID, string tradeSpecifier, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Trade Details
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> AccountsAccountIDTradesTradeSpecifierGetAsyncWithHttpInfo (string accountID, string tradeSpecifier, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Set Dependent Orders
        /// </summary>
        /// <remarks>
        /// Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject6"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AccountsAccountIDTradesTradeSpecifierOrdersPutAsync (string accountID, string tradeSpecifier, InlineObject6 inlineObject6, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Set Dependent Orders
        /// </summary>
        /// <remarks>
        /// Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject6"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AccountsAccountIDTradesTradeSpecifierOrdersPutAsyncWithHttpInfo (string accountID, string tradeSpecifier, InlineObject6 inlineObject6, string acceptDatetimeFormat = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradeApi : ITradeApiSync, ITradeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TradeApi : ITradeApi
    {
        private GeriRemenyi.Oanda.V20.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TradeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TradeApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TradeApi(String basePath)
        {
            this.Configuration = GeriRemenyi.Oanda.V20.Client.Configuration.MergeConfigurations(
                GeriRemenyi.Oanda.V20.Client.GlobalConfiguration.Instance,
                new GeriRemenyi.Oanda.V20.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TradeApi(GeriRemenyi.Oanda.V20.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GeriRemenyi.Oanda.V20.Client.Configuration.MergeConfigurations(
                GeriRemenyi.Oanda.V20.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TradeApi(GeriRemenyi.Oanda.V20.Client.ISynchronousClient client,GeriRemenyi.Oanda.V20.Client.IAsynchronousClient asyncClient, GeriRemenyi.Oanda.V20.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GeriRemenyi.Oanda.V20.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List Open Trades Get the list of open Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 AccountsAccountIDOpenTradesGet (string accountID, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20013> localVarResponse = AccountsAccountIDOpenTradesGetWithHttpInfo(accountID, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Open Trades Get the list of open Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< InlineResponse20013 > AccountsAccountIDOpenTradesGetWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->AccountsAccountIDOpenTradesGet");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20013 >("/accounts/{accountID}/openTrades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOpenTradesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Open Trades Get the list of open Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> AccountsAccountIDOpenTradesGetAsync (string accountID, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20013> localVarResponse = await AccountsAccountIDOpenTradesGetAsyncWithHttpInfo(accountID, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Open Trades Get the list of open Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20013>> AccountsAccountIDOpenTradesGetAsyncWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->AccountsAccountIDOpenTradesGet");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20013>("/accounts/{accountID}/openTrades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOpenTradesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Trades Get a list of Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 AccountsAccountIDTradesGet (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20012> localVarResponse = AccountsAccountIDTradesGetWithHttpInfo(accountID, acceptDatetimeFormat, ids, state, instrument, count, beforeID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Trades Get a list of Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< InlineResponse20012 > AccountsAccountIDTradesGetWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->AccountsAccountIDTradesGet");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (instrument != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (beforeID != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "beforeID", beforeID));
            }
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20012 >("/accounts/{accountID}/trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTradesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Trades Get a list of Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> AccountsAccountIDTradesGetAsync (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20012> localVarResponse = await AccountsAccountIDTradesGetAsyncWithHttpInfo(accountID, acceptDatetimeFormat, ids, state, instrument, count, beforeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Trades Get a list of Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20012>> AccountsAccountIDTradesGetAsyncWithHttpInfo (string accountID, string acceptDatetimeFormat = default(string), List<int> ids = default(List<int>), string state = default(string), string instrument = default(string), int? count = default(int?), int? beforeID = default(int?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->AccountsAccountIDTradesGet");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (instrument != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (beforeID != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToMultiMap("", "beforeID", beforeID));
            }
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/accounts/{accountID}/trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTradesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Trade Client Extensions Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject5"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Object</returns>
        public Object AccountsAccountIDTradesTradeSpecifierClientExtensionsPut (string accountID, string tradeSpecifier, InlineObject5 inlineObject5, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = AccountsAccountIDTradesTradeSpecifierClientExtensionsPutWithHttpInfo(accountID, tradeSpecifier, inlineObject5, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Trade Client Extensions Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject5"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< Object > AccountsAccountIDTradesTradeSpecifierClientExtensionsPutWithHttpInfo (string accountID, string tradeSpecifier, InlineObject5 inlineObject5, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierClientExtensionsPut");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierClientExtensionsPut");

            // verify the required parameter 'inlineObject5' is set
            if (inlineObject5 == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'inlineObject5' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierClientExtensionsPut");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = inlineObject5;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Object >("/accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTradesTradeSpecifierClientExtensionsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Trade Client Extensions Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject5"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AccountsAccountIDTradesTradeSpecifierClientExtensionsPutAsync (string accountID, string tradeSpecifier, InlineObject5 inlineObject5, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = await AccountsAccountIDTradesTradeSpecifierClientExtensionsPutAsyncWithHttpInfo(accountID, tradeSpecifier, inlineObject5, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Trade Client Extensions Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject5"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<Object>> AccountsAccountIDTradesTradeSpecifierClientExtensionsPutAsyncWithHttpInfo (string accountID, string tradeSpecifier, InlineObject5 inlineObject5, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierClientExtensionsPut");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierClientExtensionsPut");

            // verify the required parameter 'inlineObject5' is set
            if (inlineObject5 == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'inlineObject5' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierClientExtensionsPut");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = inlineObject5;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTradesTradeSpecifierClientExtensionsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Close Trade Close (partially or fully) a specific open Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject4"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Object</returns>
        public Object AccountsAccountIDTradesTradeSpecifierClosePut (string accountID, string tradeSpecifier, InlineObject4 inlineObject4, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = AccountsAccountIDTradesTradeSpecifierClosePutWithHttpInfo(accountID, tradeSpecifier, inlineObject4, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Close Trade Close (partially or fully) a specific open Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject4"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< Object > AccountsAccountIDTradesTradeSpecifierClosePutWithHttpInfo (string accountID, string tradeSpecifier, InlineObject4 inlineObject4, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierClosePut");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierClosePut");

            // verify the required parameter 'inlineObject4' is set
            if (inlineObject4 == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'inlineObject4' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierClosePut");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = inlineObject4;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Object >("/accounts/{accountID}/trades/{tradeSpecifier}/close", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTradesTradeSpecifierClosePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Close Trade Close (partially or fully) a specific open Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject4"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AccountsAccountIDTradesTradeSpecifierClosePutAsync (string accountID, string tradeSpecifier, InlineObject4 inlineObject4, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = await AccountsAccountIDTradesTradeSpecifierClosePutAsyncWithHttpInfo(accountID, tradeSpecifier, inlineObject4, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Close Trade Close (partially or fully) a specific open Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject4"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<Object>> AccountsAccountIDTradesTradeSpecifierClosePutAsyncWithHttpInfo (string accountID, string tradeSpecifier, InlineObject4 inlineObject4, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierClosePut");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierClosePut");

            // verify the required parameter 'inlineObject4' is set
            if (inlineObject4 == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'inlineObject4' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierClosePut");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = inlineObject4;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/accounts/{accountID}/trades/{tradeSpecifier}/close", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTradesTradeSpecifierClosePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trade Details Get the details of a specific Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 AccountsAccountIDTradesTradeSpecifierGet (string accountID, string tradeSpecifier, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20014> localVarResponse = AccountsAccountIDTradesTradeSpecifierGetWithHttpInfo(accountID, tradeSpecifier, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Trade Details Get the details of a specific Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< InlineResponse20014 > AccountsAccountIDTradesTradeSpecifierGetWithHttpInfo (string accountID, string tradeSpecifier, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierGet");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierGet");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20014 >("/accounts/{accountID}/trades/{tradeSpecifier}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTradesTradeSpecifierGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trade Details Get the details of a specific Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> AccountsAccountIDTradesTradeSpecifierGetAsync (string accountID, string tradeSpecifier, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20014> localVarResponse = await AccountsAccountIDTradesTradeSpecifierGetAsyncWithHttpInfo(accountID, tradeSpecifier, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Trade Details Get the details of a specific Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20014>> AccountsAccountIDTradesTradeSpecifierGetAsyncWithHttpInfo (string accountID, string tradeSpecifier, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierGet");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierGet");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20014>("/accounts/{accountID}/trades/{tradeSpecifier}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTradesTradeSpecifierGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Dependent Orders Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject6"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Object</returns>
        public Object AccountsAccountIDTradesTradeSpecifierOrdersPut (string accountID, string tradeSpecifier, InlineObject6 inlineObject6, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = AccountsAccountIDTradesTradeSpecifierOrdersPutWithHttpInfo(accountID, tradeSpecifier, inlineObject6, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Dependent Orders Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject6"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< Object > AccountsAccountIDTradesTradeSpecifierOrdersPutWithHttpInfo (string accountID, string tradeSpecifier, InlineObject6 inlineObject6, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierOrdersPut");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierOrdersPut");

            // verify the required parameter 'inlineObject6' is set
            if (inlineObject6 == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'inlineObject6' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierOrdersPut");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = inlineObject6;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Object >("/accounts/{accountID}/trades/{tradeSpecifier}/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTradesTradeSpecifierOrdersPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Dependent Orders Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject6"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AccountsAccountIDTradesTradeSpecifierOrdersPutAsync (string accountID, string tradeSpecifier, InlineObject6 inlineObject6, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = await AccountsAccountIDTradesTradeSpecifierOrdersPutAsyncWithHttpInfo(accountID, tradeSpecifier, inlineObject6, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Dependent Orders Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="inlineObject6"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<Object>> AccountsAccountIDTradesTradeSpecifierOrdersPutAsyncWithHttpInfo (string accountID, string tradeSpecifier, InlineObject6 inlineObject6, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierOrdersPut");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierOrdersPut");

            // verify the required parameter 'inlineObject6' is set
            if (inlineObject6 == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'inlineObject6' when calling TradeApi->AccountsAccountIDTradesTradeSpecifierOrdersPut");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = inlineObject6;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/accounts/{accountID}/trades/{tradeSpecifier}/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDTradesTradeSpecifierOrdersPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GeriRemenyi.Oanda.V20.Client;
using GeriRemenyi.Oanda.V20.Model;

namespace GeriRemenyi.Oanda.V20.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPositionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Open Positions
        /// </summary>
        /// <remarks>
        /// List all open Positions for an Account. An open Position is a Position in an Account that currently has a Trade opened for it.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 AccountsAccountIDOpenPositionsGet (string accountID);

        /// <summary>
        /// Open Positions
        /// </summary>
        /// <remarks>
        /// List all open Positions for an Account. An open Position is a Position in an Account that currently has a Trade opened for it.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> AccountsAccountIDOpenPositionsGetWithHttpInfo (string accountID);
        /// <summary>
        /// List Positions
        /// </summary>
        /// <remarks>
        /// List all Positions for an Account. The Positions returned are for every instrument that has had a position during the lifetime of an the Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 AccountsAccountIDPositionsGet (string accountID);

        /// <summary>
        /// List Positions
        /// </summary>
        /// <remarks>
        /// List all Positions for an Account. The Positions returned are for every instrument that has had a position during the lifetime of an the Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> AccountsAccountIDPositionsGetWithHttpInfo (string accountID);
        /// <summary>
        /// Close Position
        /// </summary>
        /// <remarks>
        /// Closeout the open Position for a specific instrument in an Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <param name="inlineObject7"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Object</returns>
        Object AccountsAccountIDPositionsInstrumentClosePut (string accountID, string instrument, InlineObject7 inlineObject7, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Close Position
        /// </summary>
        /// <remarks>
        /// Closeout the open Position for a specific instrument in an Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <param name="inlineObject7"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AccountsAccountIDPositionsInstrumentClosePutWithHttpInfo (string accountID, string instrument, InlineObject7 inlineObject7, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Instrument Position
        /// </summary>
        /// <remarks>
        /// Get the details of a single Instrument&#39;s Position in an Account. The Position may by open or not.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 AccountsAccountIDPositionsInstrumentGet (string accountID, string instrument);

        /// <summary>
        /// Instrument Position
        /// </summary>
        /// <remarks>
        /// Get the details of a single Instrument&#39;s Position in an Account. The Position may by open or not.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> AccountsAccountIDPositionsInstrumentGetWithHttpInfo (string accountID, string instrument);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPositionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Open Positions
        /// </summary>
        /// <remarks>
        /// List all open Positions for an Account. An open Position is a Position in an Account that currently has a Trade opened for it.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> AccountsAccountIDOpenPositionsGetAsync (string accountID);

        /// <summary>
        /// Open Positions
        /// </summary>
        /// <remarks>
        /// List all open Positions for an Account. An open Position is a Position in an Account that currently has a Trade opened for it.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> AccountsAccountIDOpenPositionsGetAsyncWithHttpInfo (string accountID);
        /// <summary>
        /// List Positions
        /// </summary>
        /// <remarks>
        /// List all Positions for an Account. The Positions returned are for every instrument that has had a position during the lifetime of an the Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> AccountsAccountIDPositionsGetAsync (string accountID);

        /// <summary>
        /// List Positions
        /// </summary>
        /// <remarks>
        /// List all Positions for an Account. The Positions returned are for every instrument that has had a position during the lifetime of an the Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> AccountsAccountIDPositionsGetAsyncWithHttpInfo (string accountID);
        /// <summary>
        /// Close Position
        /// </summary>
        /// <remarks>
        /// Closeout the open Position for a specific instrument in an Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <param name="inlineObject7"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AccountsAccountIDPositionsInstrumentClosePutAsync (string accountID, string instrument, InlineObject7 inlineObject7, string acceptDatetimeFormat = default(string));

        /// <summary>
        /// Close Position
        /// </summary>
        /// <remarks>
        /// Closeout the open Position for a specific instrument in an Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <param name="inlineObject7"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AccountsAccountIDPositionsInstrumentClosePutAsyncWithHttpInfo (string accountID, string instrument, InlineObject7 inlineObject7, string acceptDatetimeFormat = default(string));
        /// <summary>
        /// Instrument Position
        /// </summary>
        /// <remarks>
        /// Get the details of a single Instrument&#39;s Position in an Account. The Position may by open or not.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> AccountsAccountIDPositionsInstrumentGetAsync (string accountID, string instrument);

        /// <summary>
        /// Instrument Position
        /// </summary>
        /// <remarks>
        /// Get the details of a single Instrument&#39;s Position in an Account. The Position may by open or not.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> AccountsAccountIDPositionsInstrumentGetAsyncWithHttpInfo (string accountID, string instrument);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPositionApi : IPositionApiSync, IPositionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PositionApi : IPositionApi
    {
        private GeriRemenyi.Oanda.V20.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PositionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PositionApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PositionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PositionApi(String basePath)
        {
            this.Configuration = GeriRemenyi.Oanda.V20.Client.Configuration.MergeConfigurations(
                GeriRemenyi.Oanda.V20.Client.GlobalConfiguration.Instance,
                new GeriRemenyi.Oanda.V20.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PositionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PositionApi(GeriRemenyi.Oanda.V20.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GeriRemenyi.Oanda.V20.Client.Configuration.MergeConfigurations(
                GeriRemenyi.Oanda.V20.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeriRemenyi.Oanda.V20.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PositionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PositionApi(GeriRemenyi.Oanda.V20.Client.ISynchronousClient client,GeriRemenyi.Oanda.V20.Client.IAsynchronousClient asyncClient, GeriRemenyi.Oanda.V20.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GeriRemenyi.Oanda.V20.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Open Positions List all open Positions for an Account. An open Position is a Position in an Account that currently has a Trade opened for it.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 AccountsAccountIDOpenPositionsGet (string accountID)
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20016> localVarResponse = AccountsAccountIDOpenPositionsGetWithHttpInfo(accountID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Open Positions List all open Positions for an Account. An open Position is a Position in an Account that currently has a Trade opened for it.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< InlineResponse20016 > AccountsAccountIDOpenPositionsGetWithHttpInfo (string accountID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling PositionApi->AccountsAccountIDOpenPositionsGet");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20016 >("/accounts/{accountID}/openPositions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOpenPositionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Open Positions List all open Positions for an Account. An open Position is a Position in an Account that currently has a Trade opened for it.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> AccountsAccountIDOpenPositionsGetAsync (string accountID)
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20016> localVarResponse = await AccountsAccountIDOpenPositionsGetAsyncWithHttpInfo(accountID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Open Positions List all open Positions for an Account. An open Position is a Position in an Account that currently has a Trade opened for it.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20016>> AccountsAccountIDOpenPositionsGetAsyncWithHttpInfo (string accountID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling PositionApi->AccountsAccountIDOpenPositionsGet");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20016>("/accounts/{accountID}/openPositions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDOpenPositionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Positions List all Positions for an Account. The Positions returned are for every instrument that has had a position during the lifetime of an the Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 AccountsAccountIDPositionsGet (string accountID)
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20015> localVarResponse = AccountsAccountIDPositionsGetWithHttpInfo(accountID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Positions List all Positions for an Account. The Positions returned are for every instrument that has had a position during the lifetime of an the Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< InlineResponse20015 > AccountsAccountIDPositionsGetWithHttpInfo (string accountID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling PositionApi->AccountsAccountIDPositionsGet");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20015 >("/accounts/{accountID}/positions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDPositionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Positions List all Positions for an Account. The Positions returned are for every instrument that has had a position during the lifetime of an the Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> AccountsAccountIDPositionsGetAsync (string accountID)
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20015> localVarResponse = await AccountsAccountIDPositionsGetAsyncWithHttpInfo(accountID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Positions List all Positions for an Account. The Positions returned are for every instrument that has had a position during the lifetime of an the Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20015>> AccountsAccountIDPositionsGetAsyncWithHttpInfo (string accountID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling PositionApi->AccountsAccountIDPositionsGet");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20015>("/accounts/{accountID}/positions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDPositionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Close Position Closeout the open Position for a specific instrument in an Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <param name="inlineObject7"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Object</returns>
        public Object AccountsAccountIDPositionsInstrumentClosePut (string accountID, string instrument, InlineObject7 inlineObject7, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = AccountsAccountIDPositionsInstrumentClosePutWithHttpInfo(accountID, instrument, inlineObject7, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Close Position Closeout the open Position for a specific instrument in an Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <param name="inlineObject7"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< Object > AccountsAccountIDPositionsInstrumentClosePutWithHttpInfo (string accountID, string instrument, InlineObject7 inlineObject7, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling PositionApi->AccountsAccountIDPositionsInstrumentClosePut");

            // verify the required parameter 'instrument' is set
            if (instrument == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'instrument' when calling PositionApi->AccountsAccountIDPositionsInstrumentClosePut");

            // verify the required parameter 'inlineObject7' is set
            if (inlineObject7 == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'inlineObject7' when calling PositionApi->AccountsAccountIDPositionsInstrumentClosePut");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("instrument", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(instrument)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = inlineObject7;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Object >("/accounts/{accountID}/positions/{instrument}/close", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDPositionsInstrumentClosePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Close Position Closeout the open Position for a specific instrument in an Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <param name="inlineObject7"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AccountsAccountIDPositionsInstrumentClosePutAsync (string accountID, string instrument, InlineObject7 inlineObject7, string acceptDatetimeFormat = default(string))
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<Object> localVarResponse = await AccountsAccountIDPositionsInstrumentClosePutAsyncWithHttpInfo(accountID, instrument, inlineObject7, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Close Position Closeout the open Position for a specific instrument in an Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <param name="inlineObject7"></param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<Object>> AccountsAccountIDPositionsInstrumentClosePutAsyncWithHttpInfo (string accountID, string instrument, InlineObject7 inlineObject7, string acceptDatetimeFormat = default(string))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling PositionApi->AccountsAccountIDPositionsInstrumentClosePut");

            // verify the required parameter 'instrument' is set
            if (instrument == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'instrument' when calling PositionApi->AccountsAccountIDPositionsInstrumentClosePut");

            // verify the required parameter 'inlineObject7' is set
            if (inlineObject7 == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'inlineObject7' when calling PositionApi->AccountsAccountIDPositionsInstrumentClosePut");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("instrument", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(instrument)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = inlineObject7;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/accounts/{accountID}/positions/{instrument}/close", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDPositionsInstrumentClosePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Instrument Position Get the details of a single Instrument&#39;s Position in an Account. The Position may by open or not.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 AccountsAccountIDPositionsInstrumentGet (string accountID, string instrument)
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20017> localVarResponse = AccountsAccountIDPositionsInstrumentGetWithHttpInfo(accountID, instrument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Instrument Position Get the details of a single Instrument&#39;s Position in an Account. The Position may by open or not.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public GeriRemenyi.Oanda.V20.Client.ApiResponse< InlineResponse20017 > AccountsAccountIDPositionsInstrumentGetWithHttpInfo (string accountID, string instrument)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling PositionApi->AccountsAccountIDPositionsInstrumentGet");

            // verify the required parameter 'instrument' is set
            if (instrument == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'instrument' when calling PositionApi->AccountsAccountIDPositionsInstrumentGet");

            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("instrument", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(instrument)); // path parameter

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20017 >("/accounts/{accountID}/positions/{instrument}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDPositionsInstrumentGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Instrument Position Get the details of a single Instrument&#39;s Position in an Account. The Position may by open or not.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> AccountsAccountIDPositionsInstrumentGetAsync (string accountID, string instrument)
        {
             GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20017> localVarResponse = await AccountsAccountIDPositionsInstrumentGetAsyncWithHttpInfo(accountID, instrument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Instrument Position Get the details of a single Instrument&#39;s Position in an Account. The Position may by open or not.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instrument">Instrument name</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.ApiResponse<InlineResponse20017>> AccountsAccountIDPositionsInstrumentGetAsyncWithHttpInfo (string accountID, string instrument)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'accountID' when calling PositionApi->AccountsAccountIDPositionsInstrumentGet");

            // verify the required parameter 'instrument' is set
            if (instrument == null)
                throw new GeriRemenyi.Oanda.V20.Client.ApiException(400, "Missing required parameter 'instrument' when calling PositionApi->AccountsAccountIDPositionsInstrumentGet");


            GeriRemenyi.Oanda.V20.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("instrument", GeriRemenyi.Oanda.V20.Client.ClientUtils.ParameterToString(instrument)); // path parameter

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20017>("/accounts/{accountID}/positions/{instrument}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsAccountIDPositionsInstrumentGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

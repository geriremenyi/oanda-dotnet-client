/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Model
{
    /// <summary>
    /// The full details of a client&#39;s Account. This includes full open Trade, open Position and pending Order representation.
    /// </summary>
    [DataContract]
    public partial class Account : AccountAllOf,  IEquatable<Account>, IValidatableObject
    {
        /// <summary>
        /// The home currency of the Account
        /// </summary>
        /// <value>The home currency of the Account</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            /// <summary>
            /// Enum AUD for value: AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD = 1,

            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 2,

            /// <summary>
            /// Enum CHF for value: CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF = 3,

            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 4,

            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 5,

            /// <summary>
            /// Enum HKD for value: HKD
            /// </summary>
            [EnumMember(Value = "HKD")]
            HKD = 6,

            /// <summary>
            /// Enum JPY for value: JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY = 7,

            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 8,

            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 9

        }

        /// <summary>
        /// The home currency of the Account
        /// </summary>
        /// <value>The home currency of the Account</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// The current guaranteed Stop Loss Order mode of the Account.
        /// </summary>
        /// <value>The current guaranteed Stop Loss Order mode of the Account.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GuaranteedStopLossOrderModeEnum
        {
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 1,

            /// <summary>
            /// Enum ALLOWED for value: ALLOWED
            /// </summary>
            [EnumMember(Value = "ALLOWED")]
            ALLOWED = 2,

            /// <summary>
            /// Enum REQUIRED for value: REQUIRED
            /// </summary>
            [EnumMember(Value = "REQUIRED")]
            REQUIRED = 3

        }

        /// <summary>
        /// The current guaranteed Stop Loss Order mode of the Account.
        /// </summary>
        /// <value>The current guaranteed Stop Loss Order mode of the Account.</value>
        [DataMember(Name="guaranteedStopLossOrderMode", EmitDefaultValue=false)]
        public GuaranteedStopLossOrderModeEnum? GuaranteedStopLossOrderMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="id">The Account&#39;s identifier.</param>
        /// <param name="alias">Client-assigned alias for the Account. Only provided if the Account has an alias set.</param>
        /// <param name="currency">The home currency of the Account.</param>
        /// <param name="balance">The current balance of the Account..</param>
        /// <param name="createdByUserID">ID of the user that created the Account..</param>
        /// <param name="createdTime">A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places)..</param>
        /// <param name="guaranteedStopLossOrderMode">The current guaranteed Stop Loss Order mode of the Account..</param>
        /// <param name="pl">The total profit/loss realized over the lifetime of the Account..</param>
        /// <param name="resettablePL">The total realized profit/loss for the Account since it was last reset by the client..</param>
        /// <param name="resettablePLTime">A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places)..</param>
        /// <param name="financing">The total amount of financing paid/collected over the lifetime of the Account..</param>
        /// <param name="commission">The total amount of commission paid over the lifetime of the Account..</param>
        /// <param name="guaranteedExecutionFees">The total amount of fees charged over the lifetime of the Account for the execution of guaranteed Stop Loss Orders..</param>
        /// <param name="marginRate">Client-provided margin rate override for the Account. The effective margin rate of the Account is the lesser of this value and the OANDA margin rate for the Account&#39;s division. This value is only provided if a margin rate override exists for the Account..</param>
        /// <param name="marginCallEnterTime">A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places)..</param>
        /// <param name="marginCallExtensionCount">The number of times that the Account&#39;s current margin call was extended..</param>
        /// <param name="lastMarginCallExtensionTime">A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places)..</param>
        /// <param name="openTradeCount">The number of Trades currently open in the Account..</param>
        /// <param name="openPositionCount">The number of Positions currently open in the Account..</param>
        /// <param name="pendingOrderCount">The number of Orders currently pending in the Account..</param>
        /// <param name="hedgingEnabled">Flag indicating that the Account has hedging enabled..</param>
        /// <param name="lastOrderFillTimestamp">A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places)..</param>
        /// <param name="lastTransactionId">The ID of the last Transaction created for the Account..</param>
        /// <param name="unrealizedPL">The total unrealized profit/loss for all Trades currently open in the Account..</param>
        /// <param name="nAV">The net asset value of the Account. Equal to Account balance unrealizedPL..</param>
        /// <param name="marginUsed">Margin currently used for the Account..</param>
        /// <param name="marginAvailable">Margin available for Account currency..</param>
        /// <param name="positionValue">The value of the Account&#39;s open positions represented in the Account&#39;s home currency..</param>
        /// <param name="marginCloseoutUnrealizedPL">The Account&#39;s margin closeout unrealized PL..</param>
        /// <param name="marginCloseoutNAV">The Account&#39;s margin closeout NAV..</param>
        /// <param name="marginCloseoutMarginUsed">The Account&#39;s margin closeout margin used..</param>
        /// <param name="marginCloseoutPercent">The Account&#39;s margin closeout percentage. When this value is 1.0 or above the Account is in a margin closeout situation..</param>
        /// <param name="marginCloseoutPositionValue">The value of the Account&#39;s open positions as used for margin closeout calculations represented in the Account&#39;s home currency..</param>
        /// <param name="withdrawalLimit">The current WithdrawalLimit for the account which will be zero or a positive value indicating how much can be withdrawn from the account..</param>
        /// <param name="marginCallMarginUsed">The Account&#39;s margin call margin used..</param>
        /// <param name="marginCallPercent">The Account&#39;s margin call percentage. When this value is 1.0 or above the Account is in a margin call situation..</param>
        /// <param name="trades">The details of the Trades currently open in the Account..</param>
        /// <param name="positions">The details all Account Positions..</param>
        /// <param name="orders">The details of the Orders currently pending in the Account..</param>
        public Account(string id = default(string), string alias = default(string), CurrencyEnum? currency = default(CurrencyEnum?), double balance = default(double), int createdByUserID = default(int), string createdTime = default(string), GuaranteedStopLossOrderModeEnum? guaranteedStopLossOrderMode = default(GuaranteedStopLossOrderModeEnum?), double pl = default(double), double resettablePL = default(double), string resettablePLTime = default(string), double financing = default(double), double commission = default(double), double guaranteedExecutionFees = default(double), double marginRate = default(double), string marginCallEnterTime = default(string), int marginCallExtensionCount = default(int), string lastMarginCallExtensionTime = default(string), int openTradeCount = default(int), int openPositionCount = default(int), int pendingOrderCount = default(int), bool hedgingEnabled = default(bool), string lastOrderFillTimestamp = default(string), int lastTransactionId = default(int), double unrealizedPL = default(double), double nAV = default(double), double marginUsed = default(double), double marginAvailable = default(double), double positionValue = default(double), double marginCloseoutUnrealizedPL = default(double), double marginCloseoutNAV = default(double), double marginCloseoutMarginUsed = default(double), double marginCloseoutPercent = default(double), double marginCloseoutPositionValue = default(double), double withdrawalLimit = default(double), double marginCallMarginUsed = default(double), double marginCallPercent = default(double), List<InlineResponse2005ChangesTradesOpened> trades = default(List<InlineResponse2005ChangesTradesOpened>), List<InlineResponse2005ChangesPositions> positions = default(List<InlineResponse2005ChangesPositions>), List<InlineResponse2005ChangesOrdersCreated> orders = default(List<InlineResponse2005ChangesOrdersCreated>)) : base()
        {
            this.Id = id;
            this.Alias = alias;
            this.Currency = currency;
            this.Balance = balance;
            this.CreatedByUserID = createdByUserID;
            this.CreatedTime = createdTime;
            this.GuaranteedStopLossOrderMode = guaranteedStopLossOrderMode;
            this.Pl = pl;
            this.ResettablePL = resettablePL;
            this.ResettablePLTime = resettablePLTime;
            this.Financing = financing;
            this.Commission = commission;
            this.GuaranteedExecutionFees = guaranteedExecutionFees;
            this.MarginRate = marginRate;
            this.MarginCallEnterTime = marginCallEnterTime;
            this.MarginCallExtensionCount = marginCallExtensionCount;
            this.LastMarginCallExtensionTime = lastMarginCallExtensionTime;
            this.OpenTradeCount = openTradeCount;
            this.OpenPositionCount = openPositionCount;
            this.PendingOrderCount = pendingOrderCount;
            this.HedgingEnabled = hedgingEnabled;
            this.LastOrderFillTimestamp = lastOrderFillTimestamp;
            this.LastTransactionId = lastTransactionId;
            this.UnrealizedPL = unrealizedPL;
            this.NAV = nAV;
            this.MarginUsed = marginUsed;
            this.MarginAvailable = marginAvailable;
            this.PositionValue = positionValue;
            this.MarginCloseoutUnrealizedPL = marginCloseoutUnrealizedPL;
            this.MarginCloseoutNAV = marginCloseoutNAV;
            this.MarginCloseoutMarginUsed = marginCloseoutMarginUsed;
            this.MarginCloseoutPercent = marginCloseoutPercent;
            this.MarginCloseoutPositionValue = marginCloseoutPositionValue;
            this.WithdrawalLimit = withdrawalLimit;
            this.MarginCallMarginUsed = marginCallMarginUsed;
            this.MarginCallPercent = marginCallPercent;
        }
        
        /// <summary>
        /// The Account&#39;s identifier
        /// </summary>
        /// <value>The Account&#39;s identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Client-assigned alias for the Account. Only provided if the Account has an alias set
        /// </summary>
        /// <value>Client-assigned alias for the Account. Only provided if the Account has an alias set</value>
        [DataMember(Name="alias", EmitDefaultValue=true)]
        public string Alias { get; set; }

        /// <summary>
        /// The current balance of the Account.
        /// </summary>
        /// <value>The current balance of the Account.</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public double Balance { get; set; }

        /// <summary>
        /// ID of the user that created the Account.
        /// </summary>
        /// <value>ID of the user that created the Account.</value>
        [DataMember(Name="createdByUserID", EmitDefaultValue=false)]
        public int CreatedByUserID { get; set; }

        /// <summary>
        /// A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).
        /// </summary>
        /// <value>A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).</value>
        [DataMember(Name="createdTime", EmitDefaultValue=false)]
        public string CreatedTime { get; set; }

        /// <summary>
        /// The total profit/loss realized over the lifetime of the Account.
        /// </summary>
        /// <value>The total profit/loss realized over the lifetime of the Account.</value>
        [DataMember(Name="pl", EmitDefaultValue=false)]
        public double Pl { get; set; }

        /// <summary>
        /// The total realized profit/loss for the Account since it was last reset by the client.
        /// </summary>
        /// <value>The total realized profit/loss for the Account since it was last reset by the client.</value>
        [DataMember(Name="resettablePL", EmitDefaultValue=false)]
        public double ResettablePL { get; set; }

        /// <summary>
        /// A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).
        /// </summary>
        /// <value>A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).</value>
        [DataMember(Name="resettablePLTime", EmitDefaultValue=false)]
        public string ResettablePLTime { get; set; }

        /// <summary>
        /// The total amount of financing paid/collected over the lifetime of the Account.
        /// </summary>
        /// <value>The total amount of financing paid/collected over the lifetime of the Account.</value>
        [DataMember(Name="financing", EmitDefaultValue=false)]
        public double Financing { get; set; }

        /// <summary>
        /// The total amount of commission paid over the lifetime of the Account.
        /// </summary>
        /// <value>The total amount of commission paid over the lifetime of the Account.</value>
        [DataMember(Name="commission", EmitDefaultValue=false)]
        public double Commission { get; set; }

        /// <summary>
        /// The total amount of fees charged over the lifetime of the Account for the execution of guaranteed Stop Loss Orders.
        /// </summary>
        /// <value>The total amount of fees charged over the lifetime of the Account for the execution of guaranteed Stop Loss Orders.</value>
        [DataMember(Name="guaranteedExecutionFees", EmitDefaultValue=false)]
        public double GuaranteedExecutionFees { get; set; }

        /// <summary>
        /// Client-provided margin rate override for the Account. The effective margin rate of the Account is the lesser of this value and the OANDA margin rate for the Account&#39;s division. This value is only provided if a margin rate override exists for the Account.
        /// </summary>
        /// <value>Client-provided margin rate override for the Account. The effective margin rate of the Account is the lesser of this value and the OANDA margin rate for the Account&#39;s division. This value is only provided if a margin rate override exists for the Account.</value>
        [DataMember(Name="marginRate", EmitDefaultValue=false)]
        public double MarginRate { get; set; }

        /// <summary>
        /// A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).
        /// </summary>
        /// <value>A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).</value>
        [DataMember(Name="marginCallEnterTime", EmitDefaultValue=false)]
        public string MarginCallEnterTime { get; set; }

        /// <summary>
        /// The number of times that the Account&#39;s current margin call was extended.
        /// </summary>
        /// <value>The number of times that the Account&#39;s current margin call was extended.</value>
        [DataMember(Name="marginCallExtensionCount", EmitDefaultValue=false)]
        public int MarginCallExtensionCount { get; set; }

        /// <summary>
        /// A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).
        /// </summary>
        /// <value>A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).</value>
        [DataMember(Name="lastMarginCallExtensionTime", EmitDefaultValue=false)]
        public string LastMarginCallExtensionTime { get; set; }

        /// <summary>
        /// The number of Trades currently open in the Account.
        /// </summary>
        /// <value>The number of Trades currently open in the Account.</value>
        [DataMember(Name="openTradeCount", EmitDefaultValue=false)]
        public int OpenTradeCount { get; set; }

        /// <summary>
        /// The number of Positions currently open in the Account.
        /// </summary>
        /// <value>The number of Positions currently open in the Account.</value>
        [DataMember(Name="openPositionCount", EmitDefaultValue=false)]
        public int OpenPositionCount { get; set; }

        /// <summary>
        /// The number of Orders currently pending in the Account.
        /// </summary>
        /// <value>The number of Orders currently pending in the Account.</value>
        [DataMember(Name="pendingOrderCount", EmitDefaultValue=false)]
        public int PendingOrderCount { get; set; }

        /// <summary>
        /// Flag indicating that the Account has hedging enabled.
        /// </summary>
        /// <value>Flag indicating that the Account has hedging enabled.</value>
        [DataMember(Name="hedgingEnabled", EmitDefaultValue=false)]
        public bool HedgingEnabled { get; set; }

        /// <summary>
        /// A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).
        /// </summary>
        /// <value>A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).</value>
        [DataMember(Name="lastOrderFillTimestamp", EmitDefaultValue=false)]
        public string LastOrderFillTimestamp { get; set; }

        /// <summary>
        /// The ID of the last Transaction created for the Account.
        /// </summary>
        /// <value>The ID of the last Transaction created for the Account.</value>
        [DataMember(Name="lastTransactionId", EmitDefaultValue=false)]
        public int LastTransactionId { get; set; }

        /// <summary>
        /// The total unrealized profit/loss for all Trades currently open in the Account.
        /// </summary>
        /// <value>The total unrealized profit/loss for all Trades currently open in the Account.</value>
        [DataMember(Name="unrealizedPL", EmitDefaultValue=false)]
        public double UnrealizedPL { get; set; }

        /// <summary>
        /// The net asset value of the Account. Equal to Account balance unrealizedPL.
        /// </summary>
        /// <value>The net asset value of the Account. Equal to Account balance unrealizedPL.</value>
        [DataMember(Name="NAV", EmitDefaultValue=false)]
        public double NAV { get; set; }

        /// <summary>
        /// Margin currently used for the Account.
        /// </summary>
        /// <value>Margin currently used for the Account.</value>
        [DataMember(Name="marginUsed", EmitDefaultValue=false)]
        public double MarginUsed { get; set; }

        /// <summary>
        /// Margin available for Account currency.
        /// </summary>
        /// <value>Margin available for Account currency.</value>
        [DataMember(Name="marginAvailable", EmitDefaultValue=false)]
        public double MarginAvailable { get; set; }

        /// <summary>
        /// The value of the Account&#39;s open positions represented in the Account&#39;s home currency.
        /// </summary>
        /// <value>The value of the Account&#39;s open positions represented in the Account&#39;s home currency.</value>
        [DataMember(Name="positionValue", EmitDefaultValue=false)]
        public double PositionValue { get; set; }

        /// <summary>
        /// The Account&#39;s margin closeout unrealized PL.
        /// </summary>
        /// <value>The Account&#39;s margin closeout unrealized PL.</value>
        [DataMember(Name="marginCloseoutUnrealizedPL", EmitDefaultValue=false)]
        public double MarginCloseoutUnrealizedPL { get; set; }

        /// <summary>
        /// The Account&#39;s margin closeout NAV.
        /// </summary>
        /// <value>The Account&#39;s margin closeout NAV.</value>
        [DataMember(Name="marginCloseoutNAV", EmitDefaultValue=false)]
        public double MarginCloseoutNAV { get; set; }

        /// <summary>
        /// The Account&#39;s margin closeout margin used.
        /// </summary>
        /// <value>The Account&#39;s margin closeout margin used.</value>
        [DataMember(Name="marginCloseoutMarginUsed", EmitDefaultValue=false)]
        public double MarginCloseoutMarginUsed { get; set; }

        /// <summary>
        /// The Account&#39;s margin closeout percentage. When this value is 1.0 or above the Account is in a margin closeout situation.
        /// </summary>
        /// <value>The Account&#39;s margin closeout percentage. When this value is 1.0 or above the Account is in a margin closeout situation.</value>
        [DataMember(Name="marginCloseoutPercent", EmitDefaultValue=false)]
        public double MarginCloseoutPercent { get; set; }

        /// <summary>
        /// The value of the Account&#39;s open positions as used for margin closeout calculations represented in the Account&#39;s home currency.
        /// </summary>
        /// <value>The value of the Account&#39;s open positions as used for margin closeout calculations represented in the Account&#39;s home currency.</value>
        [DataMember(Name="marginCloseoutPositionValue", EmitDefaultValue=false)]
        public double MarginCloseoutPositionValue { get; set; }

        /// <summary>
        /// The current WithdrawalLimit for the account which will be zero or a positive value indicating how much can be withdrawn from the account.
        /// </summary>
        /// <value>The current WithdrawalLimit for the account which will be zero or a positive value indicating how much can be withdrawn from the account.</value>
        [DataMember(Name="withdrawalLimit", EmitDefaultValue=false)]
        public double WithdrawalLimit { get; set; }

        /// <summary>
        /// The Account&#39;s margin call margin used.
        /// </summary>
        /// <value>The Account&#39;s margin call margin used.</value>
        [DataMember(Name="marginCallMarginUsed", EmitDefaultValue=false)]
        public double MarginCallMarginUsed { get; set; }

        /// <summary>
        /// The Account&#39;s margin call percentage. When this value is 1.0 or above the Account is in a margin call situation.
        /// </summary>
        /// <value>The Account&#39;s margin call percentage. When this value is 1.0 or above the Account is in a margin call situation.</value>
        [DataMember(Name="marginCallPercent", EmitDefaultValue=false)]
        public double MarginCallPercent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  CreatedByUserID: ").Append(CreatedByUserID).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  GuaranteedStopLossOrderMode: ").Append(GuaranteedStopLossOrderMode).Append("\n");
            sb.Append("  Pl: ").Append(Pl).Append("\n");
            sb.Append("  ResettablePL: ").Append(ResettablePL).Append("\n");
            sb.Append("  ResettablePLTime: ").Append(ResettablePLTime).Append("\n");
            sb.Append("  Financing: ").Append(Financing).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  GuaranteedExecutionFees: ").Append(GuaranteedExecutionFees).Append("\n");
            sb.Append("  MarginRate: ").Append(MarginRate).Append("\n");
            sb.Append("  MarginCallEnterTime: ").Append(MarginCallEnterTime).Append("\n");
            sb.Append("  MarginCallExtensionCount: ").Append(MarginCallExtensionCount).Append("\n");
            sb.Append("  LastMarginCallExtensionTime: ").Append(LastMarginCallExtensionTime).Append("\n");
            sb.Append("  OpenTradeCount: ").Append(OpenTradeCount).Append("\n");
            sb.Append("  OpenPositionCount: ").Append(OpenPositionCount).Append("\n");
            sb.Append("  PendingOrderCount: ").Append(PendingOrderCount).Append("\n");
            sb.Append("  HedgingEnabled: ").Append(HedgingEnabled).Append("\n");
            sb.Append("  LastOrderFillTimestamp: ").Append(LastOrderFillTimestamp).Append("\n");
            sb.Append("  LastTransactionId: ").Append(LastTransactionId).Append("\n");
            sb.Append("  UnrealizedPL: ").Append(UnrealizedPL).Append("\n");
            sb.Append("  NAV: ").Append(NAV).Append("\n");
            sb.Append("  MarginUsed: ").Append(MarginUsed).Append("\n");
            sb.Append("  MarginAvailable: ").Append(MarginAvailable).Append("\n");
            sb.Append("  PositionValue: ").Append(PositionValue).Append("\n");
            sb.Append("  MarginCloseoutUnrealizedPL: ").Append(MarginCloseoutUnrealizedPL).Append("\n");
            sb.Append("  MarginCloseoutNAV: ").Append(MarginCloseoutNAV).Append("\n");
            sb.Append("  MarginCloseoutMarginUsed: ").Append(MarginCloseoutMarginUsed).Append("\n");
            sb.Append("  MarginCloseoutPercent: ").Append(MarginCloseoutPercent).Append("\n");
            sb.Append("  MarginCloseoutPositionValue: ").Append(MarginCloseoutPositionValue).Append("\n");
            sb.Append("  WithdrawalLimit: ").Append(WithdrawalLimit).Append("\n");
            sb.Append("  MarginCallMarginUsed: ").Append(MarginCallMarginUsed).Append("\n");
            sb.Append("  MarginCallPercent: ").Append(MarginCallPercent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Account);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="input">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && base.Equals(input) && 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && base.Equals(input) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                ) && base.Equals(input) && 
                (
                    this.Balance == input.Balance ||
                    this.Balance.Equals(input.Balance)
                ) && base.Equals(input) && 
                (
                    this.CreatedByUserID == input.CreatedByUserID ||
                    this.CreatedByUserID.Equals(input.CreatedByUserID)
                ) && base.Equals(input) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && base.Equals(input) && 
                (
                    this.GuaranteedStopLossOrderMode == input.GuaranteedStopLossOrderMode ||
                    this.GuaranteedStopLossOrderMode.Equals(input.GuaranteedStopLossOrderMode)
                ) && base.Equals(input) && 
                (
                    this.Pl == input.Pl ||
                    this.Pl.Equals(input.Pl)
                ) && base.Equals(input) && 
                (
                    this.ResettablePL == input.ResettablePL ||
                    this.ResettablePL.Equals(input.ResettablePL)
                ) && base.Equals(input) && 
                (
                    this.ResettablePLTime == input.ResettablePLTime ||
                    (this.ResettablePLTime != null &&
                    this.ResettablePLTime.Equals(input.ResettablePLTime))
                ) && base.Equals(input) && 
                (
                    this.Financing == input.Financing ||
                    this.Financing.Equals(input.Financing)
                ) && base.Equals(input) && 
                (
                    this.Commission == input.Commission ||
                    this.Commission.Equals(input.Commission)
                ) && base.Equals(input) && 
                (
                    this.GuaranteedExecutionFees == input.GuaranteedExecutionFees ||
                    this.GuaranteedExecutionFees.Equals(input.GuaranteedExecutionFees)
                ) && base.Equals(input) && 
                (
                    this.MarginRate == input.MarginRate ||
                    this.MarginRate.Equals(input.MarginRate)
                ) && base.Equals(input) && 
                (
                    this.MarginCallEnterTime == input.MarginCallEnterTime ||
                    (this.MarginCallEnterTime != null &&
                    this.MarginCallEnterTime.Equals(input.MarginCallEnterTime))
                ) && base.Equals(input) && 
                (
                    this.MarginCallExtensionCount == input.MarginCallExtensionCount ||
                    this.MarginCallExtensionCount.Equals(input.MarginCallExtensionCount)
                ) && base.Equals(input) && 
                (
                    this.LastMarginCallExtensionTime == input.LastMarginCallExtensionTime ||
                    (this.LastMarginCallExtensionTime != null &&
                    this.LastMarginCallExtensionTime.Equals(input.LastMarginCallExtensionTime))
                ) && base.Equals(input) && 
                (
                    this.OpenTradeCount == input.OpenTradeCount ||
                    this.OpenTradeCount.Equals(input.OpenTradeCount)
                ) && base.Equals(input) && 
                (
                    this.OpenPositionCount == input.OpenPositionCount ||
                    this.OpenPositionCount.Equals(input.OpenPositionCount)
                ) && base.Equals(input) && 
                (
                    this.PendingOrderCount == input.PendingOrderCount ||
                    this.PendingOrderCount.Equals(input.PendingOrderCount)
                ) && base.Equals(input) && 
                (
                    this.HedgingEnabled == input.HedgingEnabled ||
                    this.HedgingEnabled.Equals(input.HedgingEnabled)
                ) && base.Equals(input) && 
                (
                    this.LastOrderFillTimestamp == input.LastOrderFillTimestamp ||
                    (this.LastOrderFillTimestamp != null &&
                    this.LastOrderFillTimestamp.Equals(input.LastOrderFillTimestamp))
                ) && base.Equals(input) && 
                (
                    this.LastTransactionId == input.LastTransactionId ||
                    this.LastTransactionId.Equals(input.LastTransactionId)
                ) && base.Equals(input) && 
                (
                    this.UnrealizedPL == input.UnrealizedPL ||
                    this.UnrealizedPL.Equals(input.UnrealizedPL)
                ) && base.Equals(input) && 
                (
                    this.NAV == input.NAV ||
                    this.NAV.Equals(input.NAV)
                ) && base.Equals(input) && 
                (
                    this.MarginUsed == input.MarginUsed ||
                    this.MarginUsed.Equals(input.MarginUsed)
                ) && base.Equals(input) && 
                (
                    this.MarginAvailable == input.MarginAvailable ||
                    this.MarginAvailable.Equals(input.MarginAvailable)
                ) && base.Equals(input) && 
                (
                    this.PositionValue == input.PositionValue ||
                    this.PositionValue.Equals(input.PositionValue)
                ) && base.Equals(input) && 
                (
                    this.MarginCloseoutUnrealizedPL == input.MarginCloseoutUnrealizedPL ||
                    this.MarginCloseoutUnrealizedPL.Equals(input.MarginCloseoutUnrealizedPL)
                ) && base.Equals(input) && 
                (
                    this.MarginCloseoutNAV == input.MarginCloseoutNAV ||
                    this.MarginCloseoutNAV.Equals(input.MarginCloseoutNAV)
                ) && base.Equals(input) && 
                (
                    this.MarginCloseoutMarginUsed == input.MarginCloseoutMarginUsed ||
                    this.MarginCloseoutMarginUsed.Equals(input.MarginCloseoutMarginUsed)
                ) && base.Equals(input) && 
                (
                    this.MarginCloseoutPercent == input.MarginCloseoutPercent ||
                    this.MarginCloseoutPercent.Equals(input.MarginCloseoutPercent)
                ) && base.Equals(input) && 
                (
                    this.MarginCloseoutPositionValue == input.MarginCloseoutPositionValue ||
                    this.MarginCloseoutPositionValue.Equals(input.MarginCloseoutPositionValue)
                ) && base.Equals(input) && 
                (
                    this.WithdrawalLimit == input.WithdrawalLimit ||
                    this.WithdrawalLimit.Equals(input.WithdrawalLimit)
                ) && base.Equals(input) && 
                (
                    this.MarginCallMarginUsed == input.MarginCallMarginUsed ||
                    this.MarginCallMarginUsed.Equals(input.MarginCallMarginUsed)
                ) && base.Equals(input) && 
                (
                    this.MarginCallPercent == input.MarginCallPercent ||
                    this.MarginCallPercent.Equals(input.MarginCallPercent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Alias != null)
                    hashCode = hashCode * 59 + this.Alias.GetHashCode();
                hashCode = hashCode * 59 + this.Currency.GetHashCode();
                hashCode = hashCode * 59 + this.Balance.GetHashCode();
                hashCode = hashCode * 59 + this.CreatedByUserID.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                hashCode = hashCode * 59 + this.GuaranteedStopLossOrderMode.GetHashCode();
                hashCode = hashCode * 59 + this.Pl.GetHashCode();
                hashCode = hashCode * 59 + this.ResettablePL.GetHashCode();
                if (this.ResettablePLTime != null)
                    hashCode = hashCode * 59 + this.ResettablePLTime.GetHashCode();
                hashCode = hashCode * 59 + this.Financing.GetHashCode();
                hashCode = hashCode * 59 + this.Commission.GetHashCode();
                hashCode = hashCode * 59 + this.GuaranteedExecutionFees.GetHashCode();
                hashCode = hashCode * 59 + this.MarginRate.GetHashCode();
                if (this.MarginCallEnterTime != null)
                    hashCode = hashCode * 59 + this.MarginCallEnterTime.GetHashCode();
                hashCode = hashCode * 59 + this.MarginCallExtensionCount.GetHashCode();
                if (this.LastMarginCallExtensionTime != null)
                    hashCode = hashCode * 59 + this.LastMarginCallExtensionTime.GetHashCode();
                hashCode = hashCode * 59 + this.OpenTradeCount.GetHashCode();
                hashCode = hashCode * 59 + this.OpenPositionCount.GetHashCode();
                hashCode = hashCode * 59 + this.PendingOrderCount.GetHashCode();
                hashCode = hashCode * 59 + this.HedgingEnabled.GetHashCode();
                if (this.LastOrderFillTimestamp != null)
                    hashCode = hashCode * 59 + this.LastOrderFillTimestamp.GetHashCode();
                hashCode = hashCode * 59 + this.LastTransactionId.GetHashCode();
                hashCode = hashCode * 59 + this.UnrealizedPL.GetHashCode();
                hashCode = hashCode * 59 + this.NAV.GetHashCode();
                hashCode = hashCode * 59 + this.MarginUsed.GetHashCode();
                hashCode = hashCode * 59 + this.MarginAvailable.GetHashCode();
                hashCode = hashCode * 59 + this.PositionValue.GetHashCode();
                hashCode = hashCode * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();
                hashCode = hashCode * 59 + this.MarginCloseoutNAV.GetHashCode();
                hashCode = hashCode * 59 + this.MarginCloseoutMarginUsed.GetHashCode();
                hashCode = hashCode * 59 + this.MarginCloseoutPercent.GetHashCode();
                hashCode = hashCode * 59 + this.MarginCloseoutPositionValue.GetHashCode();
                hashCode = hashCode * 59 + this.WithdrawalLimit.GetHashCode();
                hashCode = hashCode * 59 + this.MarginCallMarginUsed.GetHashCode();
                hashCode = hashCode * 59 + this.MarginCallPercent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            
            // Id (string) pattern
            Regex regexId = new Regex(@"^\\d+-\\d+-\\d+-\\d+$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // CreatedTime (string) pattern
            Regex regexCreatedTime = new Regex(@"^(?:(?:\\d+(?:\\.\\d{1,9})?)|(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d))$", RegexOptions.CultureInvariant);
            if (false == regexCreatedTime.Match(this.CreatedTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedTime, must match a pattern of " + regexCreatedTime, new [] { "CreatedTime" });
            }

            // ResettablePLTime (string) pattern
            Regex regexResettablePLTime = new Regex(@"^(?:(?:\\d+(?:\\.\\d{1,9})?)|(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d))$", RegexOptions.CultureInvariant);
            if (false == regexResettablePLTime.Match(this.ResettablePLTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResettablePLTime, must match a pattern of " + regexResettablePLTime, new [] { "ResettablePLTime" });
            }

            // MarginCallEnterTime (string) pattern
            Regex regexMarginCallEnterTime = new Regex(@"^(?:(?:\\d+(?:\\.\\d{1,9})?)|(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d))$", RegexOptions.CultureInvariant);
            if (false == regexMarginCallEnterTime.Match(this.MarginCallEnterTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarginCallEnterTime, must match a pattern of " + regexMarginCallEnterTime, new [] { "MarginCallEnterTime" });
            }

            // LastMarginCallExtensionTime (string) pattern
            Regex regexLastMarginCallExtensionTime = new Regex(@"^(?:(?:\\d+(?:\\.\\d{1,9})?)|(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d))$", RegexOptions.CultureInvariant);
            if (false == regexLastMarginCallExtensionTime.Match(this.LastMarginCallExtensionTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastMarginCallExtensionTime, must match a pattern of " + regexLastMarginCallExtensionTime, new [] { "LastMarginCallExtensionTime" });
            }

            // LastOrderFillTimestamp (string) pattern
            Regex regexLastOrderFillTimestamp = new Regex(@"^(?:(?:\\d+(?:\\.\\d{1,9})?)|(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d))$", RegexOptions.CultureInvariant);
            if (false == regexLastOrderFillTimestamp.Match(this.LastOrderFillTimestamp).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastOrderFillTimestamp, must match a pattern of " + regexLastOrderFillTimestamp, new [] { "LastOrderFillTimestamp" });
            }

            yield break;
        }
    }

}

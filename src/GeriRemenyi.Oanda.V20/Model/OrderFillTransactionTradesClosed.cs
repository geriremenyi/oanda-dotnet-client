/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Model
{
    /// <summary>
    /// A TradeReduce object represents a Trade for an instrument that was reduced (either partially or fully) in an Account. It is found embedded in Transactions that affect the position of an instrument in the account, specifically the OrderFill Transaction.
    /// </summary>
    [DataContract]
    public partial class OrderFillTransactionTradesClosed :  IEquatable<OrderFillTransactionTradesClosed>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderFillTransactionTradesClosed" /> class.
        /// </summary>
        /// <param name="tradeID">The ID of the Trade that was reduced or closed.</param>
        /// <param name="units">The number of units that the Trade was reduced by.</param>
        /// <param name="price">The average price that the units were closed at. This price may be clamped for guaranteed Stop Loss Orders..</param>
        /// <param name="realizedPL">The PL realized when reducing the Trade.</param>
        /// <param name="financing">The financing paid/collected when reducing the Trade.</param>
        /// <param name="guaranteedExecutionFee">This is the fee that is charged for closing the Trade if it has a guaranteed Stop Loss Order attached to it..</param>
        /// <param name="halfSpreadCost">The half spread cost for the trade reduce/close. This can be apositive or negative value and is represented in the home currency of the Account..</param>
        public OrderFillTransactionTradesClosed(int tradeID = default(int), double units = default(double), double price = default(double), double realizedPL = default(double), double financing = default(double), double guaranteedExecutionFee = default(double), double halfSpreadCost = default(double))
        {
            this.TradeID = tradeID;
            this.Units = units;
            this.Price = price;
            this.RealizedPL = realizedPL;
            this.Financing = financing;
            this.GuaranteedExecutionFee = guaranteedExecutionFee;
            this.HalfSpreadCost = halfSpreadCost;
        }
        
        /// <summary>
        /// The ID of the Trade that was reduced or closed
        /// </summary>
        /// <value>The ID of the Trade that was reduced or closed</value>
        [DataMember(Name="tradeID", EmitDefaultValue=false)]
        public int TradeID { get; set; }

        /// <summary>
        /// The number of units that the Trade was reduced by
        /// </summary>
        /// <value>The number of units that the Trade was reduced by</value>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public double Units { get; set; }

        /// <summary>
        /// The average price that the units were closed at. This price may be clamped for guaranteed Stop Loss Orders.
        /// </summary>
        /// <value>The average price that the units were closed at. This price may be clamped for guaranteed Stop Loss Orders.</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double Price { get; set; }

        /// <summary>
        /// The PL realized when reducing the Trade
        /// </summary>
        /// <value>The PL realized when reducing the Trade</value>
        [DataMember(Name="realizedPL", EmitDefaultValue=false)]
        public double RealizedPL { get; set; }

        /// <summary>
        /// The financing paid/collected when reducing the Trade
        /// </summary>
        /// <value>The financing paid/collected when reducing the Trade</value>
        [DataMember(Name="financing", EmitDefaultValue=false)]
        public double Financing { get; set; }

        /// <summary>
        /// This is the fee that is charged for closing the Trade if it has a guaranteed Stop Loss Order attached to it.
        /// </summary>
        /// <value>This is the fee that is charged for closing the Trade if it has a guaranteed Stop Loss Order attached to it.</value>
        [DataMember(Name="guaranteedExecutionFee", EmitDefaultValue=false)]
        public double GuaranteedExecutionFee { get; set; }

        /// <summary>
        /// The half spread cost for the trade reduce/close. This can be apositive or negative value and is represented in the home currency of the Account.
        /// </summary>
        /// <value>The half spread cost for the trade reduce/close. This can be apositive or negative value and is represented in the home currency of the Account.</value>
        [DataMember(Name="halfSpreadCost", EmitDefaultValue=false)]
        public double HalfSpreadCost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderFillTransactionTradesClosed {\n");
            sb.Append("  TradeID: ").Append(TradeID).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  RealizedPL: ").Append(RealizedPL).Append("\n");
            sb.Append("  Financing: ").Append(Financing).Append("\n");
            sb.Append("  GuaranteedExecutionFee: ").Append(GuaranteedExecutionFee).Append("\n");
            sb.Append("  HalfSpreadCost: ").Append(HalfSpreadCost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderFillTransactionTradesClosed);
        }

        /// <summary>
        /// Returns true if OrderFillTransactionTradesClosed instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderFillTransactionTradesClosed to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderFillTransactionTradesClosed input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TradeID == input.TradeID ||
                    this.TradeID.Equals(input.TradeID)
                ) && 
                (
                    this.Units == input.Units ||
                    this.Units.Equals(input.Units)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.RealizedPL == input.RealizedPL ||
                    this.RealizedPL.Equals(input.RealizedPL)
                ) && 
                (
                    this.Financing == input.Financing ||
                    this.Financing.Equals(input.Financing)
                ) && 
                (
                    this.GuaranteedExecutionFee == input.GuaranteedExecutionFee ||
                    this.GuaranteedExecutionFee.Equals(input.GuaranteedExecutionFee)
                ) && 
                (
                    this.HalfSpreadCost == input.HalfSpreadCost ||
                    this.HalfSpreadCost.Equals(input.HalfSpreadCost)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.TradeID.GetHashCode();
                hashCode = hashCode * 59 + this.Units.GetHashCode();
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                hashCode = hashCode * 59 + this.RealizedPL.GetHashCode();
                hashCode = hashCode * 59 + this.Financing.GetHashCode();
                hashCode = hashCode * 59 + this.GuaranteedExecutionFee.GetHashCode();
                hashCode = hashCode * 59 + this.HalfSpreadCost.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

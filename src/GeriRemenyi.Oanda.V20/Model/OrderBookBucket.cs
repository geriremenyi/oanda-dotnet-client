/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Model
{
    /// <summary>
    /// The order book data for a partition of the instrument&#39;s prices.
    /// </summary>
    [DataContract]
    public partial class OrderBookBucket :  IEquatable<OrderBookBucket>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderBookBucket" /> class.
        /// </summary>
        /// <param name="price">The lowest price (inclusive) covered by the bucket. The bucket covers the price range from the price to price + the order book&#39;s bucketWidth..</param>
        /// <param name="longCountPercent">The percentage of the total number of orders represented by the long orders found in this bucket..</param>
        /// <param name="shortCountPercent">The percentage of the total number of orders represented by the short orders found in this bucket..</param>
        public OrderBookBucket(double price = default(double), double longCountPercent = default(double), double shortCountPercent = default(double))
        {
            this.Price = price;
            this.LongCountPercent = longCountPercent;
            this.ShortCountPercent = shortCountPercent;
        }
        
        /// <summary>
        /// The lowest price (inclusive) covered by the bucket. The bucket covers the price range from the price to price + the order book&#39;s bucketWidth.
        /// </summary>
        /// <value>The lowest price (inclusive) covered by the bucket. The bucket covers the price range from the price to price + the order book&#39;s bucketWidth.</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double Price { get; set; }

        /// <summary>
        /// The percentage of the total number of orders represented by the long orders found in this bucket.
        /// </summary>
        /// <value>The percentage of the total number of orders represented by the long orders found in this bucket.</value>
        [DataMember(Name="longCountPercent", EmitDefaultValue=false)]
        public double LongCountPercent { get; set; }

        /// <summary>
        /// The percentage of the total number of orders represented by the short orders found in this bucket.
        /// </summary>
        /// <value>The percentage of the total number of orders represented by the short orders found in this bucket.</value>
        [DataMember(Name="shortCountPercent", EmitDefaultValue=false)]
        public double ShortCountPercent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderBookBucket {\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  LongCountPercent: ").Append(LongCountPercent).Append("\n");
            sb.Append("  ShortCountPercent: ").Append(ShortCountPercent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderBookBucket);
        }

        /// <summary>
        /// Returns true if OrderBookBucket instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderBookBucket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderBookBucket input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.LongCountPercent == input.LongCountPercent ||
                    this.LongCountPercent.Equals(input.LongCountPercent)
                ) && 
                (
                    this.ShortCountPercent == input.ShortCountPercent ||
                    this.ShortCountPercent.Equals(input.ShortCountPercent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                hashCode = hashCode * 59 + this.LongCountPercent.GetHashCode();
                hashCode = hashCode * 59 + this.ShortCountPercent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

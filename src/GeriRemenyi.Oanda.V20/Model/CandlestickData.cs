/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Model
{
    /// <summary>
    /// The price data (open, high, low, close) for the Candlestick representation.
    /// </summary>
    [DataContract]
    public partial class CandlestickData :  IEquatable<CandlestickData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CandlestickData" /> class.
        /// </summary>
        /// <param name="o">The first (open) price in the time-range represented by the candlestick..</param>
        /// <param name="h">The highest price in the time-range represented by the candlestick..</param>
        /// <param name="l">The lowest price in the time-range represented by the candlestick..</param>
        /// <param name="c">The last (closing) price in the time-range represented by the candlestick..</param>
        public CandlestickData(double o = default(double), double h = default(double), double l = default(double), double c = default(double))
        {
            this.O = o;
            this.H = h;
            this.L = l;
            this.C = c;
        }
        
        /// <summary>
        /// The first (open) price in the time-range represented by the candlestick.
        /// </summary>
        /// <value>The first (open) price in the time-range represented by the candlestick.</value>
        [DataMember(Name="o", EmitDefaultValue=false)]
        public double O { get; set; }

        /// <summary>
        /// The highest price in the time-range represented by the candlestick.
        /// </summary>
        /// <value>The highest price in the time-range represented by the candlestick.</value>
        [DataMember(Name="h", EmitDefaultValue=false)]
        public double H { get; set; }

        /// <summary>
        /// The lowest price in the time-range represented by the candlestick.
        /// </summary>
        /// <value>The lowest price in the time-range represented by the candlestick.</value>
        [DataMember(Name="l", EmitDefaultValue=false)]
        public double L { get; set; }

        /// <summary>
        /// The last (closing) price in the time-range represented by the candlestick.
        /// </summary>
        /// <value>The last (closing) price in the time-range represented by the candlestick.</value>
        [DataMember(Name="c", EmitDefaultValue=false)]
        public double C { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CandlestickData {\n");
            sb.Append("  O: ").Append(O).Append("\n");
            sb.Append("  H: ").Append(H).Append("\n");
            sb.Append("  L: ").Append(L).Append("\n");
            sb.Append("  C: ").Append(C).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CandlestickData);
        }

        /// <summary>
        /// Returns true if CandlestickData instances are equal
        /// </summary>
        /// <param name="input">Instance of CandlestickData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CandlestickData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.O == input.O ||
                    this.O.Equals(input.O)
                ) && 
                (
                    this.H == input.H ||
                    this.H.Equals(input.H)
                ) && 
                (
                    this.L == input.L ||
                    this.L.Equals(input.L)
                ) && 
                (
                    this.C == input.C ||
                    this.C.Equals(input.C)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.O.GetHashCode();
                hashCode = hashCode * 59 + this.H.GetHashCode();
                hashCode = hashCode * 59 + this.L.GetHashCode();
                hashCode = hashCode * 59 + this.C.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Model
{
    /// <summary>
    /// Full specification of an Instrument.
    /// </summary>
    [DataContract]
    public partial class InlineResponse2003Instruments :  IEquatable<InlineResponse2003Instruments>, IValidatableObject
    {
        /// <summary>
        /// Instrument name identifier. Used by clients to refer to an Instrument.
        /// </summary>
        /// <value>Instrument name identifier. Used by clients to refer to an Instrument.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            /// <summary>
            /// Enum AUDCAD for value: AUD_CAD
            /// </summary>
            [EnumMember(Value = "AUD_CAD")]
            AUDCAD = 1,

            /// <summary>
            /// Enum AUDCHF for value: AUD_CHF
            /// </summary>
            [EnumMember(Value = "AUD_CHF")]
            AUDCHF = 2,

            /// <summary>
            /// Enum AUDHKD for value: AUD_HKD
            /// </summary>
            [EnumMember(Value = "AUD_HKD")]
            AUDHKD = 3,

            /// <summary>
            /// Enum AUDJPY for value: AUD_JPY
            /// </summary>
            [EnumMember(Value = "AUD_JPY")]
            AUDJPY = 4,

            /// <summary>
            /// Enum AUDNZD for value: AUD_NZD
            /// </summary>
            [EnumMember(Value = "AUD_NZD")]
            AUDNZD = 5,

            /// <summary>
            /// Enum AUDSGD for value: AUD_SGD
            /// </summary>
            [EnumMember(Value = "AUD_SGD")]
            AUDSGD = 6,

            /// <summary>
            /// Enum AUDUSD for value: AUD_USD
            /// </summary>
            [EnumMember(Value = "AUD_USD")]
            AUDUSD = 7,

            /// <summary>
            /// Enum CADCHF for value: CAD_CHF
            /// </summary>
            [EnumMember(Value = "CAD_CHF")]
            CADCHF = 8,

            /// <summary>
            /// Enum CADHKD for value: CAD_HKD
            /// </summary>
            [EnumMember(Value = "CAD_HKD")]
            CADHKD = 9,

            /// <summary>
            /// Enum CADJPY for value: CAD_JPY
            /// </summary>
            [EnumMember(Value = "CAD_JPY")]
            CADJPY = 10,

            /// <summary>
            /// Enum CADSGD for value: CAD_SGD
            /// </summary>
            [EnumMember(Value = "CAD_SGD")]
            CADSGD = 11,

            /// <summary>
            /// Enum CHFHKD for value: CHF_HKD
            /// </summary>
            [EnumMember(Value = "CHF_HKD")]
            CHFHKD = 12,

            /// <summary>
            /// Enum CHFJPY for value: CHF_JPY
            /// </summary>
            [EnumMember(Value = "CHF_JPY")]
            CHFJPY = 13,

            /// <summary>
            /// Enum CHFZAR for value: CHF_ZAR
            /// </summary>
            [EnumMember(Value = "CHF_ZAR")]
            CHFZAR = 14,

            /// <summary>
            /// Enum EURAUD for value: EUR_AUD
            /// </summary>
            [EnumMember(Value = "EUR_AUD")]
            EURAUD = 15,

            /// <summary>
            /// Enum EURCAD for value: EUR_CAD
            /// </summary>
            [EnumMember(Value = "EUR_CAD")]
            EURCAD = 16,

            /// <summary>
            /// Enum EURCHF for value: EUR_CHF
            /// </summary>
            [EnumMember(Value = "EUR_CHF")]
            EURCHF = 17,

            /// <summary>
            /// Enum EURCZK for value: EUR_CZK
            /// </summary>
            [EnumMember(Value = "EUR_CZK")]
            EURCZK = 18,

            /// <summary>
            /// Enum EURDKK for value: EUR_DKK
            /// </summary>
            [EnumMember(Value = "EUR_DKK")]
            EURDKK = 19,

            /// <summary>
            /// Enum EURGBP for value: EUR_GBP
            /// </summary>
            [EnumMember(Value = "EUR_GBP")]
            EURGBP = 20,

            /// <summary>
            /// Enum EURHKD for value: EUR_HKD
            /// </summary>
            [EnumMember(Value = "EUR_HKD")]
            EURHKD = 21,

            /// <summary>
            /// Enum EURHUF for value: EUR_HUF
            /// </summary>
            [EnumMember(Value = "EUR_HUF")]
            EURHUF = 22,

            /// <summary>
            /// Enum EURJPY for value: EUR_JPY
            /// </summary>
            [EnumMember(Value = "EUR_JPY")]
            EURJPY = 23,

            /// <summary>
            /// Enum EURNOK for value: EUR_NOK
            /// </summary>
            [EnumMember(Value = "EUR_NOK")]
            EURNOK = 24,

            /// <summary>
            /// Enum EURNZD for value: EUR_NZD
            /// </summary>
            [EnumMember(Value = "EUR_NZD")]
            EURNZD = 25,

            /// <summary>
            /// Enum EURPLN for value: EUR_PLN
            /// </summary>
            [EnumMember(Value = "EUR_PLN")]
            EURPLN = 26,

            /// <summary>
            /// Enum EURSEK for value: EUR_SEK
            /// </summary>
            [EnumMember(Value = "EUR_SEK")]
            EURSEK = 27,

            /// <summary>
            /// Enum EURSGD for value: EUR_SGD
            /// </summary>
            [EnumMember(Value = "EUR_SGD")]
            EURSGD = 28,

            /// <summary>
            /// Enum EURTRY for value: EUR_TRY
            /// </summary>
            [EnumMember(Value = "EUR_TRY")]
            EURTRY = 29,

            /// <summary>
            /// Enum EURUSD for value: EUR_USD
            /// </summary>
            [EnumMember(Value = "EUR_USD")]
            EURUSD = 30,

            /// <summary>
            /// Enum EURZAR for value: EUR_ZAR
            /// </summary>
            [EnumMember(Value = "EUR_ZAR")]
            EURZAR = 31,

            /// <summary>
            /// Enum GBPAUD for value: GBP_AUD
            /// </summary>
            [EnumMember(Value = "GBP_AUD")]
            GBPAUD = 32,

            /// <summary>
            /// Enum GBPCAD for value: GBP_CAD
            /// </summary>
            [EnumMember(Value = "GBP_CAD")]
            GBPCAD = 33,

            /// <summary>
            /// Enum GBPCHF for value: GBP_CHF
            /// </summary>
            [EnumMember(Value = "GBP_CHF")]
            GBPCHF = 34,

            /// <summary>
            /// Enum GBPHKD for value: GBP_HKD
            /// </summary>
            [EnumMember(Value = "GBP_HKD")]
            GBPHKD = 35,

            /// <summary>
            /// Enum GBPJPY for value: GBP_JPY
            /// </summary>
            [EnumMember(Value = "GBP_JPY")]
            GBPJPY = 36,

            /// <summary>
            /// Enum GBPNZD for value: GBP_NZD
            /// </summary>
            [EnumMember(Value = "GBP_NZD")]
            GBPNZD = 37,

            /// <summary>
            /// Enum GBPPLN for value: GBP_PLN
            /// </summary>
            [EnumMember(Value = "GBP_PLN")]
            GBPPLN = 38,

            /// <summary>
            /// Enum GBPSGD for value: GBP_SGD
            /// </summary>
            [EnumMember(Value = "GBP_SGD")]
            GBPSGD = 39,

            /// <summary>
            /// Enum GBPUSD for value: GBP_USD
            /// </summary>
            [EnumMember(Value = "GBP_USD")]
            GBPUSD = 40,

            /// <summary>
            /// Enum GBPZAR for value: GBP_ZAR
            /// </summary>
            [EnumMember(Value = "GBP_ZAR")]
            GBPZAR = 41,

            /// <summary>
            /// Enum HKDJPY for value: HKD_JPY
            /// </summary>
            [EnumMember(Value = "HKD_JPY")]
            HKDJPY = 42,

            /// <summary>
            /// Enum NZDCAD for value: NZD_CAD
            /// </summary>
            [EnumMember(Value = "NZD_CAD")]
            NZDCAD = 43,

            /// <summary>
            /// Enum NZDCHF for value: NZD_CHF
            /// </summary>
            [EnumMember(Value = "NZD_CHF")]
            NZDCHF = 44,

            /// <summary>
            /// Enum NZDHKD for value: NZD_HKD
            /// </summary>
            [EnumMember(Value = "NZD_HKD")]
            NZDHKD = 45,

            /// <summary>
            /// Enum NZDJPY for value: NZD_JPY
            /// </summary>
            [EnumMember(Value = "NZD_JPY")]
            NZDJPY = 46,

            /// <summary>
            /// Enum NZDSGD for value: NZD_SGD
            /// </summary>
            [EnumMember(Value = "NZD_SGD")]
            NZDSGD = 47,

            /// <summary>
            /// Enum NZDUSD for value: NZD_USD
            /// </summary>
            [EnumMember(Value = "NZD_USD")]
            NZDUSD = 48,

            /// <summary>
            /// Enum SGDCHF for value: SGD_CHF
            /// </summary>
            [EnumMember(Value = "SGD_CHF")]
            SGDCHF = 49,

            /// <summary>
            /// Enum SGDHKD for value: SGD_HKD
            /// </summary>
            [EnumMember(Value = "SGD_HKD")]
            SGDHKD = 50,

            /// <summary>
            /// Enum SGDJPY for value: SGD_JPY
            /// </summary>
            [EnumMember(Value = "SGD_JPY")]
            SGDJPY = 51,

            /// <summary>
            /// Enum TRYJPY for value: TRY_JPY
            /// </summary>
            [EnumMember(Value = "TRY_JPY")]
            TRYJPY = 52,

            /// <summary>
            /// Enum USDCAD for value: USD_CAD
            /// </summary>
            [EnumMember(Value = "USD_CAD")]
            USDCAD = 53,

            /// <summary>
            /// Enum USDCHF for value: USD_CHF
            /// </summary>
            [EnumMember(Value = "USD_CHF")]
            USDCHF = 54,

            /// <summary>
            /// Enum USDCNH for value: USD_CNH
            /// </summary>
            [EnumMember(Value = "USD_CNH")]
            USDCNH = 55,

            /// <summary>
            /// Enum USDCZK for value: USD_CZK
            /// </summary>
            [EnumMember(Value = "USD_CZK")]
            USDCZK = 56,

            /// <summary>
            /// Enum USDDKK for value: USD_DKK
            /// </summary>
            [EnumMember(Value = "USD_DKK")]
            USDDKK = 57,

            /// <summary>
            /// Enum USDHKD for value: USD_HKD
            /// </summary>
            [EnumMember(Value = "USD_HKD")]
            USDHKD = 58,

            /// <summary>
            /// Enum USDHUF for value: USD_HUF
            /// </summary>
            [EnumMember(Value = "USD_HUF")]
            USDHUF = 59,

            /// <summary>
            /// Enum USDJPY for value: USD_JPY
            /// </summary>
            [EnumMember(Value = "USD_JPY")]
            USDJPY = 60,

            /// <summary>
            /// Enum USDMXN for value: USD_MXN
            /// </summary>
            [EnumMember(Value = "USD_MXN")]
            USDMXN = 61,

            /// <summary>
            /// Enum USDNOK for value: USD_NOK
            /// </summary>
            [EnumMember(Value = "USD_NOK")]
            USDNOK = 62,

            /// <summary>
            /// Enum USDPLN for value: USD_PLN
            /// </summary>
            [EnumMember(Value = "USD_PLN")]
            USDPLN = 63,

            /// <summary>
            /// Enum USDSAR for value: USD_SAR
            /// </summary>
            [EnumMember(Value = "USD_SAR")]
            USDSAR = 64,

            /// <summary>
            /// Enum USDSEK for value: USD_SEK
            /// </summary>
            [EnumMember(Value = "USD_SEK")]
            USDSEK = 65,

            /// <summary>
            /// Enum USDSGD for value: USD_SGD
            /// </summary>
            [EnumMember(Value = "USD_SGD")]
            USDSGD = 66,

            /// <summary>
            /// Enum USDTHB for value: USD_THB
            /// </summary>
            [EnumMember(Value = "USD_THB")]
            USDTHB = 67,

            /// <summary>
            /// Enum USDTRY for value: USD_TRY
            /// </summary>
            [EnumMember(Value = "USD_TRY")]
            USDTRY = 68,

            /// <summary>
            /// Enum USDZAR for value: USD_ZAR
            /// </summary>
            [EnumMember(Value = "USD_ZAR")]
            USDZAR = 69,

            /// <summary>
            /// Enum ZARJPY for value: ZAR_JPY
            /// </summary>
            [EnumMember(Value = "ZAR_JPY")]
            ZARJPY = 70

        }

        /// <summary>
        /// Instrument name identifier. Used by clients to refer to an Instrument.
        /// </summary>
        /// <value>Instrument name identifier. Used by clients to refer to an Instrument.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public NameEnum? Name { get; set; }
        /// <summary>
        /// The type of the Instrument
        /// </summary>
        /// <value>The type of the Instrument</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum CURRENCY for value: CURRENCY
            /// </summary>
            [EnumMember(Value = "CURRENCY")]
            CURRENCY = 1,

            /// <summary>
            /// Enum CFD for value: CFD
            /// </summary>
            [EnumMember(Value = "CFD")]
            CFD = 2,

            /// <summary>
            /// Enum METAL for value: METAL
            /// </summary>
            [EnumMember(Value = "METAL")]
            METAL = 3

        }

        /// <summary>
        /// The type of the Instrument
        /// </summary>
        /// <value>The type of the Instrument</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2003Instruments" /> class.
        /// </summary>
        /// <param name="name">Instrument name identifier. Used by clients to refer to an Instrument..</param>
        /// <param name="type">The type of the Instrument.</param>
        /// <param name="displayName">The display name of the Instrument.</param>
        /// <param name="pipLocation">The location of the \&quot;pip\&quot; for this instrument. The decimal position of the pip in this Instrument&#39;s price can be found at 10 ^ pipLocation (e.g. -4 pipLocation results in a decimal pip position of 10 ^ -4 &#x3D; 0.0001)..</param>
        /// <param name="displayPrecision">The number of decimal places that should be used to display prices for this instrument. (e.g. a displayPrecision of 5 would result in a price of \&quot;1\&quot; being displayed as \&quot;1.00000\&quot;).</param>
        /// <param name="tradeUnitsPrecision">The amount of decimal places that may be provided when specifying the number of units traded for this instrument..</param>
        /// <param name="minimumTradeSize">The smallest number of units allowed to be traded for this instrument..</param>
        /// <param name="maximumTrailingStopDistance">The maximum trailing stop distance allowed for a trailing stop loss created for this instrument. Specified in price units..</param>
        /// <param name="minimumTrailingStopDistance">The minimum trailing stop distance allowed for a trailing stop loss created for this instrument. Specified in price units..</param>
        /// <param name="maximumPositionSize">The maximum position size allowed for this instrument. Specified in units..</param>
        /// <param name="maximumOrderUnits">The maximum units allowed for an Order placed for this instrument. Specified in units..</param>
        /// <param name="marginRate">The margin rate for this instrument..</param>
        /// <param name="commission">commission.</param>
        public InlineResponse2003Instruments(NameEnum? name = default(NameEnum?), TypeEnum? type = default(TypeEnum?), string displayName = default(string), int pipLocation = default(int), int displayPrecision = default(int), int tradeUnitsPrecision = default(int), double minimumTradeSize = default(double), double maximumTrailingStopDistance = default(double), double minimumTrailingStopDistance = default(double), double maximumPositionSize = default(double), double maximumOrderUnits = default(double), double marginRate = default(double), InlineResponse2003Commission commission = default(InlineResponse2003Commission))
        {
            this.Name = name;
            this.Type = type;
            this.DisplayName = displayName;
            this.PipLocation = pipLocation;
            this.DisplayPrecision = displayPrecision;
            this.TradeUnitsPrecision = tradeUnitsPrecision;
            this.MinimumTradeSize = minimumTradeSize;
            this.MaximumTrailingStopDistance = maximumTrailingStopDistance;
            this.MinimumTrailingStopDistance = minimumTrailingStopDistance;
            this.MaximumPositionSize = maximumPositionSize;
            this.MaximumOrderUnits = maximumOrderUnits;
            this.MarginRate = marginRate;
            this.Commission = commission;
        }
        
        /// <summary>
        /// The display name of the Instrument
        /// </summary>
        /// <value>The display name of the Instrument</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The location of the \&quot;pip\&quot; for this instrument. The decimal position of the pip in this Instrument&#39;s price can be found at 10 ^ pipLocation (e.g. -4 pipLocation results in a decimal pip position of 10 ^ -4 &#x3D; 0.0001).
        /// </summary>
        /// <value>The location of the \&quot;pip\&quot; for this instrument. The decimal position of the pip in this Instrument&#39;s price can be found at 10 ^ pipLocation (e.g. -4 pipLocation results in a decimal pip position of 10 ^ -4 &#x3D; 0.0001).</value>
        [DataMember(Name="pipLocation", EmitDefaultValue=false)]
        public int PipLocation { get; set; }

        /// <summary>
        /// The number of decimal places that should be used to display prices for this instrument. (e.g. a displayPrecision of 5 would result in a price of \&quot;1\&quot; being displayed as \&quot;1.00000\&quot;)
        /// </summary>
        /// <value>The number of decimal places that should be used to display prices for this instrument. (e.g. a displayPrecision of 5 would result in a price of \&quot;1\&quot; being displayed as \&quot;1.00000\&quot;)</value>
        [DataMember(Name="displayPrecision", EmitDefaultValue=false)]
        public int DisplayPrecision { get; set; }

        /// <summary>
        /// The amount of decimal places that may be provided when specifying the number of units traded for this instrument.
        /// </summary>
        /// <value>The amount of decimal places that may be provided when specifying the number of units traded for this instrument.</value>
        [DataMember(Name="tradeUnitsPrecision", EmitDefaultValue=false)]
        public int TradeUnitsPrecision { get; set; }

        /// <summary>
        /// The smallest number of units allowed to be traded for this instrument.
        /// </summary>
        /// <value>The smallest number of units allowed to be traded for this instrument.</value>
        [DataMember(Name="minimumTradeSize", EmitDefaultValue=false)]
        public double MinimumTradeSize { get; set; }

        /// <summary>
        /// The maximum trailing stop distance allowed for a trailing stop loss created for this instrument. Specified in price units.
        /// </summary>
        /// <value>The maximum trailing stop distance allowed for a trailing stop loss created for this instrument. Specified in price units.</value>
        [DataMember(Name="maximumTrailingStopDistance", EmitDefaultValue=false)]
        public double MaximumTrailingStopDistance { get; set; }

        /// <summary>
        /// The minimum trailing stop distance allowed for a trailing stop loss created for this instrument. Specified in price units.
        /// </summary>
        /// <value>The minimum trailing stop distance allowed for a trailing stop loss created for this instrument. Specified in price units.</value>
        [DataMember(Name="minimumTrailingStopDistance", EmitDefaultValue=false)]
        public double MinimumTrailingStopDistance { get; set; }

        /// <summary>
        /// The maximum position size allowed for this instrument. Specified in units.
        /// </summary>
        /// <value>The maximum position size allowed for this instrument. Specified in units.</value>
        [DataMember(Name="maximumPositionSize", EmitDefaultValue=false)]
        public double MaximumPositionSize { get; set; }

        /// <summary>
        /// The maximum units allowed for an Order placed for this instrument. Specified in units.
        /// </summary>
        /// <value>The maximum units allowed for an Order placed for this instrument. Specified in units.</value>
        [DataMember(Name="maximumOrderUnits", EmitDefaultValue=false)]
        public double MaximumOrderUnits { get; set; }

        /// <summary>
        /// The margin rate for this instrument.
        /// </summary>
        /// <value>The margin rate for this instrument.</value>
        [DataMember(Name="marginRate", EmitDefaultValue=false)]
        public double MarginRate { get; set; }

        /// <summary>
        /// Gets or Sets Commission
        /// </summary>
        [DataMember(Name="commission", EmitDefaultValue=false)]
        public InlineResponse2003Commission Commission { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2003Instruments {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  PipLocation: ").Append(PipLocation).Append("\n");
            sb.Append("  DisplayPrecision: ").Append(DisplayPrecision).Append("\n");
            sb.Append("  TradeUnitsPrecision: ").Append(TradeUnitsPrecision).Append("\n");
            sb.Append("  MinimumTradeSize: ").Append(MinimumTradeSize).Append("\n");
            sb.Append("  MaximumTrailingStopDistance: ").Append(MaximumTrailingStopDistance).Append("\n");
            sb.Append("  MinimumTrailingStopDistance: ").Append(MinimumTrailingStopDistance).Append("\n");
            sb.Append("  MaximumPositionSize: ").Append(MaximumPositionSize).Append("\n");
            sb.Append("  MaximumOrderUnits: ").Append(MaximumOrderUnits).Append("\n");
            sb.Append("  MarginRate: ").Append(MarginRate).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2003Instruments);
        }

        /// <summary>
        /// Returns true if InlineResponse2003Instruments instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2003Instruments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2003Instruments input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    this.Name.Equals(input.Name)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.PipLocation == input.PipLocation ||
                    this.PipLocation.Equals(input.PipLocation)
                ) && 
                (
                    this.DisplayPrecision == input.DisplayPrecision ||
                    this.DisplayPrecision.Equals(input.DisplayPrecision)
                ) && 
                (
                    this.TradeUnitsPrecision == input.TradeUnitsPrecision ||
                    this.TradeUnitsPrecision.Equals(input.TradeUnitsPrecision)
                ) && 
                (
                    this.MinimumTradeSize == input.MinimumTradeSize ||
                    this.MinimumTradeSize.Equals(input.MinimumTradeSize)
                ) && 
                (
                    this.MaximumTrailingStopDistance == input.MaximumTrailingStopDistance ||
                    this.MaximumTrailingStopDistance.Equals(input.MaximumTrailingStopDistance)
                ) && 
                (
                    this.MinimumTrailingStopDistance == input.MinimumTrailingStopDistance ||
                    this.MinimumTrailingStopDistance.Equals(input.MinimumTrailingStopDistance)
                ) && 
                (
                    this.MaximumPositionSize == input.MaximumPositionSize ||
                    this.MaximumPositionSize.Equals(input.MaximumPositionSize)
                ) && 
                (
                    this.MaximumOrderUnits == input.MaximumOrderUnits ||
                    this.MaximumOrderUnits.Equals(input.MaximumOrderUnits)
                ) && 
                (
                    this.MarginRate == input.MarginRate ||
                    this.MarginRate.Equals(input.MarginRate)
                ) && 
                (
                    this.Commission == input.Commission ||
                    (this.Commission != null &&
                    this.Commission.Equals(input.Commission))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.PipLocation.GetHashCode();
                hashCode = hashCode * 59 + this.DisplayPrecision.GetHashCode();
                hashCode = hashCode * 59 + this.TradeUnitsPrecision.GetHashCode();
                hashCode = hashCode * 59 + this.MinimumTradeSize.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumTrailingStopDistance.GetHashCode();
                hashCode = hashCode * 59 + this.MinimumTrailingStopDistance.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumPositionSize.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumOrderUnits.GetHashCode();
                hashCode = hashCode * 59 + this.MarginRate.GetHashCode();
                if (this.Commission != null)
                    hashCode = hashCode * 59 + this.Commission.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

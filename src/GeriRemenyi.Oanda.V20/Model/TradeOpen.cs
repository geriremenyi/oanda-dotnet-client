/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Model
{
    /// <summary>
    /// A TradeOpen object represents a Trade for an instrument that was opened in an Account. It is found embedded in Transactions that affect the position of an instrument in the Account, specifically the OrderFill Transaction.
    /// </summary>
    [DataContract]
    public partial class TradeOpen :  IEquatable<TradeOpen>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeOpen" /> class.
        /// </summary>
        /// <param name="tradeID">The ID of the Trade that was opened.</param>
        /// <param name="units">The number of units opened by the Trade.</param>
        /// <param name="price">The average price that the units were opened at..</param>
        /// <param name="guaranteedExecutionFee">This is the fee charged for opening the trade if it has a guaranteed Stop Loss Order attached to it..</param>
        /// <param name="clientExtensions">clientExtensions.</param>
        /// <param name="halfSpreadCost">The half spread cost for the trade open. This can be a positive or negative value and is represented in the home currency of the Account..</param>
        /// <param name="initialMarginRequired">The margin required at the time the Trade was created. Note, this is the &#39;pure&#39; margin required, it is not the &#39;effective&#39; margin used that factors in the trade risk if a GSLO is attached to the trade..</param>
        public TradeOpen(int tradeID = default(int), double units = default(double), double price = default(double), double guaranteedExecutionFee = default(double), InlineResponse2005ChangesClientExtensions clientExtensions = default(InlineResponse2005ChangesClientExtensions), double halfSpreadCost = default(double), double initialMarginRequired = default(double))
        {
            this.TradeID = tradeID;
            this.Units = units;
            this.Price = price;
            this.GuaranteedExecutionFee = guaranteedExecutionFee;
            this.ClientExtensions = clientExtensions;
            this.HalfSpreadCost = halfSpreadCost;
            this.InitialMarginRequired = initialMarginRequired;
        }
        
        /// <summary>
        /// The ID of the Trade that was opened
        /// </summary>
        /// <value>The ID of the Trade that was opened</value>
        [DataMember(Name="tradeID", EmitDefaultValue=false)]
        public int TradeID { get; set; }

        /// <summary>
        /// The number of units opened by the Trade
        /// </summary>
        /// <value>The number of units opened by the Trade</value>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public double Units { get; set; }

        /// <summary>
        /// The average price that the units were opened at.
        /// </summary>
        /// <value>The average price that the units were opened at.</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double Price { get; set; }

        /// <summary>
        /// This is the fee charged for opening the trade if it has a guaranteed Stop Loss Order attached to it.
        /// </summary>
        /// <value>This is the fee charged for opening the trade if it has a guaranteed Stop Loss Order attached to it.</value>
        [DataMember(Name="guaranteedExecutionFee", EmitDefaultValue=false)]
        public double GuaranteedExecutionFee { get; set; }

        /// <summary>
        /// Gets or Sets ClientExtensions
        /// </summary>
        [DataMember(Name="clientExtensions", EmitDefaultValue=false)]
        public InlineResponse2005ChangesClientExtensions ClientExtensions { get; set; }

        /// <summary>
        /// The half spread cost for the trade open. This can be a positive or negative value and is represented in the home currency of the Account.
        /// </summary>
        /// <value>The half spread cost for the trade open. This can be a positive or negative value and is represented in the home currency of the Account.</value>
        [DataMember(Name="halfSpreadCost", EmitDefaultValue=false)]
        public double HalfSpreadCost { get; set; }

        /// <summary>
        /// The margin required at the time the Trade was created. Note, this is the &#39;pure&#39; margin required, it is not the &#39;effective&#39; margin used that factors in the trade risk if a GSLO is attached to the trade.
        /// </summary>
        /// <value>The margin required at the time the Trade was created. Note, this is the &#39;pure&#39; margin required, it is not the &#39;effective&#39; margin used that factors in the trade risk if a GSLO is attached to the trade.</value>
        [DataMember(Name="initialMarginRequired", EmitDefaultValue=false)]
        public double InitialMarginRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradeOpen {\n");
            sb.Append("  TradeID: ").Append(TradeID).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  GuaranteedExecutionFee: ").Append(GuaranteedExecutionFee).Append("\n");
            sb.Append("  ClientExtensions: ").Append(ClientExtensions).Append("\n");
            sb.Append("  HalfSpreadCost: ").Append(HalfSpreadCost).Append("\n");
            sb.Append("  InitialMarginRequired: ").Append(InitialMarginRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradeOpen);
        }

        /// <summary>
        /// Returns true if TradeOpen instances are equal
        /// </summary>
        /// <param name="input">Instance of TradeOpen to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradeOpen input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TradeID == input.TradeID ||
                    this.TradeID.Equals(input.TradeID)
                ) && 
                (
                    this.Units == input.Units ||
                    this.Units.Equals(input.Units)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.GuaranteedExecutionFee == input.GuaranteedExecutionFee ||
                    this.GuaranteedExecutionFee.Equals(input.GuaranteedExecutionFee)
                ) && 
                (
                    this.ClientExtensions == input.ClientExtensions ||
                    (this.ClientExtensions != null &&
                    this.ClientExtensions.Equals(input.ClientExtensions))
                ) && 
                (
                    this.HalfSpreadCost == input.HalfSpreadCost ||
                    this.HalfSpreadCost.Equals(input.HalfSpreadCost)
                ) && 
                (
                    this.InitialMarginRequired == input.InitialMarginRequired ||
                    this.InitialMarginRequired.Equals(input.InitialMarginRequired)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.TradeID.GetHashCode();
                hashCode = hashCode * 59 + this.Units.GetHashCode();
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                hashCode = hashCode * 59 + this.GuaranteedExecutionFee.GetHashCode();
                if (this.ClientExtensions != null)
                    hashCode = hashCode * 59 + this.ClientExtensions.GetHashCode();
                hashCode = hashCode * 59 + this.HalfSpreadCost.GetHashCode();
                hashCode = hashCode * 59 + this.InitialMarginRequired.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using GeriRemenyi.Oanda.V20.Client.Client;
using GeriRemenyi.Oanda.V20.Client.Api;
using GeriRemenyi.Oanda.V20.Client.Model;

namespace GeriRemenyi.Oanda.V20.Client.Test
{
    /// <summary>
    ///  Class for testing PricingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PricingApiTests : IDisposable
    {
        private PricingApi instance;

        public PricingApiTests()
        {
            instance = new PricingApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PricingApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PricingApi
            //Assert.IsType(typeof(PricingApi), instance, "instance is a PricingApi");
        }

        
        /// <summary>
        /// Test GetPricing
        /// </summary>
        [Fact]
        public void GetPricingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //List<InstrumentName> instruments = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //string since = null;
            //bool? includeUnitsAvailable = null;
            //bool? includeHomeConversions = null;
            //var response = instance.GetPricing(accountID, instruments, acceptDatetimeFormat, since, includeUnitsAvailable, includeHomeConversions);
            //Assert.IsType<PricingResponse> (response, "response is PricingResponse");
        }
        
    }

}

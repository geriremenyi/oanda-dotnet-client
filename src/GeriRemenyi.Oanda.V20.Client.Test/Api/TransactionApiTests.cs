/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using GeriRemenyi.Oanda.V20.Client.Client;
using GeriRemenyi.Oanda.V20.Client.Api;
using GeriRemenyi.Oanda.V20.Client.Model;

namespace GeriRemenyi.Oanda.V20.Client.Test
{
    /// <summary>
    ///  Class for testing TransactionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TransactionApiTests : IDisposable
    {
        private TransactionApi instance;

        public TransactionApiTests()
        {
            instance = new TransactionApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TransactionApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TransactionApi
            //Assert.IsType(typeof(TransactionApi), instance, "instance is a TransactionApi");
        }

        
        /// <summary>
        /// Test GetTransaction
        /// </summary>
        [Fact]
        public void GetTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //int transactionID = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //var response = instance.GetTransaction(accountID, transactionID, acceptDatetimeFormat);
            //Assert.IsType<TransactionResponse> (response, "response is TransactionResponse");
        }
        
        /// <summary>
        /// Test GetTransactionIdRange
        /// </summary>
        [Fact]
        public void GetTransactionIdRangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //int from = null;
            //int to = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //List<TransactionType> type = null;
            //var response = instance.GetTransactionIdRange(accountID, from, to, acceptDatetimeFormat, type);
            //Assert.IsType<TransactionIdRangeResponse> (response, "response is TransactionIdRangeResponse");
        }
        
        /// <summary>
        /// Test GetTransactions
        /// </summary>
        [Fact]
        public void GetTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //string from = null;
            //string to = null;
            //int? pageSize = null;
            //List<TransactionType> type = null;
            //var response = instance.GetTransactions(accountID, acceptDatetimeFormat, from, to, pageSize, type);
            //Assert.IsType<TransactionsResponse> (response, "response is TransactionsResponse");
        }
        
        /// <summary>
        /// Test GetTransactionsSince
        /// </summary>
        [Fact]
        public void GetTransactionsSinceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //int id = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //var response = instance.GetTransactionsSince(accountID, id, acceptDatetimeFormat);
            //Assert.IsType<TransactionSinceIdResponse> (response, "response is TransactionSinceIdResponse");
        }
        
    }

}

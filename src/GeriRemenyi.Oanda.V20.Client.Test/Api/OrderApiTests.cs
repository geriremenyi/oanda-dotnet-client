/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using GeriRemenyi.Oanda.V20.Client.Client;
using GeriRemenyi.Oanda.V20.Client.Api;
using GeriRemenyi.Oanda.V20.Client.Model;

namespace GeriRemenyi.Oanda.V20.Client.Test
{
    /// <summary>
    ///  Class for testing OrderApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OrderApiTests : IDisposable
    {
        private OrderApi instance;

        public OrderApiTests()
        {
            instance = new OrderApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OrderApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' OrderApi
            //Assert.IsType(typeof(OrderApi), instance, "instance is a OrderApi");
        }

        
        /// <summary>
        /// Test AccountsAccountIDOrdersOrderSpecifierPut
        /// </summary>
        [Fact]
        public void AccountsAccountIDOrdersOrderSpecifierPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string orderSpecifier = null;
            //ReplaceOrderRequest replaceOrderRequest = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //string clientRequestID = null;
            //var response = instance.AccountsAccountIDOrdersOrderSpecifierPut(accountID, orderSpecifier, replaceOrderRequest, acceptDatetimeFormat, clientRequestID);
            //Assert.IsType<ReplaceOrderResponse> (response, "response is ReplaceOrderResponse");
        }
        
        /// <summary>
        /// Test CancelOrder
        /// </summary>
        [Fact]
        public void CancelOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string orderSpecifier = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //string clientRequestID = null;
            //var response = instance.CancelOrder(accountID, orderSpecifier, acceptDatetimeFormat, clientRequestID);
            //Assert.IsType<CancelOrderResponse> (response, "response is CancelOrderResponse");
        }
        
        /// <summary>
        /// Test CreateOrder
        /// </summary>
        [Fact]
        public void CreateOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //CreateOrderRequest createOrderRequest = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //var response = instance.CreateOrder(accountID, createOrderRequest, acceptDatetimeFormat);
            //Assert.IsType<CreateOrderResponse> (response, "response is CreateOrderResponse");
        }
        
        /// <summary>
        /// Test GetOrder
        /// </summary>
        [Fact]
        public void GetOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string orderSpecifier = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //var response = instance.GetOrder(accountID, orderSpecifier, acceptDatetimeFormat);
            //Assert.IsType<OrderResponse> (response, "response is OrderResponse");
        }
        
        /// <summary>
        /// Test GetOrders
        /// </summary>
        [Fact]
        public void GetOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //List<int> ids = null;
            //string state = null;
            //InstrumentName? instrument = null;
            //int? count = null;
            //int? beforeID = null;
            //var response = instance.GetOrders(accountID, acceptDatetimeFormat, ids, state, instrument, count, beforeID);
            //Assert.IsType<OrdersResponse> (response, "response is OrdersResponse");
        }
        
        /// <summary>
        /// Test GetPendingOrders
        /// </summary>
        [Fact]
        public void GetPendingOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //var response = instance.GetPendingOrders(accountID, acceptDatetimeFormat);
            //Assert.IsType<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        
        /// <summary>
        /// Test SetOrderExtensions
        /// </summary>
        [Fact]
        public void SetOrderExtensionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string orderSpecifier = null;
            //OrderExtensionsRequest orderExtensionsRequest = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //var response = instance.SetOrderExtensions(accountID, orderSpecifier, orderExtensionsRequest, acceptDatetimeFormat);
            //Assert.IsType<OrderExtensionsResponse> (response, "response is OrderExtensionsResponse");
        }
        
    }

}

/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using GeriRemenyi.Oanda.V20.Client.Client;
using GeriRemenyi.Oanda.V20.Client.Api;
using GeriRemenyi.Oanda.V20.Client.Model;

namespace GeriRemenyi.Oanda.V20.Client.Test
{
    /// <summary>
    ///  Class for testing PositionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PositionApiTests : IDisposable
    {
        private PositionApi instance;

        public PositionApiTests()
        {
            instance = new PositionApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PositionApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PositionApi
            //Assert.IsType(typeof(PositionApi), instance, "instance is a PositionApi");
        }

        
        /// <summary>
        /// Test ClosePosition
        /// </summary>
        [Fact]
        public void ClosePositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //InstrumentName instrument = null;
            //ClosePositionRequest closePositionRequest = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //var response = instance.ClosePosition(accountID, instrument, closePositionRequest, acceptDatetimeFormat);
            //Assert.IsType<ClosePositionResponse> (response, "response is ClosePositionResponse");
        }
        
        /// <summary>
        /// Test GetInstrumentPosition
        /// </summary>
        [Fact]
        public void GetInstrumentPositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //InstrumentName instrument = null;
            //var response = instance.GetInstrumentPosition(accountID, instrument);
            //Assert.IsType<InstrumentPositionResponse> (response, "response is InstrumentPositionResponse");
        }
        
        /// <summary>
        /// Test GetOpenPositions
        /// </summary>
        [Fact]
        public void GetOpenPositionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //var response = instance.GetOpenPositions(accountID);
            //Assert.IsType<OpenPositionsResponse> (response, "response is OpenPositionsResponse");
        }
        
        /// <summary>
        /// Test GetPositions
        /// </summary>
        [Fact]
        public void GetPositionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //var response = instance.GetPositions(accountID);
            //Assert.IsType<PositionsResponse> (response, "response is PositionsResponse");
        }
        
    }

}

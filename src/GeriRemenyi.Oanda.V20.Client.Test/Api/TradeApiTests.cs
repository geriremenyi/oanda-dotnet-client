/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using GeriRemenyi.Oanda.V20.Client.Client;
using GeriRemenyi.Oanda.V20.Client.Api;
using GeriRemenyi.Oanda.V20.Client.Model;

namespace GeriRemenyi.Oanda.V20.Client.Test
{
    /// <summary>
    ///  Class for testing TradeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TradeApiTests : IDisposable
    {
        private TradeApi instance;

        public TradeApiTests()
        {
            instance = new TradeApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TradeApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TradeApi
            //Assert.IsType(typeof(TradeApi), instance, "instance is a TradeApi");
        }

        
        /// <summary>
        /// Test CloseTrade
        /// </summary>
        [Fact]
        public void CloseTradeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string tradeSpecifier = null;
            //CloseTradeRequest closeTradeRequest = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //var response = instance.CloseTrade(accountID, tradeSpecifier, closeTradeRequest, acceptDatetimeFormat);
            //Assert.IsType<CloseTradeResponse> (response, "response is CloseTradeResponse");
        }
        
        /// <summary>
        /// Test GetOpenTrades
        /// </summary>
        [Fact]
        public void GetOpenTradesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //var response = instance.GetOpenTrades(accountID, acceptDatetimeFormat);
            //Assert.IsType<OpenTradeResponse> (response, "response is OpenTradeResponse");
        }
        
        /// <summary>
        /// Test GetTrade
        /// </summary>
        [Fact]
        public void GetTradeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string tradeSpecifier = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //var response = instance.GetTrade(accountID, tradeSpecifier, acceptDatetimeFormat);
            //Assert.IsType<TradeResponse> (response, "response is TradeResponse");
        }
        
        /// <summary>
        /// Test GetTrades
        /// </summary>
        [Fact]
        public void GetTradesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //List<int> ids = null;
            //string state = null;
            //InstrumentName? instrument = null;
            //int? count = null;
            //int? beforeID = null;
            //var response = instance.GetTrades(accountID, acceptDatetimeFormat, ids, state, instrument, count, beforeID);
            //Assert.IsType<TradesResponse> (response, "response is TradesResponse");
        }
        
        /// <summary>
        /// Test SetTradeExtensions
        /// </summary>
        [Fact]
        public void SetTradeExtensionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string tradeSpecifier = null;
            //TradeExtensionsRequest tradeExtensionsRequest = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //var response = instance.SetTradeExtensions(accountID, tradeSpecifier, tradeExtensionsRequest, acceptDatetimeFormat);
            //Assert.IsType<TradeExtensionsResponse> (response, "response is TradeExtensionsResponse");
        }
        
        /// <summary>
        /// Test SetTradeOrders
        /// </summary>
        [Fact]
        public void SetTradeOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string tradeSpecifier = null;
            //DependentTradeOrdersRequest dependentTradeOrdersRequest = null;
            //DateTimeFormat? acceptDatetimeFormat = null;
            //var response = instance.SetTradeOrders(accountID, tradeSpecifier, dependentTradeOrdersRequest, acceptDatetimeFormat);
            //Assert.IsType<DependentTradeOrdersResponse> (response, "response is DependentTradeOrdersResponse");
        }
        
    }

}

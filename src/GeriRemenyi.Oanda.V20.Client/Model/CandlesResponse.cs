/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Client.Model
{
    /// <summary>
    /// CandlesResponse
    /// </summary>
    [DataContract]
    public partial class CandlesResponse :  IEquatable<CandlesResponse>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name="instrument", EmitDefaultValue=false)]
        public InstrumentName? Instrument { get; set; }
        /// <summary>
        /// Gets or Sets Granularity
        /// </summary>
        [DataMember(Name="granularity", EmitDefaultValue=false)]
        public CandlestickGranularity? Granularity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CandlesResponse" /> class.
        /// </summary>
        /// <param name="instrument">instrument.</param>
        /// <param name="granularity">granularity.</param>
        /// <param name="candles">The list of candlesticks that satisfy the request..</param>
        public CandlesResponse(InstrumentName? instrument = default(InstrumentName?), CandlestickGranularity? granularity = default(CandlestickGranularity?), List<Candlestick> candles = default(List<Candlestick>))
        {
            this.Instrument = instrument;
            this.Granularity = granularity;
            this.Candles = candles;
        }
        
        /// <summary>
        /// The list of candlesticks that satisfy the request.
        /// </summary>
        /// <value>The list of candlesticks that satisfy the request.</value>
        [DataMember(Name="candles", EmitDefaultValue=false)]
        public List<Candlestick> Candles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CandlesResponse {\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  Granularity: ").Append(Granularity).Append("\n");
            sb.Append("  Candles: ").Append(Candles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CandlesResponse);
        }

        /// <summary>
        /// Returns true if CandlesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CandlesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CandlesResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Instrument == input.Instrument ||
                    this.Instrument.Equals(input.Instrument)
                ) && 
                (
                    this.Granularity == input.Granularity ||
                    this.Granularity.Equals(input.Granularity)
                ) && 
                (
                    this.Candles == input.Candles ||
                    this.Candles != null &&
                    input.Candles != null &&
                    this.Candles.SequenceEqual(input.Candles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Instrument.GetHashCode();
                hashCode = hashCode * 59 + this.Granularity.GetHashCode();
                if (this.Candles != null)
                    hashCode = hashCode * 59 + this.Candles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Client.Model
{
    /// <summary>
    /// The dynamic (calculated) state of an open Trade
    /// </summary>
    [DataContract]
    public partial class CalculatedTradeState :  IEquatable<CalculatedTradeState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculatedTradeState" /> class.
        /// </summary>
        /// <param name="id">The Trade&#39;s ID..</param>
        /// <param name="unrealizedPL">The Trade&#39;s unrealized profit/loss..</param>
        /// <param name="marginUsed">Margin currently used by the Trade..</param>
        public CalculatedTradeState(int id = default(int), double unrealizedPL = default(double), double marginUsed = default(double))
        {
            this.Id = id;
            this.UnrealizedPL = unrealizedPL;
            this.MarginUsed = marginUsed;
        }
        
        /// <summary>
        /// The Trade&#39;s ID.
        /// </summary>
        /// <value>The Trade&#39;s ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The Trade&#39;s unrealized profit/loss.
        /// </summary>
        /// <value>The Trade&#39;s unrealized profit/loss.</value>
        [DataMember(Name="unrealizedPL", EmitDefaultValue=false)]
        public double UnrealizedPL { get; set; }

        /// <summary>
        /// Margin currently used by the Trade.
        /// </summary>
        /// <value>Margin currently used by the Trade.</value>
        [DataMember(Name="marginUsed", EmitDefaultValue=false)]
        public double MarginUsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CalculatedTradeState {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UnrealizedPL: ").Append(UnrealizedPL).Append("\n");
            sb.Append("  MarginUsed: ").Append(MarginUsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CalculatedTradeState);
        }

        /// <summary>
        /// Returns true if CalculatedTradeState instances are equal
        /// </summary>
        /// <param name="input">Instance of CalculatedTradeState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalculatedTradeState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.UnrealizedPL == input.UnrealizedPL ||
                    this.UnrealizedPL.Equals(input.UnrealizedPL)
                ) && 
                (
                    this.MarginUsed == input.MarginUsed ||
                    this.MarginUsed.Equals(input.MarginUsed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.UnrealizedPL.GetHashCode();
                hashCode = hashCode * 59 + this.MarginUsed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

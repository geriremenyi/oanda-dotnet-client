/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Client.Model
{
    /// <summary>
    /// The specification of an Account-specific Price.
    /// </summary>
    [DataContract]
    public partial class ClientPrice :  IEquatable<ClientPrice>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name="instrument", EmitDefaultValue=false)]
        public InstrumentName? Instrument { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public PriceStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientPrice" /> class.
        /// </summary>
        /// <param name="type">The string \&quot;PRICE\&quot;. Used to identify the a Price object when found in a stream..</param>
        /// <param name="instrument">instrument.</param>
        /// <param name="time">A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places)..</param>
        /// <param name="status">status.</param>
        /// <param name="tradeable">Flag indicating if the Price is tradeable or not.</param>
        /// <param name="bids">The list of prices and liquidity available on the Instrument&#39;s bid side. It is possible for this list to be empty if there is no bid liquidity currently available for the Instrument in the Account..</param>
        /// <param name="asks">The list of prices and liquidity available on the Instrument&#39;s ask side. It is possible for this list to be empty if there is no ask liquidity currently available for the Instrument in the Account..</param>
        /// <param name="closeoutBid">The closeout bid Price. This Price is used when a bid is required to closeout a Position (margin closeout or manual) yet there is no bid liquidity. The closeout bid is never used to open a new position..</param>
        /// <param name="closeoutAsk">The closeout ask Price. This Price is used when a ask is required to closeout a Position (margin closeout or manual) yet there is no ask liquidity. The closeout ask is never used to open a new position..</param>
        /// <param name="quoteHomeConversionFactors">quoteHomeConversionFactors.</param>
        /// <param name="unitsAvailable">unitsAvailable.</param>
        public ClientPrice(string type = default(string), InstrumentName? instrument = default(InstrumentName?), string time = default(string), PriceStatus? status = default(PriceStatus?), bool tradeable = default(bool), List<PriceBucket> bids = default(List<PriceBucket>), List<PriceBucket> asks = default(List<PriceBucket>), double closeoutBid = default(double), double closeoutAsk = default(double), QuoteHomeConversionFactors quoteHomeConversionFactors = default(QuoteHomeConversionFactors), UnitsAvailable unitsAvailable = default(UnitsAvailable))
        {
            this.Type = type;
            this.Instrument = instrument;
            this.Time = time;
            this.Status = status;
            this.Tradeable = tradeable;
            this.Bids = bids;
            this.Asks = asks;
            this.CloseoutBid = closeoutBid;
            this.CloseoutAsk = closeoutAsk;
            this.QuoteHomeConversionFactors = quoteHomeConversionFactors;
            this.UnitsAvailable = unitsAvailable;
        }
        
        /// <summary>
        /// The string \&quot;PRICE\&quot;. Used to identify the a Price object when found in a stream.
        /// </summary>
        /// <value>The string \&quot;PRICE\&quot;. Used to identify the a Price object when found in a stream.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).
        /// </summary>
        /// <value>A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public string Time { get; set; }

        /// <summary>
        /// Flag indicating if the Price is tradeable or not
        /// </summary>
        /// <value>Flag indicating if the Price is tradeable or not</value>
        [DataMember(Name="tradeable", EmitDefaultValue=false)]
        public bool Tradeable { get; set; }

        /// <summary>
        /// The list of prices and liquidity available on the Instrument&#39;s bid side. It is possible for this list to be empty if there is no bid liquidity currently available for the Instrument in the Account.
        /// </summary>
        /// <value>The list of prices and liquidity available on the Instrument&#39;s bid side. It is possible for this list to be empty if there is no bid liquidity currently available for the Instrument in the Account.</value>
        [DataMember(Name="bids", EmitDefaultValue=false)]
        public List<PriceBucket> Bids { get; set; }

        /// <summary>
        /// The list of prices and liquidity available on the Instrument&#39;s ask side. It is possible for this list to be empty if there is no ask liquidity currently available for the Instrument in the Account.
        /// </summary>
        /// <value>The list of prices and liquidity available on the Instrument&#39;s ask side. It is possible for this list to be empty if there is no ask liquidity currently available for the Instrument in the Account.</value>
        [DataMember(Name="asks", EmitDefaultValue=false)]
        public List<PriceBucket> Asks { get; set; }

        /// <summary>
        /// The closeout bid Price. This Price is used when a bid is required to closeout a Position (margin closeout or manual) yet there is no bid liquidity. The closeout bid is never used to open a new position.
        /// </summary>
        /// <value>The closeout bid Price. This Price is used when a bid is required to closeout a Position (margin closeout or manual) yet there is no bid liquidity. The closeout bid is never used to open a new position.</value>
        [DataMember(Name="closeoutBid", EmitDefaultValue=false)]
        public double CloseoutBid { get; set; }

        /// <summary>
        /// The closeout ask Price. This Price is used when a ask is required to closeout a Position (margin closeout or manual) yet there is no ask liquidity. The closeout ask is never used to open a new position.
        /// </summary>
        /// <value>The closeout ask Price. This Price is used when a ask is required to closeout a Position (margin closeout or manual) yet there is no ask liquidity. The closeout ask is never used to open a new position.</value>
        [DataMember(Name="closeoutAsk", EmitDefaultValue=false)]
        public double CloseoutAsk { get; set; }

        /// <summary>
        /// Gets or Sets QuoteHomeConversionFactors
        /// </summary>
        [DataMember(Name="quoteHomeConversionFactors", EmitDefaultValue=false)]
        public QuoteHomeConversionFactors QuoteHomeConversionFactors { get; set; }

        /// <summary>
        /// Gets or Sets UnitsAvailable
        /// </summary>
        [DataMember(Name="unitsAvailable", EmitDefaultValue=false)]
        public UnitsAvailable UnitsAvailable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientPrice {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tradeable: ").Append(Tradeable).Append("\n");
            sb.Append("  Bids: ").Append(Bids).Append("\n");
            sb.Append("  Asks: ").Append(Asks).Append("\n");
            sb.Append("  CloseoutBid: ").Append(CloseoutBid).Append("\n");
            sb.Append("  CloseoutAsk: ").Append(CloseoutAsk).Append("\n");
            sb.Append("  QuoteHomeConversionFactors: ").Append(QuoteHomeConversionFactors).Append("\n");
            sb.Append("  UnitsAvailable: ").Append(UnitsAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientPrice);
        }

        /// <summary>
        /// Returns true if ClientPrice instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientPrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientPrice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Instrument == input.Instrument ||
                    this.Instrument.Equals(input.Instrument)
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Tradeable == input.Tradeable ||
                    this.Tradeable.Equals(input.Tradeable)
                ) && 
                (
                    this.Bids == input.Bids ||
                    this.Bids != null &&
                    input.Bids != null &&
                    this.Bids.SequenceEqual(input.Bids)
                ) && 
                (
                    this.Asks == input.Asks ||
                    this.Asks != null &&
                    input.Asks != null &&
                    this.Asks.SequenceEqual(input.Asks)
                ) && 
                (
                    this.CloseoutBid == input.CloseoutBid ||
                    this.CloseoutBid.Equals(input.CloseoutBid)
                ) && 
                (
                    this.CloseoutAsk == input.CloseoutAsk ||
                    this.CloseoutAsk.Equals(input.CloseoutAsk)
                ) && 
                (
                    this.QuoteHomeConversionFactors == input.QuoteHomeConversionFactors ||
                    (this.QuoteHomeConversionFactors != null &&
                    this.QuoteHomeConversionFactors.Equals(input.QuoteHomeConversionFactors))
                ) && 
                (
                    this.UnitsAvailable == input.UnitsAvailable ||
                    (this.UnitsAvailable != null &&
                    this.UnitsAvailable.Equals(input.UnitsAvailable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Instrument.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.Tradeable.GetHashCode();
                if (this.Bids != null)
                    hashCode = hashCode * 59 + this.Bids.GetHashCode();
                if (this.Asks != null)
                    hashCode = hashCode * 59 + this.Asks.GetHashCode();
                hashCode = hashCode * 59 + this.CloseoutBid.GetHashCode();
                hashCode = hashCode * 59 + this.CloseoutAsk.GetHashCode();
                if (this.QuoteHomeConversionFactors != null)
                    hashCode = hashCode * 59 + this.QuoteHomeConversionFactors.GetHashCode();
                if (this.UnitsAvailable != null)
                    hashCode = hashCode * 59 + this.UnitsAvailable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Time (string) pattern
            Regex regexTime = new Regex(@"^(?:(?:\\d+(?:\\.\\d{1,9})?)|(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d))$", RegexOptions.CultureInvariant);
            if (false == regexTime.Match(this.Time).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Time, must match a pattern of " + regexTime, new [] { "Time" });
            }

            yield break;
        }
    }

}

/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Client.Model
{
    /// <summary>
    /// Full specification of an Instrument.
    /// </summary>
    [DataContract]
    public partial class Instrument :  IEquatable<Instrument>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public InstrumentName? Name { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public InstrumentType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Instrument" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="type">type.</param>
        /// <param name="displayName">The display name of the Instrument.</param>
        /// <param name="pipLocation">The location of the \&quot;pip\&quot; for this instrument. The decimal position of the pip in this Instrument&#39;s price can be found at 10 ^ pipLocation (e.g. -4 pipLocation results in a decimal pip position of 10 ^ -4 &#x3D; 0.0001)..</param>
        /// <param name="displayPrecision">The number of decimal places that should be used to display prices for this instrument. (e.g. a displayPrecision of 5 would result in a price of \&quot;1\&quot; being displayed as \&quot;1.00000\&quot;).</param>
        /// <param name="tradeUnitsPrecision">The amount of decimal places that may be provided when specifying the number of units traded for this instrument..</param>
        /// <param name="minimumTradeSize">The smallest number of units allowed to be traded for this instrument..</param>
        /// <param name="maximumTrailingStopDistance">The maximum trailing stop distance allowed for a trailing stop loss created for this instrument. Specified in price units..</param>
        /// <param name="minimumTrailingStopDistance">The minimum trailing stop distance allowed for a trailing stop loss created for this instrument. Specified in price units..</param>
        /// <param name="maximumPositionSize">The maximum position size allowed for this instrument. Specified in units..</param>
        /// <param name="maximumOrderUnits">The maximum units allowed for an Order placed for this instrument. Specified in units..</param>
        /// <param name="marginRate">The margin rate for this instrument..</param>
        /// <param name="commission">commission.</param>
        public Instrument(InstrumentName? name = default(InstrumentName?), InstrumentType? type = default(InstrumentType?), string displayName = default(string), int pipLocation = default(int), int displayPrecision = default(int), int tradeUnitsPrecision = default(int), double minimumTradeSize = default(double), double maximumTrailingStopDistance = default(double), double minimumTrailingStopDistance = default(double), double maximumPositionSize = default(double), double maximumOrderUnits = default(double), double marginRate = default(double), InstrumentComission commission = default(InstrumentComission))
        {
            this.Name = name;
            this.Type = type;
            this.DisplayName = displayName;
            this.PipLocation = pipLocation;
            this.DisplayPrecision = displayPrecision;
            this.TradeUnitsPrecision = tradeUnitsPrecision;
            this.MinimumTradeSize = minimumTradeSize;
            this.MaximumTrailingStopDistance = maximumTrailingStopDistance;
            this.MinimumTrailingStopDistance = minimumTrailingStopDistance;
            this.MaximumPositionSize = maximumPositionSize;
            this.MaximumOrderUnits = maximumOrderUnits;
            this.MarginRate = marginRate;
            this.Commission = commission;
        }
        
        /// <summary>
        /// The display name of the Instrument
        /// </summary>
        /// <value>The display name of the Instrument</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The location of the \&quot;pip\&quot; for this instrument. The decimal position of the pip in this Instrument&#39;s price can be found at 10 ^ pipLocation (e.g. -4 pipLocation results in a decimal pip position of 10 ^ -4 &#x3D; 0.0001).
        /// </summary>
        /// <value>The location of the \&quot;pip\&quot; for this instrument. The decimal position of the pip in this Instrument&#39;s price can be found at 10 ^ pipLocation (e.g. -4 pipLocation results in a decimal pip position of 10 ^ -4 &#x3D; 0.0001).</value>
        [DataMember(Name="pipLocation", EmitDefaultValue=false)]
        public int PipLocation { get; set; }

        /// <summary>
        /// The number of decimal places that should be used to display prices for this instrument. (e.g. a displayPrecision of 5 would result in a price of \&quot;1\&quot; being displayed as \&quot;1.00000\&quot;)
        /// </summary>
        /// <value>The number of decimal places that should be used to display prices for this instrument. (e.g. a displayPrecision of 5 would result in a price of \&quot;1\&quot; being displayed as \&quot;1.00000\&quot;)</value>
        [DataMember(Name="displayPrecision", EmitDefaultValue=false)]
        public int DisplayPrecision { get; set; }

        /// <summary>
        /// The amount of decimal places that may be provided when specifying the number of units traded for this instrument.
        /// </summary>
        /// <value>The amount of decimal places that may be provided when specifying the number of units traded for this instrument.</value>
        [DataMember(Name="tradeUnitsPrecision", EmitDefaultValue=false)]
        public int TradeUnitsPrecision { get; set; }

        /// <summary>
        /// The smallest number of units allowed to be traded for this instrument.
        /// </summary>
        /// <value>The smallest number of units allowed to be traded for this instrument.</value>
        [DataMember(Name="minimumTradeSize", EmitDefaultValue=false)]
        public double MinimumTradeSize { get; set; }

        /// <summary>
        /// The maximum trailing stop distance allowed for a trailing stop loss created for this instrument. Specified in price units.
        /// </summary>
        /// <value>The maximum trailing stop distance allowed for a trailing stop loss created for this instrument. Specified in price units.</value>
        [DataMember(Name="maximumTrailingStopDistance", EmitDefaultValue=false)]
        public double MaximumTrailingStopDistance { get; set; }

        /// <summary>
        /// The minimum trailing stop distance allowed for a trailing stop loss created for this instrument. Specified in price units.
        /// </summary>
        /// <value>The minimum trailing stop distance allowed for a trailing stop loss created for this instrument. Specified in price units.</value>
        [DataMember(Name="minimumTrailingStopDistance", EmitDefaultValue=false)]
        public double MinimumTrailingStopDistance { get; set; }

        /// <summary>
        /// The maximum position size allowed for this instrument. Specified in units.
        /// </summary>
        /// <value>The maximum position size allowed for this instrument. Specified in units.</value>
        [DataMember(Name="maximumPositionSize", EmitDefaultValue=false)]
        public double MaximumPositionSize { get; set; }

        /// <summary>
        /// The maximum units allowed for an Order placed for this instrument. Specified in units.
        /// </summary>
        /// <value>The maximum units allowed for an Order placed for this instrument. Specified in units.</value>
        [DataMember(Name="maximumOrderUnits", EmitDefaultValue=false)]
        public double MaximumOrderUnits { get; set; }

        /// <summary>
        /// The margin rate for this instrument.
        /// </summary>
        /// <value>The margin rate for this instrument.</value>
        [DataMember(Name="marginRate", EmitDefaultValue=false)]
        public double MarginRate { get; set; }

        /// <summary>
        /// Gets or Sets Commission
        /// </summary>
        [DataMember(Name="commission", EmitDefaultValue=false)]
        public InstrumentComission Commission { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Instrument {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  PipLocation: ").Append(PipLocation).Append("\n");
            sb.Append("  DisplayPrecision: ").Append(DisplayPrecision).Append("\n");
            sb.Append("  TradeUnitsPrecision: ").Append(TradeUnitsPrecision).Append("\n");
            sb.Append("  MinimumTradeSize: ").Append(MinimumTradeSize).Append("\n");
            sb.Append("  MaximumTrailingStopDistance: ").Append(MaximumTrailingStopDistance).Append("\n");
            sb.Append("  MinimumTrailingStopDistance: ").Append(MinimumTrailingStopDistance).Append("\n");
            sb.Append("  MaximumPositionSize: ").Append(MaximumPositionSize).Append("\n");
            sb.Append("  MaximumOrderUnits: ").Append(MaximumOrderUnits).Append("\n");
            sb.Append("  MarginRate: ").Append(MarginRate).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Instrument);
        }

        /// <summary>
        /// Returns true if Instrument instances are equal
        /// </summary>
        /// <param name="input">Instance of Instrument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Instrument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    this.Name.Equals(input.Name)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.PipLocation == input.PipLocation ||
                    this.PipLocation.Equals(input.PipLocation)
                ) && 
                (
                    this.DisplayPrecision == input.DisplayPrecision ||
                    this.DisplayPrecision.Equals(input.DisplayPrecision)
                ) && 
                (
                    this.TradeUnitsPrecision == input.TradeUnitsPrecision ||
                    this.TradeUnitsPrecision.Equals(input.TradeUnitsPrecision)
                ) && 
                (
                    this.MinimumTradeSize == input.MinimumTradeSize ||
                    this.MinimumTradeSize.Equals(input.MinimumTradeSize)
                ) && 
                (
                    this.MaximumTrailingStopDistance == input.MaximumTrailingStopDistance ||
                    this.MaximumTrailingStopDistance.Equals(input.MaximumTrailingStopDistance)
                ) && 
                (
                    this.MinimumTrailingStopDistance == input.MinimumTrailingStopDistance ||
                    this.MinimumTrailingStopDistance.Equals(input.MinimumTrailingStopDistance)
                ) && 
                (
                    this.MaximumPositionSize == input.MaximumPositionSize ||
                    this.MaximumPositionSize.Equals(input.MaximumPositionSize)
                ) && 
                (
                    this.MaximumOrderUnits == input.MaximumOrderUnits ||
                    this.MaximumOrderUnits.Equals(input.MaximumOrderUnits)
                ) && 
                (
                    this.MarginRate == input.MarginRate ||
                    this.MarginRate.Equals(input.MarginRate)
                ) && 
                (
                    this.Commission == input.Commission ||
                    (this.Commission != null &&
                    this.Commission.Equals(input.Commission))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.PipLocation.GetHashCode();
                hashCode = hashCode * 59 + this.DisplayPrecision.GetHashCode();
                hashCode = hashCode * 59 + this.TradeUnitsPrecision.GetHashCode();
                hashCode = hashCode * 59 + this.MinimumTradeSize.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumTrailingStopDistance.GetHashCode();
                hashCode = hashCode * 59 + this.MinimumTrailingStopDistance.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumPositionSize.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumOrderUnits.GetHashCode();
                hashCode = hashCode * 59 + this.MarginRate.GetHashCode();
                if (this.Commission != null)
                    hashCode = hashCode * 59 + this.Commission.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

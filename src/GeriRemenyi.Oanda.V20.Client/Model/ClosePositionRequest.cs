/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Client.Model
{
    /// <summary>
    /// ClosePositionRequest
    /// </summary>
    [DataContract]
    public partial class ClosePositionRequest :  IEquatable<ClosePositionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClosePositionRequest" /> class.
        /// </summary>
        /// <param name="longUnits">Either \&quot;ALL\&quot;, \&quot;NONE\&quot;, or a DecimalNumber reflection a partial unit.</param>
        /// <param name="longClientExtensions">longClientExtensions.</param>
        /// <param name="shortUnits">Either \&quot;ALL\&quot;, \&quot;NONE\&quot;, or a DecimalNumber reflection a partial unit.</param>
        /// <param name="shortClientExtensions">shortClientExtensions.</param>
        public ClosePositionRequest(string longUnits = default(string), ClientExtensions longClientExtensions = default(ClientExtensions), string shortUnits = default(string), ClientExtensions shortClientExtensions = default(ClientExtensions))
        {
            this.LongUnits = longUnits;
            this.LongClientExtensions = longClientExtensions;
            this.ShortUnits = shortUnits;
            this.ShortClientExtensions = shortClientExtensions;
        }
        
        /// <summary>
        /// Either \&quot;ALL\&quot;, \&quot;NONE\&quot;, or a DecimalNumber reflection a partial unit
        /// </summary>
        /// <value>Either \&quot;ALL\&quot;, \&quot;NONE\&quot;, or a DecimalNumber reflection a partial unit</value>
        [DataMember(Name="longUnits", EmitDefaultValue=false)]
        public string LongUnits { get; set; }

        /// <summary>
        /// Gets or Sets LongClientExtensions
        /// </summary>
        [DataMember(Name="longClientExtensions", EmitDefaultValue=false)]
        public ClientExtensions LongClientExtensions { get; set; }

        /// <summary>
        /// Either \&quot;ALL\&quot;, \&quot;NONE\&quot;, or a DecimalNumber reflection a partial unit
        /// </summary>
        /// <value>Either \&quot;ALL\&quot;, \&quot;NONE\&quot;, or a DecimalNumber reflection a partial unit</value>
        [DataMember(Name="shortUnits", EmitDefaultValue=false)]
        public string ShortUnits { get; set; }

        /// <summary>
        /// Gets or Sets ShortClientExtensions
        /// </summary>
        [DataMember(Name="shortClientExtensions", EmitDefaultValue=false)]
        public ClientExtensions ShortClientExtensions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClosePositionRequest {\n");
            sb.Append("  LongUnits: ").Append(LongUnits).Append("\n");
            sb.Append("  LongClientExtensions: ").Append(LongClientExtensions).Append("\n");
            sb.Append("  ShortUnits: ").Append(ShortUnits).Append("\n");
            sb.Append("  ShortClientExtensions: ").Append(ShortClientExtensions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClosePositionRequest);
        }

        /// <summary>
        /// Returns true if ClosePositionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ClosePositionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClosePositionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LongUnits == input.LongUnits ||
                    (this.LongUnits != null &&
                    this.LongUnits.Equals(input.LongUnits))
                ) && 
                (
                    this.LongClientExtensions == input.LongClientExtensions ||
                    (this.LongClientExtensions != null &&
                    this.LongClientExtensions.Equals(input.LongClientExtensions))
                ) && 
                (
                    this.ShortUnits == input.ShortUnits ||
                    (this.ShortUnits != null &&
                    this.ShortUnits.Equals(input.ShortUnits))
                ) && 
                (
                    this.ShortClientExtensions == input.ShortClientExtensions ||
                    (this.ShortClientExtensions != null &&
                    this.ShortClientExtensions.Equals(input.ShortClientExtensions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LongUnits != null)
                    hashCode = hashCode * 59 + this.LongUnits.GetHashCode();
                if (this.LongClientExtensions != null)
                    hashCode = hashCode * 59 + this.LongClientExtensions.GetHashCode();
                if (this.ShortUnits != null)
                    hashCode = hashCode * 59 + this.ShortUnits.GetHashCode();
                if (this.ShortClientExtensions != null)
                    hashCode = hashCode * 59 + this.ShortClientExtensions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LongUnits (string) pattern
            Regex regexLongUnits = new Regex(@"^(?:(?:ALL)|(?:NONE)|(?:\\d+(?:\\.\\d+)?))$", RegexOptions.CultureInvariant);
            if (false == regexLongUnits.Match(this.LongUnits).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LongUnits, must match a pattern of " + regexLongUnits, new [] { "LongUnits" });
            }

            // ShortUnits (string) pattern
            Regex regexShortUnits = new Regex(@"^(?:(?:ALL)|(?:NONE)|(?:\\d+(?:\\.\\d+)?))$", RegexOptions.CultureInvariant);
            if (false == regexShortUnits.Match(this.ShortUnits).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShortUnits, must match a pattern of " + regexShortUnits, new [] { "ShortUnits" });
            }

            yield break;
        }
    }

}

/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Client.Model
{
    /// <summary>
    /// TrailingStopLossOrderAllOf
    /// </summary>
    [DataContract]
    public partial class TrailingStopLossOrderAllOf :  IEquatable<TrailingStopLossOrderAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrailingStopLossOrderAllOf" /> class.
        /// </summary>
        /// <param name="distance">The price distance (in price units) specified for the TrailingStopLoss Order..</param>
        /// <param name="trailingStopValue">The trigger price for the Trailing Stop Loss Order. The trailing stop value will trail (follow) the market price by the TSL order&#39;s configured \&quot;distance\&quot; as the market price moves in the winning direction. If the market price moves to a level that is equal to or worse than the trailing stop value, the order will be filled and the Trade will be closed..</param>
        public TrailingStopLossOrderAllOf(double distance = default(double), double trailingStopValue = default(double))
        {
            this.Distance = distance;
            this.TrailingStopValue = trailingStopValue;
        }
        
        /// <summary>
        /// The price distance (in price units) specified for the TrailingStopLoss Order.
        /// </summary>
        /// <value>The price distance (in price units) specified for the TrailingStopLoss Order.</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public double Distance { get; set; }

        /// <summary>
        /// The trigger price for the Trailing Stop Loss Order. The trailing stop value will trail (follow) the market price by the TSL order&#39;s configured \&quot;distance\&quot; as the market price moves in the winning direction. If the market price moves to a level that is equal to or worse than the trailing stop value, the order will be filled and the Trade will be closed.
        /// </summary>
        /// <value>The trigger price for the Trailing Stop Loss Order. The trailing stop value will trail (follow) the market price by the TSL order&#39;s configured \&quot;distance\&quot; as the market price moves in the winning direction. If the market price moves to a level that is equal to or worse than the trailing stop value, the order will be filled and the Trade will be closed.</value>
        [DataMember(Name="trailingStopValue", EmitDefaultValue=false)]
        public double TrailingStopValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrailingStopLossOrderAllOf {\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  TrailingStopValue: ").Append(TrailingStopValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrailingStopLossOrderAllOf);
        }

        /// <summary>
        /// Returns true if TrailingStopLossOrderAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of TrailingStopLossOrderAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrailingStopLossOrderAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Distance == input.Distance ||
                    this.Distance.Equals(input.Distance)
                ) && 
                (
                    this.TrailingStopValue == input.TrailingStopValue ||
                    this.TrailingStopValue.Equals(input.TrailingStopValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Distance.GetHashCode();
                hashCode = hashCode * 59 + this.TrailingStopValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

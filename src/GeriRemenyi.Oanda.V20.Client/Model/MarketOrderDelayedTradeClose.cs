/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Client.Model
{
    /// <summary>
    /// Details for the Market Order extensions specific to a Market Order placed with the intent of fully closing a specific open trade that should have already been closed but wasn&#39;t due to halted market conditions
    /// </summary>
    [DataContract]
    public partial class MarketOrderDelayedTradeClose :  IEquatable<MarketOrderDelayedTradeClose>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketOrderDelayedTradeClose" /> class.
        /// </summary>
        /// <param name="tradeID">The ID of the Trade being closed.</param>
        /// <param name="clientTradeID">The Client ID of the Trade being closed.</param>
        /// <param name="sourceTransactionID">The Transaction ID of the DelayedTradeClosure transaction to which this Delayed Trade Close belongs to.</param>
        public MarketOrderDelayedTradeClose(int tradeID = default(int), string clientTradeID = default(string), int sourceTransactionID = default(int))
        {
            this.TradeID = tradeID;
            this.ClientTradeID = clientTradeID;
            this.SourceTransactionID = sourceTransactionID;
        }
        
        /// <summary>
        /// The ID of the Trade being closed
        /// </summary>
        /// <value>The ID of the Trade being closed</value>
        [DataMember(Name="tradeID", EmitDefaultValue=false)]
        public int TradeID { get; set; }

        /// <summary>
        /// The Client ID of the Trade being closed
        /// </summary>
        /// <value>The Client ID of the Trade being closed</value>
        [DataMember(Name="clientTradeID", EmitDefaultValue=false)]
        public string ClientTradeID { get; set; }

        /// <summary>
        /// The Transaction ID of the DelayedTradeClosure transaction to which this Delayed Trade Close belongs to
        /// </summary>
        /// <value>The Transaction ID of the DelayedTradeClosure transaction to which this Delayed Trade Close belongs to</value>
        [DataMember(Name="sourceTransactionID", EmitDefaultValue=false)]
        public int SourceTransactionID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarketOrderDelayedTradeClose {\n");
            sb.Append("  TradeID: ").Append(TradeID).Append("\n");
            sb.Append("  ClientTradeID: ").Append(ClientTradeID).Append("\n");
            sb.Append("  SourceTransactionID: ").Append(SourceTransactionID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketOrderDelayedTradeClose);
        }

        /// <summary>
        /// Returns true if MarketOrderDelayedTradeClose instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketOrderDelayedTradeClose to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketOrderDelayedTradeClose input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TradeID == input.TradeID ||
                    this.TradeID.Equals(input.TradeID)
                ) && 
                (
                    this.ClientTradeID == input.ClientTradeID ||
                    (this.ClientTradeID != null &&
                    this.ClientTradeID.Equals(input.ClientTradeID))
                ) && 
                (
                    this.SourceTransactionID == input.SourceTransactionID ||
                    this.SourceTransactionID.Equals(input.SourceTransactionID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.TradeID.GetHashCode();
                if (this.ClientTradeID != null)
                    hashCode = hashCode * 59 + this.ClientTradeID.GetHashCode();
                hashCode = hashCode * 59 + this.SourceTransactionID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

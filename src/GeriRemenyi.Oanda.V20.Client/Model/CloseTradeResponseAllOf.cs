/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Client.Model
{
    /// <summary>
    /// CloseTradeResponseAllOf
    /// </summary>
    [DataContract]
    public partial class CloseTradeResponseAllOf :  IEquatable<CloseTradeResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CloseTradeResponseAllOf" /> class.
        /// </summary>
        /// <param name="orderCreateTransaction">orderCreateTransaction.</param>
        /// <param name="orderFillTransaction">orderFillTransaction.</param>
        /// <param name="orderCancelTransaction">orderCancelTransaction.</param>
        public CloseTradeResponseAllOf(MarketOrderTransaction orderCreateTransaction = default(MarketOrderTransaction), OrderFillTransaction orderFillTransaction = default(OrderFillTransaction), OrderCancelTransaction orderCancelTransaction = default(OrderCancelTransaction))
        {
            this.OrderCreateTransaction = orderCreateTransaction;
            this.OrderFillTransaction = orderFillTransaction;
            this.OrderCancelTransaction = orderCancelTransaction;
        }
        
        /// <summary>
        /// Gets or Sets OrderCreateTransaction
        /// </summary>
        [DataMember(Name="orderCreateTransaction", EmitDefaultValue=false)]
        public MarketOrderTransaction OrderCreateTransaction { get; set; }

        /// <summary>
        /// Gets or Sets OrderFillTransaction
        /// </summary>
        [DataMember(Name="orderFillTransaction", EmitDefaultValue=false)]
        public OrderFillTransaction OrderFillTransaction { get; set; }

        /// <summary>
        /// Gets or Sets OrderCancelTransaction
        /// </summary>
        [DataMember(Name="orderCancelTransaction", EmitDefaultValue=false)]
        public OrderCancelTransaction OrderCancelTransaction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CloseTradeResponseAllOf {\n");
            sb.Append("  OrderCreateTransaction: ").Append(OrderCreateTransaction).Append("\n");
            sb.Append("  OrderFillTransaction: ").Append(OrderFillTransaction).Append("\n");
            sb.Append("  OrderCancelTransaction: ").Append(OrderCancelTransaction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CloseTradeResponseAllOf);
        }

        /// <summary>
        /// Returns true if CloseTradeResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of CloseTradeResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CloseTradeResponseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderCreateTransaction == input.OrderCreateTransaction ||
                    (this.OrderCreateTransaction != null &&
                    this.OrderCreateTransaction.Equals(input.OrderCreateTransaction))
                ) && 
                (
                    this.OrderFillTransaction == input.OrderFillTransaction ||
                    (this.OrderFillTransaction != null &&
                    this.OrderFillTransaction.Equals(input.OrderFillTransaction))
                ) && 
                (
                    this.OrderCancelTransaction == input.OrderCancelTransaction ||
                    (this.OrderCancelTransaction != null &&
                    this.OrderCancelTransaction.Equals(input.OrderCancelTransaction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderCreateTransaction != null)
                    hashCode = hashCode * 59 + this.OrderCreateTransaction.GetHashCode();
                if (this.OrderFillTransaction != null)
                    hashCode = hashCode * 59 + this.OrderFillTransaction.GetHashCode();
                if (this.OrderCancelTransaction != null)
                    hashCode = hashCode * 59 + this.OrderCancelTransaction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

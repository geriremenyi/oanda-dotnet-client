/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Client.Model
{
    /// <summary>
    /// The dynamic (calculated) state of a Position
    /// </summary>
    [DataContract]
    public partial class CalculatedPositionState :  IEquatable<CalculatedPositionState>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name="instrument", EmitDefaultValue=false)]
        public InstrumentName? Instrument { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculatedPositionState" /> class.
        /// </summary>
        /// <param name="instrument">instrument.</param>
        /// <param name="netUnrealizedPL">The Position&#39;s net unrealized profit/loss.</param>
        /// <param name="longUnrealizedPL">The unrealized profit/loss of the Position&#39;s long open Trades.</param>
        /// <param name="shortUnrealizedPL">The unrealized profit/loss of the Position&#39;s short open Trades.</param>
        /// <param name="marginUsed">Margin currently used by the Position..</param>
        public CalculatedPositionState(InstrumentName? instrument = default(InstrumentName?), double netUnrealizedPL = default(double), double longUnrealizedPL = default(double), double shortUnrealizedPL = default(double), double marginUsed = default(double))
        {
            this.Instrument = instrument;
            this.NetUnrealizedPL = netUnrealizedPL;
            this.LongUnrealizedPL = longUnrealizedPL;
            this.ShortUnrealizedPL = shortUnrealizedPL;
            this.MarginUsed = marginUsed;
        }
        
        /// <summary>
        /// The Position&#39;s net unrealized profit/loss
        /// </summary>
        /// <value>The Position&#39;s net unrealized profit/loss</value>
        [DataMember(Name="netUnrealizedPL", EmitDefaultValue=false)]
        public double NetUnrealizedPL { get; set; }

        /// <summary>
        /// The unrealized profit/loss of the Position&#39;s long open Trades
        /// </summary>
        /// <value>The unrealized profit/loss of the Position&#39;s long open Trades</value>
        [DataMember(Name="longUnrealizedPL", EmitDefaultValue=false)]
        public double LongUnrealizedPL { get; set; }

        /// <summary>
        /// The unrealized profit/loss of the Position&#39;s short open Trades
        /// </summary>
        /// <value>The unrealized profit/loss of the Position&#39;s short open Trades</value>
        [DataMember(Name="shortUnrealizedPL", EmitDefaultValue=false)]
        public double ShortUnrealizedPL { get; set; }

        /// <summary>
        /// Margin currently used by the Position.
        /// </summary>
        /// <value>Margin currently used by the Position.</value>
        [DataMember(Name="marginUsed", EmitDefaultValue=false)]
        public double MarginUsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CalculatedPositionState {\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  NetUnrealizedPL: ").Append(NetUnrealizedPL).Append("\n");
            sb.Append("  LongUnrealizedPL: ").Append(LongUnrealizedPL).Append("\n");
            sb.Append("  ShortUnrealizedPL: ").Append(ShortUnrealizedPL).Append("\n");
            sb.Append("  MarginUsed: ").Append(MarginUsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CalculatedPositionState);
        }

        /// <summary>
        /// Returns true if CalculatedPositionState instances are equal
        /// </summary>
        /// <param name="input">Instance of CalculatedPositionState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalculatedPositionState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Instrument == input.Instrument ||
                    this.Instrument.Equals(input.Instrument)
                ) && 
                (
                    this.NetUnrealizedPL == input.NetUnrealizedPL ||
                    this.NetUnrealizedPL.Equals(input.NetUnrealizedPL)
                ) && 
                (
                    this.LongUnrealizedPL == input.LongUnrealizedPL ||
                    this.LongUnrealizedPL.Equals(input.LongUnrealizedPL)
                ) && 
                (
                    this.ShortUnrealizedPL == input.ShortUnrealizedPL ||
                    this.ShortUnrealizedPL.Equals(input.ShortUnrealizedPL)
                ) && 
                (
                    this.MarginUsed == input.MarginUsed ||
                    this.MarginUsed.Equals(input.MarginUsed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Instrument.GetHashCode();
                hashCode = hashCode * 59 + this.NetUnrealizedPL.GetHashCode();
                hashCode = hashCode * 59 + this.LongUnrealizedPL.GetHashCode();
                hashCode = hashCode * 59 + this.ShortUnrealizedPL.GetHashCode();
                hashCode = hashCode * 59 + this.MarginUsed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

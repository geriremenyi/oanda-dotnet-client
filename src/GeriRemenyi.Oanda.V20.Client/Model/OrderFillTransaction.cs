/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Client.Model
{
    /// <summary>
    /// An OrderFillTransaction represents the filling of an Order in the client&#39;s Account.
    /// </summary>
    [DataContract]
    public partial class OrderFillTransaction :  IEquatable<OrderFillTransaction>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name="instrument", EmitDefaultValue=false)]
        public InstrumentName? Instrument { get; set; }
        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public OrderFillReason? Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderFillTransaction" /> class.
        /// </summary>
        /// <param name="orderID">The ID of the Order filled..</param>
        /// <param name="clientOrderID">The client Order ID of the Order filled (only provided if the client has assigned one)..</param>
        /// <param name="instrument">instrument.</param>
        /// <param name="units">The number of units filled by the OrderFill..</param>
        /// <param name="gainQuoteHomeConversionFactor">This is the conversion factor in effect for the Account at the time of the OrderFill for converting any gains realized in Instrument quote units into units of the Account&#39;s home currency..</param>
        /// <param name="lossQuoteHomeConversionFactor">This is the conversion factor in effect for the Account at the time of the OrderFill for converting any losses realized in Instrument quote units into units of the Account&#39;s home currency..</param>
        /// <param name="price">This field is now deprecated and should no longer be used. The individual tradesClosed, tradeReduced and tradeOpened fields contain the exact/official price each unit was filled at..</param>
        /// <param name="fullVWAP">The price that all of the units of the OrderFill should have been filled at, in the absence of guaranteed price execution. This factors in the Account&#39;s current ClientPrice, used liquidity and the units of the OrderFill only. If no Trades were closed with their price clamped for guaranteed stop loss enforcement, then this value will match the price fields of each Trade opened, closed, and reduced, and they will all be the exact same..</param>
        /// <param name="fullPrice">fullPrice.</param>
        /// <param name="reason">reason.</param>
        /// <param name="pl">The profit or loss incurred when the Order was filled..</param>
        /// <param name="financing">The financing paid or collected when the Order was filled.</param>
        /// <param name="commission">The commission charged in the Account&#39;s home currency as a result of filling the Order. The commission is always represented as a positive quantity of the Account&#39;s home currency, however it reduces the balance in the Account..</param>
        /// <param name="guaranteedExecutionFee">The total guaranteed execution fees charged for all Trades opened, closed or reduced with guaranteed Stop Loss Orders..</param>
        /// <param name="accountBalance">The Account&#39;s balance after the Order was filled..</param>
        /// <param name="tradeOpened">tradeOpened.</param>
        /// <param name="tradesClosed">The Trades that were closed when the Order was filled (only provided if filling the Order resulted in a closing open Trades)..</param>
        /// <param name="tradeReduced">tradeReduced.</param>
        /// <param name="halfSpreadCost">The half spread cost for the OrderFill, which is the sum of the halfSpreadCost values in the tradeOpened, tradesClosed and tradeReduced fields. This can be a positive or negative value and is represented in the home currency of the Account..</param>
        public OrderFillTransaction(int orderID = default(int), string clientOrderID = default(string), InstrumentName? instrument = default(InstrumentName?), double units = default(double), double gainQuoteHomeConversionFactor = default(double), double lossQuoteHomeConversionFactor = default(double), double price = default(double), double fullVWAP = default(double), ClientPrice fullPrice = default(ClientPrice), OrderFillReason? reason = default(OrderFillReason?), double pl = default(double), double financing = default(double), double commission = default(double), double guaranteedExecutionFee = default(double), double accountBalance = default(double), TradeOpen tradeOpened = default(TradeOpen), List<TradeReduce> tradesClosed = default(List<TradeReduce>), TradeReduce tradeReduced = default(TradeReduce), double halfSpreadCost = default(double))
        {
            this.OrderID = orderID;
            this.ClientOrderID = clientOrderID;
            this.Instrument = instrument;
            this.Units = units;
            this.GainQuoteHomeConversionFactor = gainQuoteHomeConversionFactor;
            this.LossQuoteHomeConversionFactor = lossQuoteHomeConversionFactor;
            this.Price = price;
            this.FullVWAP = fullVWAP;
            this.FullPrice = fullPrice;
            this.Reason = reason;
            this.Pl = pl;
            this.Financing = financing;
            this.Commission = commission;
            this.GuaranteedExecutionFee = guaranteedExecutionFee;
            this.AccountBalance = accountBalance;
            this.TradeOpened = tradeOpened;
            this.TradesClosed = tradesClosed;
            this.TradeReduced = tradeReduced;
            this.HalfSpreadCost = halfSpreadCost;
        }
        
        /// <summary>
        /// The ID of the Order filled.
        /// </summary>
        /// <value>The ID of the Order filled.</value>
        [DataMember(Name="orderID", EmitDefaultValue=false)]
        public int OrderID { get; set; }

        /// <summary>
        /// The client Order ID of the Order filled (only provided if the client has assigned one).
        /// </summary>
        /// <value>The client Order ID of the Order filled (only provided if the client has assigned one).</value>
        [DataMember(Name="clientOrderID", EmitDefaultValue=false)]
        public string ClientOrderID { get; set; }

        /// <summary>
        /// The number of units filled by the OrderFill.
        /// </summary>
        /// <value>The number of units filled by the OrderFill.</value>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public double Units { get; set; }

        /// <summary>
        /// This is the conversion factor in effect for the Account at the time of the OrderFill for converting any gains realized in Instrument quote units into units of the Account&#39;s home currency.
        /// </summary>
        /// <value>This is the conversion factor in effect for the Account at the time of the OrderFill for converting any gains realized in Instrument quote units into units of the Account&#39;s home currency.</value>
        [DataMember(Name="gainQuoteHomeConversionFactor", EmitDefaultValue=false)]
        public double GainQuoteHomeConversionFactor { get; set; }

        /// <summary>
        /// This is the conversion factor in effect for the Account at the time of the OrderFill for converting any losses realized in Instrument quote units into units of the Account&#39;s home currency.
        /// </summary>
        /// <value>This is the conversion factor in effect for the Account at the time of the OrderFill for converting any losses realized in Instrument quote units into units of the Account&#39;s home currency.</value>
        [DataMember(Name="lossQuoteHomeConversionFactor", EmitDefaultValue=false)]
        public double LossQuoteHomeConversionFactor { get; set; }

        /// <summary>
        /// This field is now deprecated and should no longer be used. The individual tradesClosed, tradeReduced and tradeOpened fields contain the exact/official price each unit was filled at.
        /// </summary>
        /// <value>This field is now deprecated and should no longer be used. The individual tradesClosed, tradeReduced and tradeOpened fields contain the exact/official price each unit was filled at.</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double Price { get; set; }

        /// <summary>
        /// The price that all of the units of the OrderFill should have been filled at, in the absence of guaranteed price execution. This factors in the Account&#39;s current ClientPrice, used liquidity and the units of the OrderFill only. If no Trades were closed with their price clamped for guaranteed stop loss enforcement, then this value will match the price fields of each Trade opened, closed, and reduced, and they will all be the exact same.
        /// </summary>
        /// <value>The price that all of the units of the OrderFill should have been filled at, in the absence of guaranteed price execution. This factors in the Account&#39;s current ClientPrice, used liquidity and the units of the OrderFill only. If no Trades were closed with their price clamped for guaranteed stop loss enforcement, then this value will match the price fields of each Trade opened, closed, and reduced, and they will all be the exact same.</value>
        [DataMember(Name="fullVWAP", EmitDefaultValue=false)]
        public double FullVWAP { get; set; }

        /// <summary>
        /// Gets or Sets FullPrice
        /// </summary>
        [DataMember(Name="fullPrice", EmitDefaultValue=false)]
        public ClientPrice FullPrice { get; set; }

        /// <summary>
        /// The profit or loss incurred when the Order was filled.
        /// </summary>
        /// <value>The profit or loss incurred when the Order was filled.</value>
        [DataMember(Name="pl", EmitDefaultValue=false)]
        public double Pl { get; set; }

        /// <summary>
        /// The financing paid or collected when the Order was filled
        /// </summary>
        /// <value>The financing paid or collected when the Order was filled</value>
        [DataMember(Name="financing", EmitDefaultValue=false)]
        public double Financing { get; set; }

        /// <summary>
        /// The commission charged in the Account&#39;s home currency as a result of filling the Order. The commission is always represented as a positive quantity of the Account&#39;s home currency, however it reduces the balance in the Account.
        /// </summary>
        /// <value>The commission charged in the Account&#39;s home currency as a result of filling the Order. The commission is always represented as a positive quantity of the Account&#39;s home currency, however it reduces the balance in the Account.</value>
        [DataMember(Name="commission", EmitDefaultValue=false)]
        public double Commission { get; set; }

        /// <summary>
        /// The total guaranteed execution fees charged for all Trades opened, closed or reduced with guaranteed Stop Loss Orders.
        /// </summary>
        /// <value>The total guaranteed execution fees charged for all Trades opened, closed or reduced with guaranteed Stop Loss Orders.</value>
        [DataMember(Name="guaranteedExecutionFee", EmitDefaultValue=false)]
        public double GuaranteedExecutionFee { get; set; }

        /// <summary>
        /// The Account&#39;s balance after the Order was filled.
        /// </summary>
        /// <value>The Account&#39;s balance after the Order was filled.</value>
        [DataMember(Name="accountBalance", EmitDefaultValue=false)]
        public double AccountBalance { get; set; }

        /// <summary>
        /// Gets or Sets TradeOpened
        /// </summary>
        [DataMember(Name="tradeOpened", EmitDefaultValue=false)]
        public TradeOpen TradeOpened { get; set; }

        /// <summary>
        /// The Trades that were closed when the Order was filled (only provided if filling the Order resulted in a closing open Trades).
        /// </summary>
        /// <value>The Trades that were closed when the Order was filled (only provided if filling the Order resulted in a closing open Trades).</value>
        [DataMember(Name="tradesClosed", EmitDefaultValue=false)]
        public List<TradeReduce> TradesClosed { get; set; }

        /// <summary>
        /// Gets or Sets TradeReduced
        /// </summary>
        [DataMember(Name="tradeReduced", EmitDefaultValue=false)]
        public TradeReduce TradeReduced { get; set; }

        /// <summary>
        /// The half spread cost for the OrderFill, which is the sum of the halfSpreadCost values in the tradeOpened, tradesClosed and tradeReduced fields. This can be a positive or negative value and is represented in the home currency of the Account.
        /// </summary>
        /// <value>The half spread cost for the OrderFill, which is the sum of the halfSpreadCost values in the tradeOpened, tradesClosed and tradeReduced fields. This can be a positive or negative value and is represented in the home currency of the Account.</value>
        [DataMember(Name="halfSpreadCost", EmitDefaultValue=false)]
        public double HalfSpreadCost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderFillTransaction {\n");
            sb.Append("  OrderID: ").Append(OrderID).Append("\n");
            sb.Append("  ClientOrderID: ").Append(ClientOrderID).Append("\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  GainQuoteHomeConversionFactor: ").Append(GainQuoteHomeConversionFactor).Append("\n");
            sb.Append("  LossQuoteHomeConversionFactor: ").Append(LossQuoteHomeConversionFactor).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  FullVWAP: ").Append(FullVWAP).Append("\n");
            sb.Append("  FullPrice: ").Append(FullPrice).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Pl: ").Append(Pl).Append("\n");
            sb.Append("  Financing: ").Append(Financing).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  GuaranteedExecutionFee: ").Append(GuaranteedExecutionFee).Append("\n");
            sb.Append("  AccountBalance: ").Append(AccountBalance).Append("\n");
            sb.Append("  TradeOpened: ").Append(TradeOpened).Append("\n");
            sb.Append("  TradesClosed: ").Append(TradesClosed).Append("\n");
            sb.Append("  TradeReduced: ").Append(TradeReduced).Append("\n");
            sb.Append("  HalfSpreadCost: ").Append(HalfSpreadCost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderFillTransaction);
        }

        /// <summary>
        /// Returns true if OrderFillTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderFillTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderFillTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderID == input.OrderID ||
                    this.OrderID.Equals(input.OrderID)
                ) && 
                (
                    this.ClientOrderID == input.ClientOrderID ||
                    (this.ClientOrderID != null &&
                    this.ClientOrderID.Equals(input.ClientOrderID))
                ) && 
                (
                    this.Instrument == input.Instrument ||
                    this.Instrument.Equals(input.Instrument)
                ) && 
                (
                    this.Units == input.Units ||
                    this.Units.Equals(input.Units)
                ) && 
                (
                    this.GainQuoteHomeConversionFactor == input.GainQuoteHomeConversionFactor ||
                    this.GainQuoteHomeConversionFactor.Equals(input.GainQuoteHomeConversionFactor)
                ) && 
                (
                    this.LossQuoteHomeConversionFactor == input.LossQuoteHomeConversionFactor ||
                    this.LossQuoteHomeConversionFactor.Equals(input.LossQuoteHomeConversionFactor)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.FullVWAP == input.FullVWAP ||
                    this.FullVWAP.Equals(input.FullVWAP)
                ) && 
                (
                    this.FullPrice == input.FullPrice ||
                    (this.FullPrice != null &&
                    this.FullPrice.Equals(input.FullPrice))
                ) && 
                (
                    this.Reason == input.Reason ||
                    this.Reason.Equals(input.Reason)
                ) && 
                (
                    this.Pl == input.Pl ||
                    this.Pl.Equals(input.Pl)
                ) && 
                (
                    this.Financing == input.Financing ||
                    this.Financing.Equals(input.Financing)
                ) && 
                (
                    this.Commission == input.Commission ||
                    this.Commission.Equals(input.Commission)
                ) && 
                (
                    this.GuaranteedExecutionFee == input.GuaranteedExecutionFee ||
                    this.GuaranteedExecutionFee.Equals(input.GuaranteedExecutionFee)
                ) && 
                (
                    this.AccountBalance == input.AccountBalance ||
                    this.AccountBalance.Equals(input.AccountBalance)
                ) && 
                (
                    this.TradeOpened == input.TradeOpened ||
                    (this.TradeOpened != null &&
                    this.TradeOpened.Equals(input.TradeOpened))
                ) && 
                (
                    this.TradesClosed == input.TradesClosed ||
                    this.TradesClosed != null &&
                    input.TradesClosed != null &&
                    this.TradesClosed.SequenceEqual(input.TradesClosed)
                ) && 
                (
                    this.TradeReduced == input.TradeReduced ||
                    (this.TradeReduced != null &&
                    this.TradeReduced.Equals(input.TradeReduced))
                ) && 
                (
                    this.HalfSpreadCost == input.HalfSpreadCost ||
                    this.HalfSpreadCost.Equals(input.HalfSpreadCost)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.OrderID.GetHashCode();
                if (this.ClientOrderID != null)
                    hashCode = hashCode * 59 + this.ClientOrderID.GetHashCode();
                hashCode = hashCode * 59 + this.Instrument.GetHashCode();
                hashCode = hashCode * 59 + this.Units.GetHashCode();
                hashCode = hashCode * 59 + this.GainQuoteHomeConversionFactor.GetHashCode();
                hashCode = hashCode * 59 + this.LossQuoteHomeConversionFactor.GetHashCode();
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                hashCode = hashCode * 59 + this.FullVWAP.GetHashCode();
                if (this.FullPrice != null)
                    hashCode = hashCode * 59 + this.FullPrice.GetHashCode();
                hashCode = hashCode * 59 + this.Reason.GetHashCode();
                hashCode = hashCode * 59 + this.Pl.GetHashCode();
                hashCode = hashCode * 59 + this.Financing.GetHashCode();
                hashCode = hashCode * 59 + this.Commission.GetHashCode();
                hashCode = hashCode * 59 + this.GuaranteedExecutionFee.GetHashCode();
                hashCode = hashCode * 59 + this.AccountBalance.GetHashCode();
                if (this.TradeOpened != null)
                    hashCode = hashCode * 59 + this.TradeOpened.GetHashCode();
                if (this.TradesClosed != null)
                    hashCode = hashCode * 59 + this.TradesClosed.GetHashCode();
                if (this.TradeReduced != null)
                    hashCode = hashCode * 59 + this.TradeReduced.GetHashCode();
                hashCode = hashCode * 59 + this.HalfSpreadCost.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

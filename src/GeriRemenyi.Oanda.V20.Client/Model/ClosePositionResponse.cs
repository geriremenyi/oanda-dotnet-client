/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Client.Model
{
    /// <summary>
    /// ClosePositionResponse
    /// </summary>
    [DataContract]
    public partial class ClosePositionResponse :  IEquatable<ClosePositionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClosePositionResponse" /> class.
        /// </summary>
        /// <param name="longOrderCreateTransaction">longOrderCreateTransaction.</param>
        /// <param name="longOrderFillTransaction">longOrderFillTransaction.</param>
        /// <param name="longOrderCancelTransaction">longOrderCancelTransaction.</param>
        /// <param name="shortOrderCreateTransaction">shortOrderCreateTransaction.</param>
        /// <param name="shortOrderFillTransaction">shortOrderFillTransaction.</param>
        /// <param name="shortOrderCancelTransaction">shortOrderCancelTransaction.</param>
        /// <param name="lastTransactionID">The ID of the most recent Transaction created for the Account.</param>
        /// <param name="relatedTransactionIDs">The IDs of all Transactions that were created while satisfying the request..</param>
        public ClosePositionResponse(MarketOrderTransaction longOrderCreateTransaction = default(MarketOrderTransaction), OrderFillTransaction longOrderFillTransaction = default(OrderFillTransaction), OrderCancelTransaction longOrderCancelTransaction = default(OrderCancelTransaction), MarketOrderTransaction shortOrderCreateTransaction = default(MarketOrderTransaction), OrderFillTransaction shortOrderFillTransaction = default(OrderFillTransaction), OrderCancelTransaction shortOrderCancelTransaction = default(OrderCancelTransaction), int lastTransactionID = default(int), List<int> relatedTransactionIDs = default(List<int>))
        {
            this.LongOrderCreateTransaction = longOrderCreateTransaction;
            this.LongOrderFillTransaction = longOrderFillTransaction;
            this.LongOrderCancelTransaction = longOrderCancelTransaction;
            this.ShortOrderCreateTransaction = shortOrderCreateTransaction;
            this.ShortOrderFillTransaction = shortOrderFillTransaction;
            this.ShortOrderCancelTransaction = shortOrderCancelTransaction;
            this.LastTransactionID = lastTransactionID;
            this.RelatedTransactionIDs = relatedTransactionIDs;
        }
        
        /// <summary>
        /// Gets or Sets LongOrderCreateTransaction
        /// </summary>
        [DataMember(Name="longOrderCreateTransaction", EmitDefaultValue=false)]
        public MarketOrderTransaction LongOrderCreateTransaction { get; set; }

        /// <summary>
        /// Gets or Sets LongOrderFillTransaction
        /// </summary>
        [DataMember(Name="longOrderFillTransaction", EmitDefaultValue=false)]
        public OrderFillTransaction LongOrderFillTransaction { get; set; }

        /// <summary>
        /// Gets or Sets LongOrderCancelTransaction
        /// </summary>
        [DataMember(Name="longOrderCancelTransaction", EmitDefaultValue=false)]
        public OrderCancelTransaction LongOrderCancelTransaction { get; set; }

        /// <summary>
        /// Gets or Sets ShortOrderCreateTransaction
        /// </summary>
        [DataMember(Name="shortOrderCreateTransaction", EmitDefaultValue=false)]
        public MarketOrderTransaction ShortOrderCreateTransaction { get; set; }

        /// <summary>
        /// Gets or Sets ShortOrderFillTransaction
        /// </summary>
        [DataMember(Name="shortOrderFillTransaction", EmitDefaultValue=false)]
        public OrderFillTransaction ShortOrderFillTransaction { get; set; }

        /// <summary>
        /// Gets or Sets ShortOrderCancelTransaction
        /// </summary>
        [DataMember(Name="shortOrderCancelTransaction", EmitDefaultValue=false)]
        public OrderCancelTransaction ShortOrderCancelTransaction { get; set; }

        /// <summary>
        /// The ID of the most recent Transaction created for the Account
        /// </summary>
        /// <value>The ID of the most recent Transaction created for the Account</value>
        [DataMember(Name="lastTransactionID", EmitDefaultValue=false)]
        public int LastTransactionID { get; set; }

        /// <summary>
        /// The IDs of all Transactions that were created while satisfying the request.
        /// </summary>
        /// <value>The IDs of all Transactions that were created while satisfying the request.</value>
        [DataMember(Name="relatedTransactionIDs", EmitDefaultValue=true)]
        public List<int> RelatedTransactionIDs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClosePositionResponse {\n");
            sb.Append("  LongOrderCreateTransaction: ").Append(LongOrderCreateTransaction).Append("\n");
            sb.Append("  LongOrderFillTransaction: ").Append(LongOrderFillTransaction).Append("\n");
            sb.Append("  LongOrderCancelTransaction: ").Append(LongOrderCancelTransaction).Append("\n");
            sb.Append("  ShortOrderCreateTransaction: ").Append(ShortOrderCreateTransaction).Append("\n");
            sb.Append("  ShortOrderFillTransaction: ").Append(ShortOrderFillTransaction).Append("\n");
            sb.Append("  ShortOrderCancelTransaction: ").Append(ShortOrderCancelTransaction).Append("\n");
            sb.Append("  LastTransactionID: ").Append(LastTransactionID).Append("\n");
            sb.Append("  RelatedTransactionIDs: ").Append(RelatedTransactionIDs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClosePositionResponse);
        }

        /// <summary>
        /// Returns true if ClosePositionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ClosePositionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClosePositionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LongOrderCreateTransaction == input.LongOrderCreateTransaction ||
                    (this.LongOrderCreateTransaction != null &&
                    this.LongOrderCreateTransaction.Equals(input.LongOrderCreateTransaction))
                ) && 
                (
                    this.LongOrderFillTransaction == input.LongOrderFillTransaction ||
                    (this.LongOrderFillTransaction != null &&
                    this.LongOrderFillTransaction.Equals(input.LongOrderFillTransaction))
                ) && 
                (
                    this.LongOrderCancelTransaction == input.LongOrderCancelTransaction ||
                    (this.LongOrderCancelTransaction != null &&
                    this.LongOrderCancelTransaction.Equals(input.LongOrderCancelTransaction))
                ) && 
                (
                    this.ShortOrderCreateTransaction == input.ShortOrderCreateTransaction ||
                    (this.ShortOrderCreateTransaction != null &&
                    this.ShortOrderCreateTransaction.Equals(input.ShortOrderCreateTransaction))
                ) && 
                (
                    this.ShortOrderFillTransaction == input.ShortOrderFillTransaction ||
                    (this.ShortOrderFillTransaction != null &&
                    this.ShortOrderFillTransaction.Equals(input.ShortOrderFillTransaction))
                ) && 
                (
                    this.ShortOrderCancelTransaction == input.ShortOrderCancelTransaction ||
                    (this.ShortOrderCancelTransaction != null &&
                    this.ShortOrderCancelTransaction.Equals(input.ShortOrderCancelTransaction))
                ) && 
                (
                    this.LastTransactionID == input.LastTransactionID ||
                    this.LastTransactionID.Equals(input.LastTransactionID)
                ) && 
                (
                    this.RelatedTransactionIDs == input.RelatedTransactionIDs ||
                    this.RelatedTransactionIDs != null &&
                    input.RelatedTransactionIDs != null &&
                    this.RelatedTransactionIDs.SequenceEqual(input.RelatedTransactionIDs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LongOrderCreateTransaction != null)
                    hashCode = hashCode * 59 + this.LongOrderCreateTransaction.GetHashCode();
                if (this.LongOrderFillTransaction != null)
                    hashCode = hashCode * 59 + this.LongOrderFillTransaction.GetHashCode();
                if (this.LongOrderCancelTransaction != null)
                    hashCode = hashCode * 59 + this.LongOrderCancelTransaction.GetHashCode();
                if (this.ShortOrderCreateTransaction != null)
                    hashCode = hashCode * 59 + this.ShortOrderCreateTransaction.GetHashCode();
                if (this.ShortOrderFillTransaction != null)
                    hashCode = hashCode * 59 + this.ShortOrderFillTransaction.GetHashCode();
                if (this.ShortOrderCancelTransaction != null)
                    hashCode = hashCode * 59 + this.ShortOrderCancelTransaction.GetHashCode();
                hashCode = hashCode * 59 + this.LastTransactionID.GetHashCode();
                if (this.RelatedTransactionIDs != null)
                    hashCode = hashCode * 59 + this.RelatedTransactionIDs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

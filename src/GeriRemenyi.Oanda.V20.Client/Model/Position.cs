/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Client.Model
{
    /// <summary>
    /// The specification of a Position within an Account.
    /// </summary>
    [DataContract]
    public partial class Position :  IEquatable<Position>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name="instrument", EmitDefaultValue=false)]
        public InstrumentName? Instrument { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Position" /> class.
        /// </summary>
        /// <param name="instrument">instrument.</param>
        /// <param name="pl">Profit/loss realized by the Position over the lifetime of the Account..</param>
        /// <param name="unrealizedPL">The unrealized profit/loss of all open Trades that contribute to this Position..</param>
        /// <param name="marginUsed">Margin currently used by the Position..</param>
        /// <param name="resettablePL">Profit/loss realized by the Position since the Account&#39;s resettablePL was last reset by the client..</param>
        /// <param name="financing">The total amount of financing paid/collected for this instrument over the lifetime of the Account..</param>
        /// <param name="commission">The total amount of commission paid for this instrument over the lifetime of the Account..</param>
        /// <param name="guaranteedExecutionFees">The total amount of fees charged over the lifetime of the Account for the execution of guaranteed Stop Loss Orders for this instrument..</param>
        /// <param name="_long">_long.</param>
        /// <param name="_short">_short.</param>
        public Position(InstrumentName? instrument = default(InstrumentName?), double pl = default(double), double unrealizedPL = default(double), double marginUsed = default(double), double resettablePL = default(double), double financing = default(double), double commission = default(double), double guaranteedExecutionFees = default(double), PositionSide _long = default(PositionSide), PositionSide _short = default(PositionSide))
        {
            this.Instrument = instrument;
            this.Pl = pl;
            this.UnrealizedPL = unrealizedPL;
            this.MarginUsed = marginUsed;
            this.ResettablePL = resettablePL;
            this.Financing = financing;
            this.Commission = commission;
            this.GuaranteedExecutionFees = guaranteedExecutionFees;
            this.Long = _long;
            this.Short = _short;
        }
        
        /// <summary>
        /// Profit/loss realized by the Position over the lifetime of the Account.
        /// </summary>
        /// <value>Profit/loss realized by the Position over the lifetime of the Account.</value>
        [DataMember(Name="pl", EmitDefaultValue=false)]
        public double Pl { get; set; }

        /// <summary>
        /// The unrealized profit/loss of all open Trades that contribute to this Position.
        /// </summary>
        /// <value>The unrealized profit/loss of all open Trades that contribute to this Position.</value>
        [DataMember(Name="unrealizedPL", EmitDefaultValue=false)]
        public double UnrealizedPL { get; set; }

        /// <summary>
        /// Margin currently used by the Position.
        /// </summary>
        /// <value>Margin currently used by the Position.</value>
        [DataMember(Name="marginUsed", EmitDefaultValue=false)]
        public double MarginUsed { get; set; }

        /// <summary>
        /// Profit/loss realized by the Position since the Account&#39;s resettablePL was last reset by the client.
        /// </summary>
        /// <value>Profit/loss realized by the Position since the Account&#39;s resettablePL was last reset by the client.</value>
        [DataMember(Name="resettablePL", EmitDefaultValue=false)]
        public double ResettablePL { get; set; }

        /// <summary>
        /// The total amount of financing paid/collected for this instrument over the lifetime of the Account.
        /// </summary>
        /// <value>The total amount of financing paid/collected for this instrument over the lifetime of the Account.</value>
        [DataMember(Name="financing", EmitDefaultValue=false)]
        public double Financing { get; set; }

        /// <summary>
        /// The total amount of commission paid for this instrument over the lifetime of the Account.
        /// </summary>
        /// <value>The total amount of commission paid for this instrument over the lifetime of the Account.</value>
        [DataMember(Name="commission", EmitDefaultValue=false)]
        public double Commission { get; set; }

        /// <summary>
        /// The total amount of fees charged over the lifetime of the Account for the execution of guaranteed Stop Loss Orders for this instrument.
        /// </summary>
        /// <value>The total amount of fees charged over the lifetime of the Account for the execution of guaranteed Stop Loss Orders for this instrument.</value>
        [DataMember(Name="guaranteedExecutionFees", EmitDefaultValue=false)]
        public double GuaranteedExecutionFees { get; set; }

        /// <summary>
        /// Gets or Sets Long
        /// </summary>
        [DataMember(Name="long", EmitDefaultValue=false)]
        public PositionSide Long { get; set; }

        /// <summary>
        /// Gets or Sets Short
        /// </summary>
        [DataMember(Name="short", EmitDefaultValue=false)]
        public PositionSide Short { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Position {\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  Pl: ").Append(Pl).Append("\n");
            sb.Append("  UnrealizedPL: ").Append(UnrealizedPL).Append("\n");
            sb.Append("  MarginUsed: ").Append(MarginUsed).Append("\n");
            sb.Append("  ResettablePL: ").Append(ResettablePL).Append("\n");
            sb.Append("  Financing: ").Append(Financing).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  GuaranteedExecutionFees: ").Append(GuaranteedExecutionFees).Append("\n");
            sb.Append("  Long: ").Append(Long).Append("\n");
            sb.Append("  Short: ").Append(Short).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Position);
        }

        /// <summary>
        /// Returns true if Position instances are equal
        /// </summary>
        /// <param name="input">Instance of Position to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Position input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Instrument == input.Instrument ||
                    this.Instrument.Equals(input.Instrument)
                ) && 
                (
                    this.Pl == input.Pl ||
                    this.Pl.Equals(input.Pl)
                ) && 
                (
                    this.UnrealizedPL == input.UnrealizedPL ||
                    this.UnrealizedPL.Equals(input.UnrealizedPL)
                ) && 
                (
                    this.MarginUsed == input.MarginUsed ||
                    this.MarginUsed.Equals(input.MarginUsed)
                ) && 
                (
                    this.ResettablePL == input.ResettablePL ||
                    this.ResettablePL.Equals(input.ResettablePL)
                ) && 
                (
                    this.Financing == input.Financing ||
                    this.Financing.Equals(input.Financing)
                ) && 
                (
                    this.Commission == input.Commission ||
                    this.Commission.Equals(input.Commission)
                ) && 
                (
                    this.GuaranteedExecutionFees == input.GuaranteedExecutionFees ||
                    this.GuaranteedExecutionFees.Equals(input.GuaranteedExecutionFees)
                ) && 
                (
                    this.Long == input.Long ||
                    (this.Long != null &&
                    this.Long.Equals(input.Long))
                ) && 
                (
                    this.Short == input.Short ||
                    (this.Short != null &&
                    this.Short.Equals(input.Short))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Instrument.GetHashCode();
                hashCode = hashCode * 59 + this.Pl.GetHashCode();
                hashCode = hashCode * 59 + this.UnrealizedPL.GetHashCode();
                hashCode = hashCode * 59 + this.MarginUsed.GetHashCode();
                hashCode = hashCode * 59 + this.ResettablePL.GetHashCode();
                hashCode = hashCode * 59 + this.Financing.GetHashCode();
                hashCode = hashCode * 59 + this.Commission.GetHashCode();
                hashCode = hashCode * 59 + this.GuaranteedExecutionFees.GetHashCode();
                if (this.Long != null)
                    hashCode = hashCode * 59 + this.Long.GetHashCode();
                if (this.Short != null)
                    hashCode = hashCode * 59 + this.Short.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

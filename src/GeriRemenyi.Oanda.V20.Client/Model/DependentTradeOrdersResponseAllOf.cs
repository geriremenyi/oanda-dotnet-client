/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Client.Model
{
    /// <summary>
    /// DependentTradeOrdersResponseAllOf
    /// </summary>
    [DataContract]
    public partial class DependentTradeOrdersResponseAllOf :  IEquatable<DependentTradeOrdersResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DependentTradeOrdersResponseAllOf" /> class.
        /// </summary>
        /// <param name="takeProfitOrderCancelTransaction">takeProfitOrderCancelTransaction.</param>
        /// <param name="takeProfitOrderTransaction">takeProfitOrderTransaction.</param>
        /// <param name="takeProfitOrderFillTransaction">takeProfitOrderFillTransaction.</param>
        /// <param name="takeProfitOrderCreatedCancelTransaction">takeProfitOrderCreatedCancelTransaction.</param>
        /// <param name="stopLossOrderCancelTransaction">stopLossOrderCancelTransaction.</param>
        /// <param name="stopLossOrderTransaction">stopLossOrderTransaction.</param>
        /// <param name="stopLossOrderFillTransaction">stopLossOrderFillTransaction.</param>
        /// <param name="stopLossOrderCreatedCancelTransaction">stopLossOrderCreatedCancelTransaction.</param>
        /// <param name="trailingStopLossOrderCancelTransaction">trailingStopLossOrderCancelTransaction.</param>
        /// <param name="trailingStopLossOrderTransaction">trailingStopLossOrderTransaction.</param>
        public DependentTradeOrdersResponseAllOf(OrderCancelTransaction takeProfitOrderCancelTransaction = default(OrderCancelTransaction), TakeProfitOrderTransaction takeProfitOrderTransaction = default(TakeProfitOrderTransaction), OrderFillTransaction takeProfitOrderFillTransaction = default(OrderFillTransaction), OrderCancelTransaction takeProfitOrderCreatedCancelTransaction = default(OrderCancelTransaction), OrderCancelTransaction stopLossOrderCancelTransaction = default(OrderCancelTransaction), StopLossOrderTransaction stopLossOrderTransaction = default(StopLossOrderTransaction), OrderFillTransaction stopLossOrderFillTransaction = default(OrderFillTransaction), OrderCancelTransaction stopLossOrderCreatedCancelTransaction = default(OrderCancelTransaction), OrderCancelTransaction trailingStopLossOrderCancelTransaction = default(OrderCancelTransaction), TrailingStopLossOrderTransaction trailingStopLossOrderTransaction = default(TrailingStopLossOrderTransaction))
        {
            this.TakeProfitOrderCancelTransaction = takeProfitOrderCancelTransaction;
            this.TakeProfitOrderTransaction = takeProfitOrderTransaction;
            this.TakeProfitOrderFillTransaction = takeProfitOrderFillTransaction;
            this.TakeProfitOrderCreatedCancelTransaction = takeProfitOrderCreatedCancelTransaction;
            this.StopLossOrderCancelTransaction = stopLossOrderCancelTransaction;
            this.StopLossOrderTransaction = stopLossOrderTransaction;
            this.StopLossOrderFillTransaction = stopLossOrderFillTransaction;
            this.StopLossOrderCreatedCancelTransaction = stopLossOrderCreatedCancelTransaction;
            this.TrailingStopLossOrderCancelTransaction = trailingStopLossOrderCancelTransaction;
            this.TrailingStopLossOrderTransaction = trailingStopLossOrderTransaction;
        }
        
        /// <summary>
        /// Gets or Sets TakeProfitOrderCancelTransaction
        /// </summary>
        [DataMember(Name="takeProfitOrderCancelTransaction", EmitDefaultValue=false)]
        public OrderCancelTransaction TakeProfitOrderCancelTransaction { get; set; }

        /// <summary>
        /// Gets or Sets TakeProfitOrderTransaction
        /// </summary>
        [DataMember(Name="takeProfitOrderTransaction", EmitDefaultValue=false)]
        public TakeProfitOrderTransaction TakeProfitOrderTransaction { get; set; }

        /// <summary>
        /// Gets or Sets TakeProfitOrderFillTransaction
        /// </summary>
        [DataMember(Name="takeProfitOrderFillTransaction", EmitDefaultValue=false)]
        public OrderFillTransaction TakeProfitOrderFillTransaction { get; set; }

        /// <summary>
        /// Gets or Sets TakeProfitOrderCreatedCancelTransaction
        /// </summary>
        [DataMember(Name="takeProfitOrderCreatedCancelTransaction", EmitDefaultValue=false)]
        public OrderCancelTransaction TakeProfitOrderCreatedCancelTransaction { get; set; }

        /// <summary>
        /// Gets or Sets StopLossOrderCancelTransaction
        /// </summary>
        [DataMember(Name="stopLossOrderCancelTransaction", EmitDefaultValue=false)]
        public OrderCancelTransaction StopLossOrderCancelTransaction { get; set; }

        /// <summary>
        /// Gets or Sets StopLossOrderTransaction
        /// </summary>
        [DataMember(Name="stopLossOrderTransaction", EmitDefaultValue=false)]
        public StopLossOrderTransaction StopLossOrderTransaction { get; set; }

        /// <summary>
        /// Gets or Sets StopLossOrderFillTransaction
        /// </summary>
        [DataMember(Name="stopLossOrderFillTransaction", EmitDefaultValue=false)]
        public OrderFillTransaction StopLossOrderFillTransaction { get; set; }

        /// <summary>
        /// Gets or Sets StopLossOrderCreatedCancelTransaction
        /// </summary>
        [DataMember(Name="stopLossOrderCreatedCancelTransaction", EmitDefaultValue=false)]
        public OrderCancelTransaction StopLossOrderCreatedCancelTransaction { get; set; }

        /// <summary>
        /// Gets or Sets TrailingStopLossOrderCancelTransaction
        /// </summary>
        [DataMember(Name="trailingStopLossOrderCancelTransaction", EmitDefaultValue=false)]
        public OrderCancelTransaction TrailingStopLossOrderCancelTransaction { get; set; }

        /// <summary>
        /// Gets or Sets TrailingStopLossOrderTransaction
        /// </summary>
        [DataMember(Name="trailingStopLossOrderTransaction", EmitDefaultValue=false)]
        public TrailingStopLossOrderTransaction TrailingStopLossOrderTransaction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DependentTradeOrdersResponseAllOf {\n");
            sb.Append("  TakeProfitOrderCancelTransaction: ").Append(TakeProfitOrderCancelTransaction).Append("\n");
            sb.Append("  TakeProfitOrderTransaction: ").Append(TakeProfitOrderTransaction).Append("\n");
            sb.Append("  TakeProfitOrderFillTransaction: ").Append(TakeProfitOrderFillTransaction).Append("\n");
            sb.Append("  TakeProfitOrderCreatedCancelTransaction: ").Append(TakeProfitOrderCreatedCancelTransaction).Append("\n");
            sb.Append("  StopLossOrderCancelTransaction: ").Append(StopLossOrderCancelTransaction).Append("\n");
            sb.Append("  StopLossOrderTransaction: ").Append(StopLossOrderTransaction).Append("\n");
            sb.Append("  StopLossOrderFillTransaction: ").Append(StopLossOrderFillTransaction).Append("\n");
            sb.Append("  StopLossOrderCreatedCancelTransaction: ").Append(StopLossOrderCreatedCancelTransaction).Append("\n");
            sb.Append("  TrailingStopLossOrderCancelTransaction: ").Append(TrailingStopLossOrderCancelTransaction).Append("\n");
            sb.Append("  TrailingStopLossOrderTransaction: ").Append(TrailingStopLossOrderTransaction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DependentTradeOrdersResponseAllOf);
        }

        /// <summary>
        /// Returns true if DependentTradeOrdersResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of DependentTradeOrdersResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DependentTradeOrdersResponseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TakeProfitOrderCancelTransaction == input.TakeProfitOrderCancelTransaction ||
                    (this.TakeProfitOrderCancelTransaction != null &&
                    this.TakeProfitOrderCancelTransaction.Equals(input.TakeProfitOrderCancelTransaction))
                ) && 
                (
                    this.TakeProfitOrderTransaction == input.TakeProfitOrderTransaction ||
                    (this.TakeProfitOrderTransaction != null &&
                    this.TakeProfitOrderTransaction.Equals(input.TakeProfitOrderTransaction))
                ) && 
                (
                    this.TakeProfitOrderFillTransaction == input.TakeProfitOrderFillTransaction ||
                    (this.TakeProfitOrderFillTransaction != null &&
                    this.TakeProfitOrderFillTransaction.Equals(input.TakeProfitOrderFillTransaction))
                ) && 
                (
                    this.TakeProfitOrderCreatedCancelTransaction == input.TakeProfitOrderCreatedCancelTransaction ||
                    (this.TakeProfitOrderCreatedCancelTransaction != null &&
                    this.TakeProfitOrderCreatedCancelTransaction.Equals(input.TakeProfitOrderCreatedCancelTransaction))
                ) && 
                (
                    this.StopLossOrderCancelTransaction == input.StopLossOrderCancelTransaction ||
                    (this.StopLossOrderCancelTransaction != null &&
                    this.StopLossOrderCancelTransaction.Equals(input.StopLossOrderCancelTransaction))
                ) && 
                (
                    this.StopLossOrderTransaction == input.StopLossOrderTransaction ||
                    (this.StopLossOrderTransaction != null &&
                    this.StopLossOrderTransaction.Equals(input.StopLossOrderTransaction))
                ) && 
                (
                    this.StopLossOrderFillTransaction == input.StopLossOrderFillTransaction ||
                    (this.StopLossOrderFillTransaction != null &&
                    this.StopLossOrderFillTransaction.Equals(input.StopLossOrderFillTransaction))
                ) && 
                (
                    this.StopLossOrderCreatedCancelTransaction == input.StopLossOrderCreatedCancelTransaction ||
                    (this.StopLossOrderCreatedCancelTransaction != null &&
                    this.StopLossOrderCreatedCancelTransaction.Equals(input.StopLossOrderCreatedCancelTransaction))
                ) && 
                (
                    this.TrailingStopLossOrderCancelTransaction == input.TrailingStopLossOrderCancelTransaction ||
                    (this.TrailingStopLossOrderCancelTransaction != null &&
                    this.TrailingStopLossOrderCancelTransaction.Equals(input.TrailingStopLossOrderCancelTransaction))
                ) && 
                (
                    this.TrailingStopLossOrderTransaction == input.TrailingStopLossOrderTransaction ||
                    (this.TrailingStopLossOrderTransaction != null &&
                    this.TrailingStopLossOrderTransaction.Equals(input.TrailingStopLossOrderTransaction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TakeProfitOrderCancelTransaction != null)
                    hashCode = hashCode * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();
                if (this.TakeProfitOrderTransaction != null)
                    hashCode = hashCode * 59 + this.TakeProfitOrderTransaction.GetHashCode();
                if (this.TakeProfitOrderFillTransaction != null)
                    hashCode = hashCode * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();
                if (this.TakeProfitOrderCreatedCancelTransaction != null)
                    hashCode = hashCode * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();
                if (this.StopLossOrderCancelTransaction != null)
                    hashCode = hashCode * 59 + this.StopLossOrderCancelTransaction.GetHashCode();
                if (this.StopLossOrderTransaction != null)
                    hashCode = hashCode * 59 + this.StopLossOrderTransaction.GetHashCode();
                if (this.StopLossOrderFillTransaction != null)
                    hashCode = hashCode * 59 + this.StopLossOrderFillTransaction.GetHashCode();
                if (this.StopLossOrderCreatedCancelTransaction != null)
                    hashCode = hashCode * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();
                if (this.TrailingStopLossOrderCancelTransaction != null)
                    hashCode = hashCode * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();
                if (this.TrailingStopLossOrderTransaction != null)
                    hashCode = hashCode * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

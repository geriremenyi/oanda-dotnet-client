/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Client.Model
{
    /// <summary>
    /// CreateOrderResponse
    /// </summary>
    [DataContract]
    public partial class CreateOrderResponse :  IEquatable<CreateOrderResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrderResponse" /> class.
        /// </summary>
        /// <param name="orderCreateTransaction">orderCreateTransaction.</param>
        /// <param name="orderFillTransaction">orderFillTransaction.</param>
        /// <param name="orderCancelTransaction">orderCancelTransaction.</param>
        /// <param name="orderReissueTransaction">orderReissueTransaction.</param>
        /// <param name="orderReissueRejectTransaction">orderReissueRejectTransaction.</param>
        /// <param name="errorCode">The code of the error that has occurred. This field may not be returned for some errors..</param>
        /// <param name="errorMessage">The human-readable description of the error that has occurred..</param>
        /// <param name="lastTransactionID">The ID of the most recent Transaction created for the Account.</param>
        /// <param name="relatedTransactionIDs">The IDs of all Transactions that were created while satisfying the request..</param>
        public CreateOrderResponse(Transaction orderCreateTransaction = default(Transaction), OrderFillTransaction orderFillTransaction = default(OrderFillTransaction), OrderCancelTransaction orderCancelTransaction = default(OrderCancelTransaction), Transaction orderReissueTransaction = default(Transaction), Transaction orderReissueRejectTransaction = default(Transaction), string errorCode = default(string), string errorMessage = default(string), int lastTransactionID = default(int), List<int> relatedTransactionIDs = default(List<int>))
        {
            this.OrderCreateTransaction = orderCreateTransaction;
            this.OrderFillTransaction = orderFillTransaction;
            this.OrderCancelTransaction = orderCancelTransaction;
            this.OrderReissueTransaction = orderReissueTransaction;
            this.OrderReissueRejectTransaction = orderReissueRejectTransaction;
            this.ErrorCode = errorCode;
            this.ErrorMessage = errorMessage;
            this.LastTransactionID = lastTransactionID;
            this.RelatedTransactionIDs = relatedTransactionIDs;
        }
        
        /// <summary>
        /// Gets or Sets OrderCreateTransaction
        /// </summary>
        [DataMember(Name="orderCreateTransaction", EmitDefaultValue=false)]
        public Transaction OrderCreateTransaction { get; set; }

        /// <summary>
        /// Gets or Sets OrderFillTransaction
        /// </summary>
        [DataMember(Name="orderFillTransaction", EmitDefaultValue=false)]
        public OrderFillTransaction OrderFillTransaction { get; set; }

        /// <summary>
        /// Gets or Sets OrderCancelTransaction
        /// </summary>
        [DataMember(Name="orderCancelTransaction", EmitDefaultValue=false)]
        public OrderCancelTransaction OrderCancelTransaction { get; set; }

        /// <summary>
        /// Gets or Sets OrderReissueTransaction
        /// </summary>
        [DataMember(Name="orderReissueTransaction", EmitDefaultValue=false)]
        public Transaction OrderReissueTransaction { get; set; }

        /// <summary>
        /// Gets or Sets OrderReissueRejectTransaction
        /// </summary>
        [DataMember(Name="orderReissueRejectTransaction", EmitDefaultValue=false)]
        public Transaction OrderReissueRejectTransaction { get; set; }

        /// <summary>
        /// The code of the error that has occurred. This field may not be returned for some errors.
        /// </summary>
        /// <value>The code of the error that has occurred. This field may not be returned for some errors.</value>
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// The human-readable description of the error that has occurred.
        /// </summary>
        /// <value>The human-readable description of the error that has occurred.</value>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// The ID of the most recent Transaction created for the Account
        /// </summary>
        /// <value>The ID of the most recent Transaction created for the Account</value>
        [DataMember(Name="lastTransactionID", EmitDefaultValue=false)]
        public int LastTransactionID { get; set; }

        /// <summary>
        /// The IDs of all Transactions that were created while satisfying the request.
        /// </summary>
        /// <value>The IDs of all Transactions that were created while satisfying the request.</value>
        [DataMember(Name="relatedTransactionIDs", EmitDefaultValue=true)]
        public List<int> RelatedTransactionIDs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateOrderResponse {\n");
            sb.Append("  OrderCreateTransaction: ").Append(OrderCreateTransaction).Append("\n");
            sb.Append("  OrderFillTransaction: ").Append(OrderFillTransaction).Append("\n");
            sb.Append("  OrderCancelTransaction: ").Append(OrderCancelTransaction).Append("\n");
            sb.Append("  OrderReissueTransaction: ").Append(OrderReissueTransaction).Append("\n");
            sb.Append("  OrderReissueRejectTransaction: ").Append(OrderReissueRejectTransaction).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  LastTransactionID: ").Append(LastTransactionID).Append("\n");
            sb.Append("  RelatedTransactionIDs: ").Append(RelatedTransactionIDs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateOrderResponse);
        }

        /// <summary>
        /// Returns true if CreateOrderResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateOrderResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrderResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderCreateTransaction == input.OrderCreateTransaction ||
                    (this.OrderCreateTransaction != null &&
                    this.OrderCreateTransaction.Equals(input.OrderCreateTransaction))
                ) && 
                (
                    this.OrderFillTransaction == input.OrderFillTransaction ||
                    (this.OrderFillTransaction != null &&
                    this.OrderFillTransaction.Equals(input.OrderFillTransaction))
                ) && 
                (
                    this.OrderCancelTransaction == input.OrderCancelTransaction ||
                    (this.OrderCancelTransaction != null &&
                    this.OrderCancelTransaction.Equals(input.OrderCancelTransaction))
                ) && 
                (
                    this.OrderReissueTransaction == input.OrderReissueTransaction ||
                    (this.OrderReissueTransaction != null &&
                    this.OrderReissueTransaction.Equals(input.OrderReissueTransaction))
                ) && 
                (
                    this.OrderReissueRejectTransaction == input.OrderReissueRejectTransaction ||
                    (this.OrderReissueRejectTransaction != null &&
                    this.OrderReissueRejectTransaction.Equals(input.OrderReissueRejectTransaction))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.LastTransactionID == input.LastTransactionID ||
                    this.LastTransactionID.Equals(input.LastTransactionID)
                ) && 
                (
                    this.RelatedTransactionIDs == input.RelatedTransactionIDs ||
                    this.RelatedTransactionIDs != null &&
                    input.RelatedTransactionIDs != null &&
                    this.RelatedTransactionIDs.SequenceEqual(input.RelatedTransactionIDs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderCreateTransaction != null)
                    hashCode = hashCode * 59 + this.OrderCreateTransaction.GetHashCode();
                if (this.OrderFillTransaction != null)
                    hashCode = hashCode * 59 + this.OrderFillTransaction.GetHashCode();
                if (this.OrderCancelTransaction != null)
                    hashCode = hashCode * 59 + this.OrderCancelTransaction.GetHashCode();
                if (this.OrderReissueTransaction != null)
                    hashCode = hashCode * 59 + this.OrderReissueTransaction.GetHashCode();
                if (this.OrderReissueRejectTransaction != null)
                    hashCode = hashCode * 59 + this.OrderReissueRejectTransaction.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                hashCode = hashCode * 59 + this.LastTransactionID.GetHashCode();
                if (this.RelatedTransactionIDs != null)
                    hashCode = hashCode * 59 + this.RelatedTransactionIDs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

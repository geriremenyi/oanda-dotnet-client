/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeriRemenyi.Oanda.V20.Client.Client.OpenAPIDateConverter;

namespace GeriRemenyi.Oanda.V20.Client.Model
{
    /// <summary>
    /// The specification of a Trade within an Account. This includes the full representation of the Trade&#39;s dependent Orders in addition to the IDs of those Orders.
    /// </summary>
    [DataContract]
    public partial class Trade :  IEquatable<Trade>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name="instrument", EmitDefaultValue=false)]
        public InstrumentName? Instrument { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public TradeState? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Trade" /> class.
        /// </summary>
        /// <param name="id">The Trade&#39;s identifier, unique within the Trade&#39;s Account..</param>
        /// <param name="instrument">instrument.</param>
        /// <param name="price">The execution price of the Trade..</param>
        /// <param name="openTime">A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places)..</param>
        /// <param name="state">state.</param>
        /// <param name="initialUnits">The initial size of the Trade. Negative values indicate a short Trade, and positive values indicate a long Trade..</param>
        /// <param name="initialMarginRequired">The margin required at the time the Trade was created. Note, this is the &#39;pure&#39; margin required, it is not the &#39;effective&#39; margin used that factors in the trade risk if a GSLO is attached to the trade..</param>
        /// <param name="currentUnits">The number of units currently open for the Trade. This value is reduced to 0.0 as the Trade is closed..</param>
        /// <param name="realizedPL">The total profit/loss realized on the closed portion of the Trade..</param>
        /// <param name="unrealizedPL">The unrealized profit/loss on the open portion of the Trade..</param>
        /// <param name="marginUsed">Margin currently used by the Trade..</param>
        /// <param name="averageClosePrice">The average closing price of the Trade. Only present if the Trade has been closed or reduced at least once..</param>
        /// <param name="closingTransactionIDs">The IDs of the Transactions that have closed portions of this Trade..</param>
        /// <param name="financing">The financing paid/collected for this Trade..</param>
        /// <param name="closeTime">A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places)..</param>
        /// <param name="clientExtensions">clientExtensions.</param>
        /// <param name="takeProfitOrder">takeProfitOrder.</param>
        /// <param name="stopLossOrder">stopLossOrder.</param>
        /// <param name="trailingStopLossOrder">trailingStopLossOrder.</param>
        public Trade(int id = default(int), InstrumentName? instrument = default(InstrumentName?), double price = default(double), string openTime = default(string), TradeState? state = default(TradeState?), double initialUnits = default(double), double initialMarginRequired = default(double), double currentUnits = default(double), double realizedPL = default(double), double unrealizedPL = default(double), double marginUsed = default(double), double averageClosePrice = default(double), List<int> closingTransactionIDs = default(List<int>), double financing = default(double), string closeTime = default(string), ClientExtensions clientExtensions = default(ClientExtensions), TakeProfitOrder takeProfitOrder = default(TakeProfitOrder), StopLossOrder stopLossOrder = default(StopLossOrder), TrailingStopLossOrder trailingStopLossOrder = default(TrailingStopLossOrder))
        {
            this.Id = id;
            this.Instrument = instrument;
            this.Price = price;
            this.OpenTime = openTime;
            this.State = state;
            this.InitialUnits = initialUnits;
            this.InitialMarginRequired = initialMarginRequired;
            this.CurrentUnits = currentUnits;
            this.RealizedPL = realizedPL;
            this.UnrealizedPL = unrealizedPL;
            this.MarginUsed = marginUsed;
            this.AverageClosePrice = averageClosePrice;
            this.ClosingTransactionIDs = closingTransactionIDs;
            this.Financing = financing;
            this.CloseTime = closeTime;
            this.ClientExtensions = clientExtensions;
            this.TakeProfitOrder = takeProfitOrder;
            this.StopLossOrder = stopLossOrder;
            this.TrailingStopLossOrder = trailingStopLossOrder;
        }
        
        /// <summary>
        /// The Trade&#39;s identifier, unique within the Trade&#39;s Account.
        /// </summary>
        /// <value>The Trade&#39;s identifier, unique within the Trade&#39;s Account.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The execution price of the Trade.
        /// </summary>
        /// <value>The execution price of the Trade.</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double Price { get; set; }

        /// <summary>
        /// A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).
        /// </summary>
        /// <value>A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).</value>
        [DataMember(Name="openTime", EmitDefaultValue=false)]
        public string OpenTime { get; set; }

        /// <summary>
        /// The initial size of the Trade. Negative values indicate a short Trade, and positive values indicate a long Trade.
        /// </summary>
        /// <value>The initial size of the Trade. Negative values indicate a short Trade, and positive values indicate a long Trade.</value>
        [DataMember(Name="initialUnits", EmitDefaultValue=false)]
        public double InitialUnits { get; set; }

        /// <summary>
        /// The margin required at the time the Trade was created. Note, this is the &#39;pure&#39; margin required, it is not the &#39;effective&#39; margin used that factors in the trade risk if a GSLO is attached to the trade.
        /// </summary>
        /// <value>The margin required at the time the Trade was created. Note, this is the &#39;pure&#39; margin required, it is not the &#39;effective&#39; margin used that factors in the trade risk if a GSLO is attached to the trade.</value>
        [DataMember(Name="initialMarginRequired", EmitDefaultValue=false)]
        public double InitialMarginRequired { get; set; }

        /// <summary>
        /// The number of units currently open for the Trade. This value is reduced to 0.0 as the Trade is closed.
        /// </summary>
        /// <value>The number of units currently open for the Trade. This value is reduced to 0.0 as the Trade is closed.</value>
        [DataMember(Name="currentUnits", EmitDefaultValue=false)]
        public double CurrentUnits { get; set; }

        /// <summary>
        /// The total profit/loss realized on the closed portion of the Trade.
        /// </summary>
        /// <value>The total profit/loss realized on the closed portion of the Trade.</value>
        [DataMember(Name="realizedPL", EmitDefaultValue=false)]
        public double RealizedPL { get; set; }

        /// <summary>
        /// The unrealized profit/loss on the open portion of the Trade.
        /// </summary>
        /// <value>The unrealized profit/loss on the open portion of the Trade.</value>
        [DataMember(Name="unrealizedPL", EmitDefaultValue=false)]
        public double UnrealizedPL { get; set; }

        /// <summary>
        /// Margin currently used by the Trade.
        /// </summary>
        /// <value>Margin currently used by the Trade.</value>
        [DataMember(Name="marginUsed", EmitDefaultValue=false)]
        public double MarginUsed { get; set; }

        /// <summary>
        /// The average closing price of the Trade. Only present if the Trade has been closed or reduced at least once.
        /// </summary>
        /// <value>The average closing price of the Trade. Only present if the Trade has been closed or reduced at least once.</value>
        [DataMember(Name="averageClosePrice", EmitDefaultValue=false)]
        public double AverageClosePrice { get; set; }

        /// <summary>
        /// The IDs of the Transactions that have closed portions of this Trade.
        /// </summary>
        /// <value>The IDs of the Transactions that have closed portions of this Trade.</value>
        [DataMember(Name="closingTransactionIDs", EmitDefaultValue=false)]
        public List<int> ClosingTransactionIDs { get; set; }

        /// <summary>
        /// The financing paid/collected for this Trade.
        /// </summary>
        /// <value>The financing paid/collected for this Trade.</value>
        [DataMember(Name="financing", EmitDefaultValue=false)]
        public double Financing { get; set; }

        /// <summary>
        /// A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).
        /// </summary>
        /// <value>A date and time value using either RFC3339 or UNIX time representation. The RFC 3339 representation is a string conforming to https://tools.ietf.org/rfc/rfc3339.txt. The Unix representation is a string representing the number of seconds since the Unix Epoch (January 1st, 1970 at UTC). The value is a fractional number, where the fractional part represents a fraction of a second (up to nine decimal places).</value>
        [DataMember(Name="closeTime", EmitDefaultValue=false)]
        public string CloseTime { get; set; }

        /// <summary>
        /// Gets or Sets ClientExtensions
        /// </summary>
        [DataMember(Name="clientExtensions", EmitDefaultValue=false)]
        public ClientExtensions ClientExtensions { get; set; }

        /// <summary>
        /// Gets or Sets TakeProfitOrder
        /// </summary>
        [DataMember(Name="takeProfitOrder", EmitDefaultValue=false)]
        public TakeProfitOrder TakeProfitOrder { get; set; }

        /// <summary>
        /// Gets or Sets StopLossOrder
        /// </summary>
        [DataMember(Name="stopLossOrder", EmitDefaultValue=false)]
        public StopLossOrder StopLossOrder { get; set; }

        /// <summary>
        /// Gets or Sets TrailingStopLossOrder
        /// </summary>
        [DataMember(Name="trailingStopLossOrder", EmitDefaultValue=false)]
        public TrailingStopLossOrder TrailingStopLossOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Trade {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  OpenTime: ").Append(OpenTime).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  InitialUnits: ").Append(InitialUnits).Append("\n");
            sb.Append("  InitialMarginRequired: ").Append(InitialMarginRequired).Append("\n");
            sb.Append("  CurrentUnits: ").Append(CurrentUnits).Append("\n");
            sb.Append("  RealizedPL: ").Append(RealizedPL).Append("\n");
            sb.Append("  UnrealizedPL: ").Append(UnrealizedPL).Append("\n");
            sb.Append("  MarginUsed: ").Append(MarginUsed).Append("\n");
            sb.Append("  AverageClosePrice: ").Append(AverageClosePrice).Append("\n");
            sb.Append("  ClosingTransactionIDs: ").Append(ClosingTransactionIDs).Append("\n");
            sb.Append("  Financing: ").Append(Financing).Append("\n");
            sb.Append("  CloseTime: ").Append(CloseTime).Append("\n");
            sb.Append("  ClientExtensions: ").Append(ClientExtensions).Append("\n");
            sb.Append("  TakeProfitOrder: ").Append(TakeProfitOrder).Append("\n");
            sb.Append("  StopLossOrder: ").Append(StopLossOrder).Append("\n");
            sb.Append("  TrailingStopLossOrder: ").Append(TrailingStopLossOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Trade);
        }

        /// <summary>
        /// Returns true if Trade instances are equal
        /// </summary>
        /// <param name="input">Instance of Trade to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Trade input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Instrument == input.Instrument ||
                    this.Instrument.Equals(input.Instrument)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.OpenTime == input.OpenTime ||
                    (this.OpenTime != null &&
                    this.OpenTime.Equals(input.OpenTime))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.InitialUnits == input.InitialUnits ||
                    this.InitialUnits.Equals(input.InitialUnits)
                ) && 
                (
                    this.InitialMarginRequired == input.InitialMarginRequired ||
                    this.InitialMarginRequired.Equals(input.InitialMarginRequired)
                ) && 
                (
                    this.CurrentUnits == input.CurrentUnits ||
                    this.CurrentUnits.Equals(input.CurrentUnits)
                ) && 
                (
                    this.RealizedPL == input.RealizedPL ||
                    this.RealizedPL.Equals(input.RealizedPL)
                ) && 
                (
                    this.UnrealizedPL == input.UnrealizedPL ||
                    this.UnrealizedPL.Equals(input.UnrealizedPL)
                ) && 
                (
                    this.MarginUsed == input.MarginUsed ||
                    this.MarginUsed.Equals(input.MarginUsed)
                ) && 
                (
                    this.AverageClosePrice == input.AverageClosePrice ||
                    this.AverageClosePrice.Equals(input.AverageClosePrice)
                ) && 
                (
                    this.ClosingTransactionIDs == input.ClosingTransactionIDs ||
                    this.ClosingTransactionIDs != null &&
                    input.ClosingTransactionIDs != null &&
                    this.ClosingTransactionIDs.SequenceEqual(input.ClosingTransactionIDs)
                ) && 
                (
                    this.Financing == input.Financing ||
                    this.Financing.Equals(input.Financing)
                ) && 
                (
                    this.CloseTime == input.CloseTime ||
                    (this.CloseTime != null &&
                    this.CloseTime.Equals(input.CloseTime))
                ) && 
                (
                    this.ClientExtensions == input.ClientExtensions ||
                    (this.ClientExtensions != null &&
                    this.ClientExtensions.Equals(input.ClientExtensions))
                ) && 
                (
                    this.TakeProfitOrder == input.TakeProfitOrder ||
                    (this.TakeProfitOrder != null &&
                    this.TakeProfitOrder.Equals(input.TakeProfitOrder))
                ) && 
                (
                    this.StopLossOrder == input.StopLossOrder ||
                    (this.StopLossOrder != null &&
                    this.StopLossOrder.Equals(input.StopLossOrder))
                ) && 
                (
                    this.TrailingStopLossOrder == input.TrailingStopLossOrder ||
                    (this.TrailingStopLossOrder != null &&
                    this.TrailingStopLossOrder.Equals(input.TrailingStopLossOrder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.Instrument.GetHashCode();
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.OpenTime != null)
                    hashCode = hashCode * 59 + this.OpenTime.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                hashCode = hashCode * 59 + this.InitialUnits.GetHashCode();
                hashCode = hashCode * 59 + this.InitialMarginRequired.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentUnits.GetHashCode();
                hashCode = hashCode * 59 + this.RealizedPL.GetHashCode();
                hashCode = hashCode * 59 + this.UnrealizedPL.GetHashCode();
                hashCode = hashCode * 59 + this.MarginUsed.GetHashCode();
                hashCode = hashCode * 59 + this.AverageClosePrice.GetHashCode();
                if (this.ClosingTransactionIDs != null)
                    hashCode = hashCode * 59 + this.ClosingTransactionIDs.GetHashCode();
                hashCode = hashCode * 59 + this.Financing.GetHashCode();
                if (this.CloseTime != null)
                    hashCode = hashCode * 59 + this.CloseTime.GetHashCode();
                if (this.ClientExtensions != null)
                    hashCode = hashCode * 59 + this.ClientExtensions.GetHashCode();
                if (this.TakeProfitOrder != null)
                    hashCode = hashCode * 59 + this.TakeProfitOrder.GetHashCode();
                if (this.StopLossOrder != null)
                    hashCode = hashCode * 59 + this.StopLossOrder.GetHashCode();
                if (this.TrailingStopLossOrder != null)
                    hashCode = hashCode * 59 + this.TrailingStopLossOrder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // OpenTime (string) pattern
            Regex regexOpenTime = new Regex(@"^(?:(?:\\d+(?:\\.\\d{1,9})?)|(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d))$", RegexOptions.CultureInvariant);
            if (false == regexOpenTime.Match(this.OpenTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OpenTime, must match a pattern of " + regexOpenTime, new [] { "OpenTime" });
            }

            // CloseTime (string) pattern
            Regex regexCloseTime = new Regex(@"^(?:(?:\\d+(?:\\.\\d{1,9})?)|(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d))$", RegexOptions.CultureInvariant);
            if (false == regexCloseTime.Match(this.CloseTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CloseTime, must match a pattern of " + regexCloseTime, new [] { "CloseTime" });
            }

            yield break;
        }
    }

}

/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GeriRemenyi.Oanda.V20.Client.Client;
using GeriRemenyi.Oanda.V20.Client.Model;

namespace GeriRemenyi.Oanda.V20.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Close Trade
        /// </summary>
        /// <remarks>
        /// Close (partially or fully) a specific open Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="closeTradeRequest">Details of how much of the open Trade to close.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>CloseTradeResponse</returns>
        CloseTradeResponse CloseTrade (string accountID, string tradeSpecifier, CloseTradeRequest closeTradeRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));

        /// <summary>
        /// Close Trade
        /// </summary>
        /// <remarks>
        /// Close (partially or fully) a specific open Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="closeTradeRequest">Details of how much of the open Trade to close.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of CloseTradeResponse</returns>
        ApiResponse<CloseTradeResponse> CloseTradeWithHttpInfo (string accountID, string tradeSpecifier, CloseTradeRequest closeTradeRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));
        /// <summary>
        /// List Open Trades
        /// </summary>
        /// <remarks>
        /// Get the list of open Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>OpenTradeResponse</returns>
        OpenTradeResponse GetOpenTrades (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));

        /// <summary>
        /// List Open Trades
        /// </summary>
        /// <remarks>
        /// Get the list of open Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of OpenTradeResponse</returns>
        ApiResponse<OpenTradeResponse> GetOpenTradesWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));
        /// <summary>
        /// Trade Details
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>TradeResponse</returns>
        TradeResponse GetTrade (string accountID, string tradeSpecifier, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));

        /// <summary>
        /// Trade Details
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of TradeResponse</returns>
        ApiResponse<TradeResponse> GetTradeWithHttpInfo (string accountID, string tradeSpecifier, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));
        /// <summary>
        /// List Trades
        /// </summary>
        /// <remarks>
        /// Get a list of Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>TradesResponse</returns>
        TradesResponse GetTrades (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), List<int> ids = default(List<int>), string state = default(string), InstrumentName? instrument = default(InstrumentName?), int? count = default(int?), int? beforeID = default(int?));

        /// <summary>
        /// List Trades
        /// </summary>
        /// <remarks>
        /// Get a list of Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>ApiResponse of TradesResponse</returns>
        ApiResponse<TradesResponse> GetTradesWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), List<int> ids = default(List<int>), string state = default(string), InstrumentName? instrument = default(InstrumentName?), int? count = default(int?), int? beforeID = default(int?));
        /// <summary>
        /// Set Trade Client Extensions
        /// </summary>
        /// <remarks>
        /// Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="tradeExtensionsRequest">Details of how to modify the Trade&#39;s Client Extensions.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>TradeExtensionsResponse</returns>
        TradeExtensionsResponse SetTradeExtensions (string accountID, string tradeSpecifier, TradeExtensionsRequest tradeExtensionsRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));

        /// <summary>
        /// Set Trade Client Extensions
        /// </summary>
        /// <remarks>
        /// Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="tradeExtensionsRequest">Details of how to modify the Trade&#39;s Client Extensions.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of TradeExtensionsResponse</returns>
        ApiResponse<TradeExtensionsResponse> SetTradeExtensionsWithHttpInfo (string accountID, string tradeSpecifier, TradeExtensionsRequest tradeExtensionsRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));
        /// <summary>
        /// Set Dependent Orders
        /// </summary>
        /// <remarks>
        /// Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="dependentTradeOrdersRequest">Details of how to modify the Trade&#39;s dependent Orders.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>DependentTradeOrdersResponse</returns>
        DependentTradeOrdersResponse SetTradeOrders (string accountID, string tradeSpecifier, DependentTradeOrdersRequest dependentTradeOrdersRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));

        /// <summary>
        /// Set Dependent Orders
        /// </summary>
        /// <remarks>
        /// Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="dependentTradeOrdersRequest">Details of how to modify the Trade&#39;s dependent Orders.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of DependentTradeOrdersResponse</returns>
        ApiResponse<DependentTradeOrdersResponse> SetTradeOrdersWithHttpInfo (string accountID, string tradeSpecifier, DependentTradeOrdersRequest dependentTradeOrdersRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Close Trade
        /// </summary>
        /// <remarks>
        /// Close (partially or fully) a specific open Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="closeTradeRequest">Details of how much of the open Trade to close.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of CloseTradeResponse</returns>
        System.Threading.Tasks.Task<CloseTradeResponse> CloseTradeAsync (string accountID, string tradeSpecifier, CloseTradeRequest closeTradeRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));

        /// <summary>
        /// Close Trade
        /// </summary>
        /// <remarks>
        /// Close (partially or fully) a specific open Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="closeTradeRequest">Details of how much of the open Trade to close.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (CloseTradeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloseTradeResponse>> CloseTradeAsyncWithHttpInfo (string accountID, string tradeSpecifier, CloseTradeRequest closeTradeRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));
        /// <summary>
        /// List Open Trades
        /// </summary>
        /// <remarks>
        /// Get the list of open Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of OpenTradeResponse</returns>
        System.Threading.Tasks.Task<OpenTradeResponse> GetOpenTradesAsync (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));

        /// <summary>
        /// List Open Trades
        /// </summary>
        /// <remarks>
        /// Get the list of open Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (OpenTradeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OpenTradeResponse>> GetOpenTradesAsyncWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));
        /// <summary>
        /// Trade Details
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of TradeResponse</returns>
        System.Threading.Tasks.Task<TradeResponse> GetTradeAsync (string accountID, string tradeSpecifier, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));

        /// <summary>
        /// Trade Details
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Trade in an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (TradeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeResponse>> GetTradeAsyncWithHttpInfo (string accountID, string tradeSpecifier, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));
        /// <summary>
        /// List Trades
        /// </summary>
        /// <remarks>
        /// Get a list of Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>Task of TradesResponse</returns>
        System.Threading.Tasks.Task<TradesResponse> GetTradesAsync (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), List<int> ids = default(List<int>), string state = default(string), InstrumentName? instrument = default(InstrumentName?), int? count = default(int?), int? beforeID = default(int?));

        /// <summary>
        /// List Trades
        /// </summary>
        /// <remarks>
        /// Get a list of Trades for an Account
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>Task of ApiResponse (TradesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradesResponse>> GetTradesAsyncWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), List<int> ids = default(List<int>), string state = default(string), InstrumentName? instrument = default(InstrumentName?), int? count = default(int?), int? beforeID = default(int?));
        /// <summary>
        /// Set Trade Client Extensions
        /// </summary>
        /// <remarks>
        /// Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="tradeExtensionsRequest">Details of how to modify the Trade&#39;s Client Extensions.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of TradeExtensionsResponse</returns>
        System.Threading.Tasks.Task<TradeExtensionsResponse> SetTradeExtensionsAsync (string accountID, string tradeSpecifier, TradeExtensionsRequest tradeExtensionsRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));

        /// <summary>
        /// Set Trade Client Extensions
        /// </summary>
        /// <remarks>
        /// Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="tradeExtensionsRequest">Details of how to modify the Trade&#39;s Client Extensions.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (TradeExtensionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeExtensionsResponse>> SetTradeExtensionsAsyncWithHttpInfo (string accountID, string tradeSpecifier, TradeExtensionsRequest tradeExtensionsRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));
        /// <summary>
        /// Set Dependent Orders
        /// </summary>
        /// <remarks>
        /// Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="dependentTradeOrdersRequest">Details of how to modify the Trade&#39;s dependent Orders.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of DependentTradeOrdersResponse</returns>
        System.Threading.Tasks.Task<DependentTradeOrdersResponse> SetTradeOrdersAsync (string accountID, string tradeSpecifier, DependentTradeOrdersRequest dependentTradeOrdersRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));

        /// <summary>
        /// Set Dependent Orders
        /// </summary>
        /// <remarks>
        /// Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="dependentTradeOrdersRequest">Details of how to modify the Trade&#39;s dependent Orders.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (DependentTradeOrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DependentTradeOrdersResponse>> SetTradeOrdersAsyncWithHttpInfo (string accountID, string tradeSpecifier, DependentTradeOrdersRequest dependentTradeOrdersRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradeApi : ITradeApiSync, ITradeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TradeApi : ITradeApi
    {
        private GeriRemenyi.Oanda.V20.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TradeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TradeApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TradeApi(String basePath)
        {
            this.Configuration = GeriRemenyi.Oanda.V20.Client.Client.Configuration.MergeConfigurations(
                GeriRemenyi.Oanda.V20.Client.Client.GlobalConfiguration.Instance,
                new GeriRemenyi.Oanda.V20.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GeriRemenyi.Oanda.V20.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeriRemenyi.Oanda.V20.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TradeApi(GeriRemenyi.Oanda.V20.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GeriRemenyi.Oanda.V20.Client.Client.Configuration.MergeConfigurations(
                GeriRemenyi.Oanda.V20.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GeriRemenyi.Oanda.V20.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeriRemenyi.Oanda.V20.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TradeApi(GeriRemenyi.Oanda.V20.Client.Client.ISynchronousClient client,GeriRemenyi.Oanda.V20.Client.Client.IAsynchronousClient asyncClient, GeriRemenyi.Oanda.V20.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GeriRemenyi.Oanda.V20.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Close Trade Close (partially or fully) a specific open Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="closeTradeRequest">Details of how much of the open Trade to close.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>CloseTradeResponse</returns>
        public CloseTradeResponse CloseTrade (string accountID, string tradeSpecifier, CloseTradeRequest closeTradeRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<CloseTradeResponse> localVarResponse = CloseTradeWithHttpInfo(accountID, tradeSpecifier, closeTradeRequest, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Close Trade Close (partially or fully) a specific open Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="closeTradeRequest">Details of how much of the open Trade to close.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of CloseTradeResponse</returns>
        public GeriRemenyi.Oanda.V20.Client.Client.ApiResponse< CloseTradeResponse > CloseTradeWithHttpInfo (string accountID, string tradeSpecifier, CloseTradeRequest closeTradeRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->CloseTrade");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->CloseTrade");

            // verify the required parameter 'closeTradeRequest' is set
            if (closeTradeRequest == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'closeTradeRequest' when calling TradeApi->CloseTrade");

            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = closeTradeRequest;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< CloseTradeResponse >("/accounts/{accountID}/trades/{tradeSpecifier}/close", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CloseTrade", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Close Trade Close (partially or fully) a specific open Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="closeTradeRequest">Details of how much of the open Trade to close.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of CloseTradeResponse</returns>
        public async System.Threading.Tasks.Task<CloseTradeResponse> CloseTradeAsync (string accountID, string tradeSpecifier, CloseTradeRequest closeTradeRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<CloseTradeResponse> localVarResponse = await CloseTradeAsyncWithHttpInfo(accountID, tradeSpecifier, closeTradeRequest, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Close Trade Close (partially or fully) a specific open Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="closeTradeRequest">Details of how much of the open Trade to close.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (CloseTradeResponse)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<CloseTradeResponse>> CloseTradeAsyncWithHttpInfo (string accountID, string tradeSpecifier, CloseTradeRequest closeTradeRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->CloseTrade");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->CloseTrade");

            // verify the required parameter 'closeTradeRequest' is set
            if (closeTradeRequest == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'closeTradeRequest' when calling TradeApi->CloseTrade");


            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = closeTradeRequest;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<CloseTradeResponse>("/accounts/{accountID}/trades/{tradeSpecifier}/close", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CloseTrade", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Open Trades Get the list of open Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>OpenTradeResponse</returns>
        public OpenTradeResponse GetOpenTrades (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<OpenTradeResponse> localVarResponse = GetOpenTradesWithHttpInfo(accountID, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Open Trades Get the list of open Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of OpenTradeResponse</returns>
        public GeriRemenyi.Oanda.V20.Client.Client.ApiResponse< OpenTradeResponse > GetOpenTradesWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->GetOpenTrades");

            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OpenTradeResponse >("/accounts/{accountID}/openTrades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Open Trades Get the list of open Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of OpenTradeResponse</returns>
        public async System.Threading.Tasks.Task<OpenTradeResponse> GetOpenTradesAsync (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<OpenTradeResponse> localVarResponse = await GetOpenTradesAsyncWithHttpInfo(accountID, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Open Trades Get the list of open Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (OpenTradeResponse)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<OpenTradeResponse>> GetOpenTradesAsyncWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->GetOpenTrades");


            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OpenTradeResponse>("/accounts/{accountID}/openTrades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trade Details Get the details of a specific Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>TradeResponse</returns>
        public TradeResponse GetTrade (string accountID, string tradeSpecifier, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<TradeResponse> localVarResponse = GetTradeWithHttpInfo(accountID, tradeSpecifier, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Trade Details Get the details of a specific Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of TradeResponse</returns>
        public GeriRemenyi.Oanda.V20.Client.Client.ApiResponse< TradeResponse > GetTradeWithHttpInfo (string accountID, string tradeSpecifier, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->GetTrade");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->GetTrade");

            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TradeResponse >("/accounts/{accountID}/trades/{tradeSpecifier}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrade", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trade Details Get the details of a specific Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of TradeResponse</returns>
        public async System.Threading.Tasks.Task<TradeResponse> GetTradeAsync (string accountID, string tradeSpecifier, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<TradeResponse> localVarResponse = await GetTradeAsyncWithHttpInfo(accountID, tradeSpecifier, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Trade Details Get the details of a specific Trade in an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (TradeResponse)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<TradeResponse>> GetTradeAsyncWithHttpInfo (string accountID, string tradeSpecifier, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->GetTrade");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->GetTrade");


            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TradeResponse>("/accounts/{accountID}/trades/{tradeSpecifier}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrade", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Trades Get a list of Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>TradesResponse</returns>
        public TradesResponse GetTrades (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), List<int> ids = default(List<int>), string state = default(string), InstrumentName? instrument = default(InstrumentName?), int? count = default(int?), int? beforeID = default(int?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<TradesResponse> localVarResponse = GetTradesWithHttpInfo(accountID, acceptDatetimeFormat, ids, state, instrument, count, beforeID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Trades Get a list of Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>ApiResponse of TradesResponse</returns>
        public GeriRemenyi.Oanda.V20.Client.Client.ApiResponse< TradesResponse > GetTradesWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), List<int> ids = default(List<int>), string state = default(string), InstrumentName? instrument = default(InstrumentName?), int? count = default(int?), int? beforeID = default(int?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->GetTrades");

            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (instrument != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (beforeID != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "beforeID", beforeID));
            }
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TradesResponse >("/accounts/{accountID}/trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Trades Get a list of Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>Task of TradesResponse</returns>
        public async System.Threading.Tasks.Task<TradesResponse> GetTradesAsync (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), List<int> ids = default(List<int>), string state = default(string), InstrumentName? instrument = default(InstrumentName?), int? count = default(int?), int? beforeID = default(int?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<TradesResponse> localVarResponse = await GetTradesAsyncWithHttpInfo(accountID, acceptDatetimeFormat, ids, state, instrument, count, beforeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Trades Get a list of Trades for an Account
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="ids">List of Trade IDs to retrieve. (optional)</param>
        /// <param name="state">The state to filter the requested Trades by. (optional)</param>
        /// <param name="instrument">The instrument to filter the requested Trades by. (optional)</param>
        /// <param name="count">The maximum number of Trades to return. (optional)</param>
        /// <param name="beforeID">The maximum Trade ID to return. If not provided the most recent Trades in the Account are returned. (optional)</param>
        /// <returns>Task of ApiResponse (TradesResponse)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<TradesResponse>> GetTradesAsyncWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), List<int> ids = default(List<int>), string state = default(string), InstrumentName? instrument = default(InstrumentName?), int? count = default(int?), int? beforeID = default(int?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->GetTrades");


            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (instrument != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (beforeID != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "beforeID", beforeID));
            }
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TradesResponse>("/accounts/{accountID}/trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Trade Client Extensions Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="tradeExtensionsRequest">Details of how to modify the Trade&#39;s Client Extensions.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>TradeExtensionsResponse</returns>
        public TradeExtensionsResponse SetTradeExtensions (string accountID, string tradeSpecifier, TradeExtensionsRequest tradeExtensionsRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<TradeExtensionsResponse> localVarResponse = SetTradeExtensionsWithHttpInfo(accountID, tradeSpecifier, tradeExtensionsRequest, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Trade Client Extensions Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="tradeExtensionsRequest">Details of how to modify the Trade&#39;s Client Extensions.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of TradeExtensionsResponse</returns>
        public GeriRemenyi.Oanda.V20.Client.Client.ApiResponse< TradeExtensionsResponse > SetTradeExtensionsWithHttpInfo (string accountID, string tradeSpecifier, TradeExtensionsRequest tradeExtensionsRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->SetTradeExtensions");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->SetTradeExtensions");

            // verify the required parameter 'tradeExtensionsRequest' is set
            if (tradeExtensionsRequest == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'tradeExtensionsRequest' when calling TradeApi->SetTradeExtensions");

            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = tradeExtensionsRequest;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< TradeExtensionsResponse >("/accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTradeExtensions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Trade Client Extensions Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="tradeExtensionsRequest">Details of how to modify the Trade&#39;s Client Extensions.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of TradeExtensionsResponse</returns>
        public async System.Threading.Tasks.Task<TradeExtensionsResponse> SetTradeExtensionsAsync (string accountID, string tradeSpecifier, TradeExtensionsRequest tradeExtensionsRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<TradeExtensionsResponse> localVarResponse = await SetTradeExtensionsAsyncWithHttpInfo(accountID, tradeSpecifier, tradeExtensionsRequest, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Trade Client Extensions Update the Client Extensions for a Trade. Do not add, update, or delete the Client Extensions if your account is associated with MT4.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="tradeExtensionsRequest">Details of how to modify the Trade&#39;s Client Extensions.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (TradeExtensionsResponse)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<TradeExtensionsResponse>> SetTradeExtensionsAsyncWithHttpInfo (string accountID, string tradeSpecifier, TradeExtensionsRequest tradeExtensionsRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->SetTradeExtensions");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->SetTradeExtensions");

            // verify the required parameter 'tradeExtensionsRequest' is set
            if (tradeExtensionsRequest == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'tradeExtensionsRequest' when calling TradeApi->SetTradeExtensions");


            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = tradeExtensionsRequest;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TradeExtensionsResponse>("/accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTradeExtensions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Dependent Orders Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="dependentTradeOrdersRequest">Details of how to modify the Trade&#39;s dependent Orders.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>DependentTradeOrdersResponse</returns>
        public DependentTradeOrdersResponse SetTradeOrders (string accountID, string tradeSpecifier, DependentTradeOrdersRequest dependentTradeOrdersRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<DependentTradeOrdersResponse> localVarResponse = SetTradeOrdersWithHttpInfo(accountID, tradeSpecifier, dependentTradeOrdersRequest, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Dependent Orders Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="dependentTradeOrdersRequest">Details of how to modify the Trade&#39;s dependent Orders.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of DependentTradeOrdersResponse</returns>
        public GeriRemenyi.Oanda.V20.Client.Client.ApiResponse< DependentTradeOrdersResponse > SetTradeOrdersWithHttpInfo (string accountID, string tradeSpecifier, DependentTradeOrdersRequest dependentTradeOrdersRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->SetTradeOrders");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->SetTradeOrders");

            // verify the required parameter 'dependentTradeOrdersRequest' is set
            if (dependentTradeOrdersRequest == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'dependentTradeOrdersRequest' when calling TradeApi->SetTradeOrders");

            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = dependentTradeOrdersRequest;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< DependentTradeOrdersResponse >("/accounts/{accountID}/trades/{tradeSpecifier}/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTradeOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Dependent Orders Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="dependentTradeOrdersRequest">Details of how to modify the Trade&#39;s dependent Orders.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of DependentTradeOrdersResponse</returns>
        public async System.Threading.Tasks.Task<DependentTradeOrdersResponse> SetTradeOrdersAsync (string accountID, string tradeSpecifier, DependentTradeOrdersRequest dependentTradeOrdersRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<DependentTradeOrdersResponse> localVarResponse = await SetTradeOrdersAsyncWithHttpInfo(accountID, tradeSpecifier, dependentTradeOrdersRequest, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Dependent Orders Create, replace and cancel a Trade&#39;s dependent Orders (Take Profit, Stop Loss and Trailing Stop Loss) through the Trade itself
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="tradeSpecifier">Specifier for the Trade</param>
        /// <param name="dependentTradeOrdersRequest">Details of how to modify the Trade&#39;s dependent Orders.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (DependentTradeOrdersResponse)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<DependentTradeOrdersResponse>> SetTradeOrdersAsyncWithHttpInfo (string accountID, string tradeSpecifier, DependentTradeOrdersRequest dependentTradeOrdersRequest, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling TradeApi->SetTradeOrders");

            // verify the required parameter 'tradeSpecifier' is set
            if (tradeSpecifier == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'tradeSpecifier' when calling TradeApi->SetTradeOrders");

            // verify the required parameter 'dependentTradeOrdersRequest' is set
            if (dependentTradeOrdersRequest == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'dependentTradeOrdersRequest' when calling TradeApi->SetTradeOrders");


            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tradeSpecifier", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(tradeSpecifier)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = dependentTradeOrdersRequest;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<DependentTradeOrdersResponse>("/accounts/{accountID}/trades/{tradeSpecifier}/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTradeOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GeriRemenyi.Oanda.V20.Client.Client;
using GeriRemenyi.Oanda.V20.Client.Model;

namespace GeriRemenyi.Oanda.V20.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Configure Account
        /// </summary>
        /// <remarks>
        /// Set the client-configurable portions of an Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="accountConfigurationRequest">Representation of the Account configuration to set (optional)</param>
        /// <returns>AccountConfigurationResponse</returns>
        AccountConfigurationResponse ConfigureAccount (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), AccountConfigurationRequest accountConfigurationRequest = default(AccountConfigurationRequest));

        /// <summary>
        /// Configure Account
        /// </summary>
        /// <remarks>
        /// Set the client-configurable portions of an Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="accountConfigurationRequest">Representation of the Account configuration to set (optional)</param>
        /// <returns>ApiResponse of AccountConfigurationResponse</returns>
        ApiResponse<AccountConfigurationResponse> ConfigureAccountWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), AccountConfigurationRequest accountConfigurationRequest = default(AccountConfigurationRequest));
        /// <summary>
        /// Account Details
        /// </summary>
        /// <remarks>
        /// Get the full details for a single Account that a client has access to. Full pending Order, open Trade and open Position representations are provided.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>AccountResponse</returns>
        AccountResponse GetAccount (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));

        /// <summary>
        /// Account Details
        /// </summary>
        /// <remarks>
        /// Get the full details for a single Account that a client has access to. Full pending Order, open Trade and open Position representations are provided.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of AccountResponse</returns>
        ApiResponse<AccountResponse> GetAccountWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));
        /// <summary>
        /// Poll Account Updates
        /// </summary>
        /// <remarks>
        /// Endpoint used to poll an Account for its current state and changes since a specified TransactionID.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="sinceTransactionID">ID of the Transaction to get Account changes since. (optional)</param>
        /// <returns>AccountChangesResponse</returns>
        AccountChangesResponse GetAccountChanges (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), int? sinceTransactionID = default(int?));

        /// <summary>
        /// Poll Account Updates
        /// </summary>
        /// <remarks>
        /// Endpoint used to poll an Account for its current state and changes since a specified TransactionID.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="sinceTransactionID">ID of the Transaction to get Account changes since. (optional)</param>
        /// <returns>ApiResponse of AccountChangesResponse</returns>
        ApiResponse<AccountChangesResponse> GetAccountChangesWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), int? sinceTransactionID = default(int?));
        /// <summary>
        /// Account Instruments
        /// </summary>
        /// <remarks>
        /// Get the list of tradeable instruments for the given Account. The list of tradeable instruments is dependent on the regulatory division that the Account is located in, thus should be the same for all Accounts owned by a single user.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of instruments to query specifically. (optional)</param>
        /// <returns>AccountInstrumentsResponse</returns>
        AccountInstrumentsResponse GetAccountInstruments (string accountID, List<InstrumentName> instruments = default(List<InstrumentName>));

        /// <summary>
        /// Account Instruments
        /// </summary>
        /// <remarks>
        /// Get the list of tradeable instruments for the given Account. The list of tradeable instruments is dependent on the regulatory division that the Account is located in, thus should be the same for all Accounts owned by a single user.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of instruments to query specifically. (optional)</param>
        /// <returns>ApiResponse of AccountInstrumentsResponse</returns>
        ApiResponse<AccountInstrumentsResponse> GetAccountInstrumentsWithHttpInfo (string accountID, List<InstrumentName> instruments = default(List<InstrumentName>));
        /// <summary>
        /// Account Summary
        /// </summary>
        /// <remarks>
        /// Get a summary for a single Account that a client has access to.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>AccountSummaryResponse</returns>
        AccountSummaryResponse GetAccountSummary (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));

        /// <summary>
        /// Account Summary
        /// </summary>
        /// <remarks>
        /// Get a summary for a single Account that a client has access to.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of AccountSummaryResponse</returns>
        ApiResponse<AccountSummaryResponse> GetAccountSummaryWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));
        /// <summary>
        /// List Accounts
        /// </summary>
        /// <remarks>
        /// Get a list of all Accounts authorized for the provided token.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountsResponse</returns>
        AccountsResponse GetAccounts ();

        /// <summary>
        /// List Accounts
        /// </summary>
        /// <remarks>
        /// Get a list of all Accounts authorized for the provided token.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountsResponse</returns>
        ApiResponse<AccountsResponse> GetAccountsWithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Configure Account
        /// </summary>
        /// <remarks>
        /// Set the client-configurable portions of an Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="accountConfigurationRequest">Representation of the Account configuration to set (optional)</param>
        /// <returns>Task of AccountConfigurationResponse</returns>
        System.Threading.Tasks.Task<AccountConfigurationResponse> ConfigureAccountAsync (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), AccountConfigurationRequest accountConfigurationRequest = default(AccountConfigurationRequest));

        /// <summary>
        /// Configure Account
        /// </summary>
        /// <remarks>
        /// Set the client-configurable portions of an Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="accountConfigurationRequest">Representation of the Account configuration to set (optional)</param>
        /// <returns>Task of ApiResponse (AccountConfigurationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountConfigurationResponse>> ConfigureAccountAsyncWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), AccountConfigurationRequest accountConfigurationRequest = default(AccountConfigurationRequest));
        /// <summary>
        /// Account Details
        /// </summary>
        /// <remarks>
        /// Get the full details for a single Account that a client has access to. Full pending Order, open Trade and open Position representations are provided.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of AccountResponse</returns>
        System.Threading.Tasks.Task<AccountResponse> GetAccountAsync (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));

        /// <summary>
        /// Account Details
        /// </summary>
        /// <remarks>
        /// Get the full details for a single Account that a client has access to. Full pending Order, open Trade and open Position representations are provided.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (AccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponse>> GetAccountAsyncWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));
        /// <summary>
        /// Poll Account Updates
        /// </summary>
        /// <remarks>
        /// Endpoint used to poll an Account for its current state and changes since a specified TransactionID.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="sinceTransactionID">ID of the Transaction to get Account changes since. (optional)</param>
        /// <returns>Task of AccountChangesResponse</returns>
        System.Threading.Tasks.Task<AccountChangesResponse> GetAccountChangesAsync (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), int? sinceTransactionID = default(int?));

        /// <summary>
        /// Poll Account Updates
        /// </summary>
        /// <remarks>
        /// Endpoint used to poll an Account for its current state and changes since a specified TransactionID.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="sinceTransactionID">ID of the Transaction to get Account changes since. (optional)</param>
        /// <returns>Task of ApiResponse (AccountChangesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountChangesResponse>> GetAccountChangesAsyncWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), int? sinceTransactionID = default(int?));
        /// <summary>
        /// Account Instruments
        /// </summary>
        /// <remarks>
        /// Get the list of tradeable instruments for the given Account. The list of tradeable instruments is dependent on the regulatory division that the Account is located in, thus should be the same for all Accounts owned by a single user.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of instruments to query specifically. (optional)</param>
        /// <returns>Task of AccountInstrumentsResponse</returns>
        System.Threading.Tasks.Task<AccountInstrumentsResponse> GetAccountInstrumentsAsync (string accountID, List<InstrumentName> instruments = default(List<InstrumentName>));

        /// <summary>
        /// Account Instruments
        /// </summary>
        /// <remarks>
        /// Get the list of tradeable instruments for the given Account. The list of tradeable instruments is dependent on the regulatory division that the Account is located in, thus should be the same for all Accounts owned by a single user.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of instruments to query specifically. (optional)</param>
        /// <returns>Task of ApiResponse (AccountInstrumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountInstrumentsResponse>> GetAccountInstrumentsAsyncWithHttpInfo (string accountID, List<InstrumentName> instruments = default(List<InstrumentName>));
        /// <summary>
        /// Account Summary
        /// </summary>
        /// <remarks>
        /// Get a summary for a single Account that a client has access to.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of AccountSummaryResponse</returns>
        System.Threading.Tasks.Task<AccountSummaryResponse> GetAccountSummaryAsync (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));

        /// <summary>
        /// Account Summary
        /// </summary>
        /// <remarks>
        /// Get a summary for a single Account that a client has access to.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (AccountSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountSummaryResponse>> GetAccountSummaryAsyncWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?));
        /// <summary>
        /// List Accounts
        /// </summary>
        /// <remarks>
        /// Get a list of all Accounts authorized for the provided token.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccountsResponse</returns>
        System.Threading.Tasks.Task<AccountsResponse> GetAccountsAsync ();

        /// <summary>
        /// List Accounts
        /// </summary>
        /// <remarks>
        /// Get a list of all Accounts authorized for the provided token.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountsResponse>> GetAccountsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApi : IAccountApiSync, IAccountApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountApi : IAccountApi
    {
        private GeriRemenyi.Oanda.V20.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi(String basePath)
        {
            this.Configuration = GeriRemenyi.Oanda.V20.Client.Client.Configuration.MergeConfigurations(
                GeriRemenyi.Oanda.V20.Client.Client.GlobalConfiguration.Instance,
                new GeriRemenyi.Oanda.V20.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GeriRemenyi.Oanda.V20.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeriRemenyi.Oanda.V20.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountApi(GeriRemenyi.Oanda.V20.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GeriRemenyi.Oanda.V20.Client.Client.Configuration.MergeConfigurations(
                GeriRemenyi.Oanda.V20.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GeriRemenyi.Oanda.V20.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeriRemenyi.Oanda.V20.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountApi(GeriRemenyi.Oanda.V20.Client.Client.ISynchronousClient client,GeriRemenyi.Oanda.V20.Client.Client.IAsynchronousClient asyncClient, GeriRemenyi.Oanda.V20.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GeriRemenyi.Oanda.V20.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Configure Account Set the client-configurable portions of an Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="accountConfigurationRequest">Representation of the Account configuration to set (optional)</param>
        /// <returns>AccountConfigurationResponse</returns>
        public AccountConfigurationResponse ConfigureAccount (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), AccountConfigurationRequest accountConfigurationRequest = default(AccountConfigurationRequest))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountConfigurationResponse> localVarResponse = ConfigureAccountWithHttpInfo(accountID, acceptDatetimeFormat, accountConfigurationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Configure Account Set the client-configurable portions of an Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="accountConfigurationRequest">Representation of the Account configuration to set (optional)</param>
        /// <returns>ApiResponse of AccountConfigurationResponse</returns>
        public GeriRemenyi.Oanda.V20.Client.Client.ApiResponse< AccountConfigurationResponse > ConfigureAccountWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), AccountConfigurationRequest accountConfigurationRequest = default(AccountConfigurationRequest))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountApi->ConfigureAccount");

            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = accountConfigurationRequest;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< AccountConfigurationResponse >("/accounts/{accountID}/configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigureAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure Account Set the client-configurable portions of an Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="accountConfigurationRequest">Representation of the Account configuration to set (optional)</param>
        /// <returns>Task of AccountConfigurationResponse</returns>
        public async System.Threading.Tasks.Task<AccountConfigurationResponse> ConfigureAccountAsync (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), AccountConfigurationRequest accountConfigurationRequest = default(AccountConfigurationRequest))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountConfigurationResponse> localVarResponse = await ConfigureAccountAsyncWithHttpInfo(accountID, acceptDatetimeFormat, accountConfigurationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Configure Account Set the client-configurable portions of an Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="accountConfigurationRequest">Representation of the Account configuration to set (optional)</param>
        /// <returns>Task of ApiResponse (AccountConfigurationResponse)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountConfigurationResponse>> ConfigureAccountAsyncWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), AccountConfigurationRequest accountConfigurationRequest = default(AccountConfigurationRequest))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountApi->ConfigureAccount");


            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }
            localVarRequestOptions.Data = accountConfigurationRequest;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<AccountConfigurationResponse>("/accounts/{accountID}/configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigureAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Account Details Get the full details for a single Account that a client has access to. Full pending Order, open Trade and open Position representations are provided.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>AccountResponse</returns>
        public AccountResponse GetAccount (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountResponse> localVarResponse = GetAccountWithHttpInfo(accountID, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Account Details Get the full details for a single Account that a client has access to. Full pending Order, open Trade and open Position representations are provided.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of AccountResponse</returns>
        public GeriRemenyi.Oanda.V20.Client.Client.ApiResponse< AccountResponse > GetAccountWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountApi->GetAccount");

            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AccountResponse >("/accounts/{accountID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Account Details Get the full details for a single Account that a client has access to. Full pending Order, open Trade and open Position representations are provided.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of AccountResponse</returns>
        public async System.Threading.Tasks.Task<AccountResponse> GetAccountAsync (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountResponse> localVarResponse = await GetAccountAsyncWithHttpInfo(accountID, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Account Details Get the full details for a single Account that a client has access to. Full pending Order, open Trade and open Position representations are provided.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (AccountResponse)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountResponse>> GetAccountAsyncWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountApi->GetAccount");


            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountResponse>("/accounts/{accountID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Poll Account Updates Endpoint used to poll an Account for its current state and changes since a specified TransactionID.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="sinceTransactionID">ID of the Transaction to get Account changes since. (optional)</param>
        /// <returns>AccountChangesResponse</returns>
        public AccountChangesResponse GetAccountChanges (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), int? sinceTransactionID = default(int?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountChangesResponse> localVarResponse = GetAccountChangesWithHttpInfo(accountID, acceptDatetimeFormat, sinceTransactionID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Poll Account Updates Endpoint used to poll an Account for its current state and changes since a specified TransactionID.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="sinceTransactionID">ID of the Transaction to get Account changes since. (optional)</param>
        /// <returns>ApiResponse of AccountChangesResponse</returns>
        public GeriRemenyi.Oanda.V20.Client.Client.ApiResponse< AccountChangesResponse > GetAccountChangesWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), int? sinceTransactionID = default(int?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountApi->GetAccountChanges");

            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (sinceTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "sinceTransactionID", sinceTransactionID));
            }
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AccountChangesResponse >("/accounts/{accountID}/changes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Poll Account Updates Endpoint used to poll an Account for its current state and changes since a specified TransactionID.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="sinceTransactionID">ID of the Transaction to get Account changes since. (optional)</param>
        /// <returns>Task of AccountChangesResponse</returns>
        public async System.Threading.Tasks.Task<AccountChangesResponse> GetAccountChangesAsync (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), int? sinceTransactionID = default(int?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountChangesResponse> localVarResponse = await GetAccountChangesAsyncWithHttpInfo(accountID, acceptDatetimeFormat, sinceTransactionID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Poll Account Updates Endpoint used to poll an Account for its current state and changes since a specified TransactionID.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="sinceTransactionID">ID of the Transaction to get Account changes since. (optional)</param>
        /// <returns>Task of ApiResponse (AccountChangesResponse)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountChangesResponse>> GetAccountChangesAsyncWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), int? sinceTransactionID = default(int?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountApi->GetAccountChanges");


            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (sinceTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "sinceTransactionID", sinceTransactionID));
            }
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountChangesResponse>("/accounts/{accountID}/changes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Account Instruments Get the list of tradeable instruments for the given Account. The list of tradeable instruments is dependent on the regulatory division that the Account is located in, thus should be the same for all Accounts owned by a single user.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of instruments to query specifically. (optional)</param>
        /// <returns>AccountInstrumentsResponse</returns>
        public AccountInstrumentsResponse GetAccountInstruments (string accountID, List<InstrumentName> instruments = default(List<InstrumentName>))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountInstrumentsResponse> localVarResponse = GetAccountInstrumentsWithHttpInfo(accountID, instruments);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Account Instruments Get the list of tradeable instruments for the given Account. The list of tradeable instruments is dependent on the regulatory division that the Account is located in, thus should be the same for all Accounts owned by a single user.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of instruments to query specifically. (optional)</param>
        /// <returns>ApiResponse of AccountInstrumentsResponse</returns>
        public GeriRemenyi.Oanda.V20.Client.Client.ApiResponse< AccountInstrumentsResponse > GetAccountInstrumentsWithHttpInfo (string accountID, List<InstrumentName> instruments = default(List<InstrumentName>))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountApi->GetAccountInstruments");

            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (instruments != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("csv", "instruments", instruments));
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AccountInstrumentsResponse >("/accounts/{accountID}/instruments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountInstruments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Account Instruments Get the list of tradeable instruments for the given Account. The list of tradeable instruments is dependent on the regulatory division that the Account is located in, thus should be the same for all Accounts owned by a single user.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of instruments to query specifically. (optional)</param>
        /// <returns>Task of AccountInstrumentsResponse</returns>
        public async System.Threading.Tasks.Task<AccountInstrumentsResponse> GetAccountInstrumentsAsync (string accountID, List<InstrumentName> instruments = default(List<InstrumentName>))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountInstrumentsResponse> localVarResponse = await GetAccountInstrumentsAsyncWithHttpInfo(accountID, instruments);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Account Instruments Get the list of tradeable instruments for the given Account. The list of tradeable instruments is dependent on the regulatory division that the Account is located in, thus should be the same for all Accounts owned by a single user.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of instruments to query specifically. (optional)</param>
        /// <returns>Task of ApiResponse (AccountInstrumentsResponse)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountInstrumentsResponse>> GetAccountInstrumentsAsyncWithHttpInfo (string accountID, List<InstrumentName> instruments = default(List<InstrumentName>))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountApi->GetAccountInstruments");


            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (instruments != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("csv", "instruments", instruments));
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountInstrumentsResponse>("/accounts/{accountID}/instruments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountInstruments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Account Summary Get a summary for a single Account that a client has access to.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>AccountSummaryResponse</returns>
        public AccountSummaryResponse GetAccountSummary (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountSummaryResponse> localVarResponse = GetAccountSummaryWithHttpInfo(accountID, acceptDatetimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Account Summary Get a summary for a single Account that a client has access to.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>ApiResponse of AccountSummaryResponse</returns>
        public GeriRemenyi.Oanda.V20.Client.Client.ApiResponse< AccountSummaryResponse > GetAccountSummaryWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountApi->GetAccountSummary");

            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AccountSummaryResponse >("/accounts/{accountID}/summary", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountSummary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Account Summary Get a summary for a single Account that a client has access to.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of AccountSummaryResponse</returns>
        public async System.Threading.Tasks.Task<AccountSummaryResponse> GetAccountSummaryAsync (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountSummaryResponse> localVarResponse = await GetAccountSummaryAsyncWithHttpInfo(accountID, acceptDatetimeFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Account Summary Get a summary for a single Account that a client has access to.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <returns>Task of ApiResponse (AccountSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountSummaryResponse>> GetAccountSummaryAsyncWithHttpInfo (string accountID, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountApi->GetAccountSummary");


            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountSummaryResponse>("/accounts/{accountID}/summary", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountSummary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Accounts Get a list of all Accounts authorized for the provided token.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountsResponse</returns>
        public AccountsResponse GetAccounts ()
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountsResponse> localVarResponse = GetAccountsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Accounts Get a list of all Accounts authorized for the provided token.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountsResponse</returns>
        public GeriRemenyi.Oanda.V20.Client.Client.ApiResponse< AccountsResponse > GetAccountsWithHttpInfo ()
        {
            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AccountsResponse >("/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Accounts Get a list of all Accounts authorized for the provided token.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccountsResponse</returns>
        public async System.Threading.Tasks.Task<AccountsResponse> GetAccountsAsync ()
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountsResponse> localVarResponse = await GetAccountsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Accounts Get a list of all Accounts authorized for the provided token.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccountsResponse)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<AccountsResponse>> GetAccountsAsyncWithHttpInfo ()
        {

            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountsResponse>("/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

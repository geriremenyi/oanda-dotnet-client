/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GeriRemenyi.Oanda.V20.Client.Client;
using GeriRemenyi.Oanda.V20.Client.Model;

namespace GeriRemenyi.Oanda.V20.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Current Account Prices
        /// </summary>
        /// <remarks>
        /// Get pricing information for a specified list of Instruments within an Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of Instruments to get pricing for.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="since">Date/Time filter to apply to the response. Only prices and home conversions (if requested) with a time later than this filter (i.e. the price has changed after the since time) will be provided, and are filtered independently. (optional)</param>
        /// <param name="includeUnitsAvailable">Flag that enables the inclusion of the unitsAvailable field in the returned Price objects. (optional)</param>
        /// <param name="includeHomeConversions">Flag that enables the inclusion of the homeConversions field in the returned response. An entry will be returned for each currency in the set of all base and quote currencies present in the requested instruments list. (optional)</param>
        /// <returns>PricingResponse</returns>
        PricingResponse GetPricing (string accountID, List<InstrumentName> instruments, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), string since = default(string), bool? includeUnitsAvailable = default(bool?), bool? includeHomeConversions = default(bool?));

        /// <summary>
        /// Current Account Prices
        /// </summary>
        /// <remarks>
        /// Get pricing information for a specified list of Instruments within an Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of Instruments to get pricing for.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="since">Date/Time filter to apply to the response. Only prices and home conversions (if requested) with a time later than this filter (i.e. the price has changed after the since time) will be provided, and are filtered independently. (optional)</param>
        /// <param name="includeUnitsAvailable">Flag that enables the inclusion of the unitsAvailable field in the returned Price objects. (optional)</param>
        /// <param name="includeHomeConversions">Flag that enables the inclusion of the homeConversions field in the returned response. An entry will be returned for each currency in the set of all base and quote currencies present in the requested instruments list. (optional)</param>
        /// <returns>ApiResponse of PricingResponse</returns>
        ApiResponse<PricingResponse> GetPricingWithHttpInfo (string accountID, List<InstrumentName> instruments, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), string since = default(string), bool? includeUnitsAvailable = default(bool?), bool? includeHomeConversions = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Current Account Prices
        /// </summary>
        /// <remarks>
        /// Get pricing information for a specified list of Instruments within an Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of Instruments to get pricing for.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="since">Date/Time filter to apply to the response. Only prices and home conversions (if requested) with a time later than this filter (i.e. the price has changed after the since time) will be provided, and are filtered independently. (optional)</param>
        /// <param name="includeUnitsAvailable">Flag that enables the inclusion of the unitsAvailable field in the returned Price objects. (optional)</param>
        /// <param name="includeHomeConversions">Flag that enables the inclusion of the homeConversions field in the returned response. An entry will be returned for each currency in the set of all base and quote currencies present in the requested instruments list. (optional)</param>
        /// <returns>Task of PricingResponse</returns>
        System.Threading.Tasks.Task<PricingResponse> GetPricingAsync (string accountID, List<InstrumentName> instruments, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), string since = default(string), bool? includeUnitsAvailable = default(bool?), bool? includeHomeConversions = default(bool?));

        /// <summary>
        /// Current Account Prices
        /// </summary>
        /// <remarks>
        /// Get pricing information for a specified list of Instruments within an Account.
        /// </remarks>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of Instruments to get pricing for.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="since">Date/Time filter to apply to the response. Only prices and home conversions (if requested) with a time later than this filter (i.e. the price has changed after the since time) will be provided, and are filtered independently. (optional)</param>
        /// <param name="includeUnitsAvailable">Flag that enables the inclusion of the unitsAvailable field in the returned Price objects. (optional)</param>
        /// <param name="includeHomeConversions">Flag that enables the inclusion of the homeConversions field in the returned response. An entry will be returned for each currency in the set of all base and quote currencies present in the requested instruments list. (optional)</param>
        /// <returns>Task of ApiResponse (PricingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingResponse>> GetPricingAsyncWithHttpInfo (string accountID, List<InstrumentName> instruments, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), string since = default(string), bool? includeUnitsAvailable = default(bool?), bool? includeHomeConversions = default(bool?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricingApi : IPricingApiSync, IPricingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PricingApi : IPricingApi
    {
        private GeriRemenyi.Oanda.V20.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricingApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricingApi(String basePath)
        {
            this.Configuration = GeriRemenyi.Oanda.V20.Client.Client.Configuration.MergeConfigurations(
                GeriRemenyi.Oanda.V20.Client.Client.GlobalConfiguration.Instance,
                new GeriRemenyi.Oanda.V20.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GeriRemenyi.Oanda.V20.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeriRemenyi.Oanda.V20.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PricingApi(GeriRemenyi.Oanda.V20.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GeriRemenyi.Oanda.V20.Client.Client.Configuration.MergeConfigurations(
                GeriRemenyi.Oanda.V20.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GeriRemenyi.Oanda.V20.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeriRemenyi.Oanda.V20.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PricingApi(GeriRemenyi.Oanda.V20.Client.Client.ISynchronousClient client,GeriRemenyi.Oanda.V20.Client.Client.IAsynchronousClient asyncClient, GeriRemenyi.Oanda.V20.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GeriRemenyi.Oanda.V20.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GeriRemenyi.Oanda.V20.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GeriRemenyi.Oanda.V20.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Current Account Prices Get pricing information for a specified list of Instruments within an Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of Instruments to get pricing for.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="since">Date/Time filter to apply to the response. Only prices and home conversions (if requested) with a time later than this filter (i.e. the price has changed after the since time) will be provided, and are filtered independently. (optional)</param>
        /// <param name="includeUnitsAvailable">Flag that enables the inclusion of the unitsAvailable field in the returned Price objects. (optional)</param>
        /// <param name="includeHomeConversions">Flag that enables the inclusion of the homeConversions field in the returned response. An entry will be returned for each currency in the set of all base and quote currencies present in the requested instruments list. (optional)</param>
        /// <returns>PricingResponse</returns>
        public PricingResponse GetPricing (string accountID, List<InstrumentName> instruments, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), string since = default(string), bool? includeUnitsAvailable = default(bool?), bool? includeHomeConversions = default(bool?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<PricingResponse> localVarResponse = GetPricingWithHttpInfo(accountID, instruments, acceptDatetimeFormat, since, includeUnitsAvailable, includeHomeConversions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Current Account Prices Get pricing information for a specified list of Instruments within an Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of Instruments to get pricing for.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="since">Date/Time filter to apply to the response. Only prices and home conversions (if requested) with a time later than this filter (i.e. the price has changed after the since time) will be provided, and are filtered independently. (optional)</param>
        /// <param name="includeUnitsAvailable">Flag that enables the inclusion of the unitsAvailable field in the returned Price objects. (optional)</param>
        /// <param name="includeHomeConversions">Flag that enables the inclusion of the homeConversions field in the returned response. An entry will be returned for each currency in the set of all base and quote currencies present in the requested instruments list. (optional)</param>
        /// <returns>ApiResponse of PricingResponse</returns>
        public GeriRemenyi.Oanda.V20.Client.Client.ApiResponse< PricingResponse > GetPricingWithHttpInfo (string accountID, List<InstrumentName> instruments, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), string since = default(string), bool? includeUnitsAvailable = default(bool?), bool? includeHomeConversions = default(bool?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling PricingApi->GetPricing");

            // verify the required parameter 'instruments' is set
            if (instruments == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'instruments' when calling PricingApi->GetPricing");

            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("csv", "instruments", instruments));
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (includeUnitsAvailable != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "includeUnitsAvailable", includeUnitsAvailable));
            }
            if (includeHomeConversions != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "includeHomeConversions", includeHomeConversions));
            }
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PricingResponse >("/accounts/{accountID}/pricing", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Current Account Prices Get pricing information for a specified list of Instruments within an Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of Instruments to get pricing for.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="since">Date/Time filter to apply to the response. Only prices and home conversions (if requested) with a time later than this filter (i.e. the price has changed after the since time) will be provided, and are filtered independently. (optional)</param>
        /// <param name="includeUnitsAvailable">Flag that enables the inclusion of the unitsAvailable field in the returned Price objects. (optional)</param>
        /// <param name="includeHomeConversions">Flag that enables the inclusion of the homeConversions field in the returned response. An entry will be returned for each currency in the set of all base and quote currencies present in the requested instruments list. (optional)</param>
        /// <returns>Task of PricingResponse</returns>
        public async System.Threading.Tasks.Task<PricingResponse> GetPricingAsync (string accountID, List<InstrumentName> instruments, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), string since = default(string), bool? includeUnitsAvailable = default(bool?), bool? includeHomeConversions = default(bool?))
        {
             GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<PricingResponse> localVarResponse = await GetPricingAsyncWithHttpInfo(accountID, instruments, acceptDatetimeFormat, since, includeUnitsAvailable, includeHomeConversions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Current Account Prices Get pricing information for a specified list of Instruments within an Account.
        /// </summary>
        /// <exception cref="GeriRemenyi.Oanda.V20.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account identifier</param>
        /// <param name="instruments">List of Instruments to get pricing for.</param>
        /// <param name="acceptDatetimeFormat">Format of DateTime fields in the request and response. (optional)</param>
        /// <param name="since">Date/Time filter to apply to the response. Only prices and home conversions (if requested) with a time later than this filter (i.e. the price has changed after the since time) will be provided, and are filtered independently. (optional)</param>
        /// <param name="includeUnitsAvailable">Flag that enables the inclusion of the unitsAvailable field in the returned Price objects. (optional)</param>
        /// <param name="includeHomeConversions">Flag that enables the inclusion of the homeConversions field in the returned response. An entry will be returned for each currency in the set of all base and quote currencies present in the requested instruments list. (optional)</param>
        /// <returns>Task of ApiResponse (PricingResponse)</returns>
        public async System.Threading.Tasks.Task<GeriRemenyi.Oanda.V20.Client.Client.ApiResponse<PricingResponse>> GetPricingAsyncWithHttpInfo (string accountID, List<InstrumentName> instruments, DateTimeFormat? acceptDatetimeFormat = default(DateTimeFormat?), string since = default(string), bool? includeUnitsAvailable = default(bool?), bool? includeHomeConversions = default(bool?))
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'accountID' when calling PricingApi->GetPricing");

            // verify the required parameter 'instruments' is set
            if (instruments == null)
                throw new GeriRemenyi.Oanda.V20.Client.Client.ApiException(400, "Missing required parameter 'instruments' when calling PricingApi->GetPricing");


            GeriRemenyi.Oanda.V20.Client.Client.RequestOptions localVarRequestOptions = new GeriRemenyi.Oanda.V20.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountID", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("csv", "instruments", instruments));
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (includeUnitsAvailable != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "includeUnitsAvailable", includeUnitsAvailable));
            }
            if (includeHomeConversions != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToMultiMap("", "includeHomeConversions", includeHomeConversions));
            }
            if (acceptDatetimeFormat != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Datetime-Format", GeriRemenyi.Oanda.V20.Client.Client.ClientUtils.ParameterToString(acceptDatetimeFormat)); // header parameter
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PricingResponse>("/accounts/{accountID}/pricing", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using GeriRemenyi.Oanda.V20.Client;
using GeriRemenyi.Oanda.V20.Api;
using GeriRemenyi.Oanda.V20.Model;

namespace GeriRemenyi.Oanda.V20.Test
{
    /// <summary>
    ///  Class for testing AccountApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountApiTests : IDisposable
    {
        private AccountApi instance;

        public AccountApiTests()
        {
            instance = new AccountApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AccountApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountApi
            //Assert.IsType(typeof(AccountApi), instance, "instance is a AccountApi");
        }

        
        /// <summary>
        /// Test AccountsAccountIDChangesGet
        /// </summary>
        [Fact]
        public void AccountsAccountIDChangesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string acceptDatetimeFormat = null;
            //int? sinceTransactionID = null;
            //var response = instance.AccountsAccountIDChangesGet(accountID, acceptDatetimeFormat, sinceTransactionID);
            //Assert.IsType<InlineResponse2005> (response, "response is InlineResponse2005");
        }
        
        /// <summary>
        /// Test AccountsAccountIDConfigurationPatch
        /// </summary>
        [Fact]
        public void AccountsAccountIDConfigurationPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string acceptDatetimeFormat = null;
            //InlineObject inlineObject = null;
            //var response = instance.AccountsAccountIDConfigurationPatch(accountID, acceptDatetimeFormat, inlineObject);
            //Assert.IsType<InlineResponse2004> (response, "response is InlineResponse2004");
        }
        
        /// <summary>
        /// Test AccountsAccountIDGet
        /// </summary>
        [Fact]
        public void AccountsAccountIDGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string acceptDatetimeFormat = null;
            //var response = instance.AccountsAccountIDGet(accountID, acceptDatetimeFormat);
            //Assert.IsType<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test AccountsAccountIDInstrumentsGet
        /// </summary>
        [Fact]
        public void AccountsAccountIDInstrumentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //List<string> instruments = null;
            //var response = instance.AccountsAccountIDInstrumentsGet(accountID, instruments);
            //Assert.IsType<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        
        /// <summary>
        /// Test AccountsAccountIDSummaryGet
        /// </summary>
        [Fact]
        public void AccountsAccountIDSummaryGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string acceptDatetimeFormat = null;
            //var response = instance.AccountsAccountIDSummaryGet(accountID, acceptDatetimeFormat);
            //Assert.IsType<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test AccountsGet
        /// </summary>
        [Fact]
        public void AccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AccountsGet();
            //Assert.IsType<InlineResponse200> (response, "response is InlineResponse200");
        }
        
    }

}

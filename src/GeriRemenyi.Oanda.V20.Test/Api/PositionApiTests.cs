/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using GeriRemenyi.Oanda.V20.Client;
using GeriRemenyi.Oanda.V20.Api;
using GeriRemenyi.Oanda.V20.Model;

namespace GeriRemenyi.Oanda.V20.Test
{
    /// <summary>
    ///  Class for testing PositionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PositionApiTests : IDisposable
    {
        private PositionApi instance;

        public PositionApiTests()
        {
            instance = new PositionApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PositionApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PositionApi
            //Assert.IsType(typeof(PositionApi), instance, "instance is a PositionApi");
        }

        
        /// <summary>
        /// Test AccountsAccountIDOpenPositionsGet
        /// </summary>
        [Fact]
        public void AccountsAccountIDOpenPositionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //var response = instance.AccountsAccountIDOpenPositionsGet(accountID);
            //Assert.IsType<InlineResponse20016> (response, "response is InlineResponse20016");
        }
        
        /// <summary>
        /// Test AccountsAccountIDPositionsGet
        /// </summary>
        [Fact]
        public void AccountsAccountIDPositionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //var response = instance.AccountsAccountIDPositionsGet(accountID);
            //Assert.IsType<InlineResponse20015> (response, "response is InlineResponse20015");
        }
        
        /// <summary>
        /// Test AccountsAccountIDPositionsInstrumentClosePut
        /// </summary>
        [Fact]
        public void AccountsAccountIDPositionsInstrumentClosePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string instrument = null;
            //InlineObject7 inlineObject7 = null;
            //string acceptDatetimeFormat = null;
            //var response = instance.AccountsAccountIDPositionsInstrumentClosePut(accountID, instrument, inlineObject7, acceptDatetimeFormat);
            //Assert.IsType<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AccountsAccountIDPositionsInstrumentGet
        /// </summary>
        [Fact]
        public void AccountsAccountIDPositionsInstrumentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string instrument = null;
            //var response = instance.AccountsAccountIDPositionsInstrumentGet(accountID, instrument);
            //Assert.IsType<InlineResponse20017> (response, "response is InlineResponse20017");
        }
        
    }

}

/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using GeriRemenyi.Oanda.V20.Client;
using GeriRemenyi.Oanda.V20.Api;
using GeriRemenyi.Oanda.V20.Model;

namespace GeriRemenyi.Oanda.V20.Test
{
    /// <summary>
    ///  Class for testing TradeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TradeApiTests : IDisposable
    {
        private TradeApi instance;

        public TradeApiTests()
        {
            instance = new TradeApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TradeApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TradeApi
            //Assert.IsType(typeof(TradeApi), instance, "instance is a TradeApi");
        }

        
        /// <summary>
        /// Test AccountsAccountIDOpenTradesGet
        /// </summary>
        [Fact]
        public void AccountsAccountIDOpenTradesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string acceptDatetimeFormat = null;
            //var response = instance.AccountsAccountIDOpenTradesGet(accountID, acceptDatetimeFormat);
            //Assert.IsType<InlineResponse20013> (response, "response is InlineResponse20013");
        }
        
        /// <summary>
        /// Test AccountsAccountIDTradesGet
        /// </summary>
        [Fact]
        public void AccountsAccountIDTradesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string acceptDatetimeFormat = null;
            //List<int> ids = null;
            //string state = null;
            //string instrument = null;
            //int? count = null;
            //int? beforeID = null;
            //var response = instance.AccountsAccountIDTradesGet(accountID, acceptDatetimeFormat, ids, state, instrument, count, beforeID);
            //Assert.IsType<InlineResponse20012> (response, "response is InlineResponse20012");
        }
        
        /// <summary>
        /// Test AccountsAccountIDTradesTradeSpecifierClientExtensionsPut
        /// </summary>
        [Fact]
        public void AccountsAccountIDTradesTradeSpecifierClientExtensionsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string tradeSpecifier = null;
            //InlineObject5 inlineObject5 = null;
            //string acceptDatetimeFormat = null;
            //var response = instance.AccountsAccountIDTradesTradeSpecifierClientExtensionsPut(accountID, tradeSpecifier, inlineObject5, acceptDatetimeFormat);
            //Assert.IsType<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AccountsAccountIDTradesTradeSpecifierClosePut
        /// </summary>
        [Fact]
        public void AccountsAccountIDTradesTradeSpecifierClosePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string tradeSpecifier = null;
            //InlineObject4 inlineObject4 = null;
            //string acceptDatetimeFormat = null;
            //var response = instance.AccountsAccountIDTradesTradeSpecifierClosePut(accountID, tradeSpecifier, inlineObject4, acceptDatetimeFormat);
            //Assert.IsType<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AccountsAccountIDTradesTradeSpecifierGet
        /// </summary>
        [Fact]
        public void AccountsAccountIDTradesTradeSpecifierGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string tradeSpecifier = null;
            //string acceptDatetimeFormat = null;
            //var response = instance.AccountsAccountIDTradesTradeSpecifierGet(accountID, tradeSpecifier, acceptDatetimeFormat);
            //Assert.IsType<InlineResponse20014> (response, "response is InlineResponse20014");
        }
        
        /// <summary>
        /// Test AccountsAccountIDTradesTradeSpecifierOrdersPut
        /// </summary>
        [Fact]
        public void AccountsAccountIDTradesTradeSpecifierOrdersPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountID = null;
            //string tradeSpecifier = null;
            //InlineObject6 inlineObject6 = null;
            //string acceptDatetimeFormat = null;
            //var response = instance.AccountsAccountIDTradesTradeSpecifierOrdersPut(accountID, tradeSpecifier, inlineObject6, acceptDatetimeFormat);
            //Assert.IsType<Object> (response, "response is Object");
        }
        
    }

}

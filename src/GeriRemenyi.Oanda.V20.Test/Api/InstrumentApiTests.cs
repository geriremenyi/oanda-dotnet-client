/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using GeriRemenyi.Oanda.V20.Client;
using GeriRemenyi.Oanda.V20.Api;
using GeriRemenyi.Oanda.V20.Model;

namespace GeriRemenyi.Oanda.V20.Test
{
    /// <summary>
    ///  Class for testing InstrumentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InstrumentApiTests : IDisposable
    {
        private InstrumentApi instance;

        public InstrumentApiTests()
        {
            instance = new InstrumentApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InstrumentApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' InstrumentApi
            //Assert.IsType(typeof(InstrumentApi), instance, "instance is a InstrumentApi");
        }

        
        /// <summary>
        /// Test InstrumentsInstrumentCandlesGet
        /// </summary>
        [Fact]
        public void InstrumentsInstrumentCandlesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instrument = null;
            //string acceptDatetimeFormat = null;
            //string price = null;
            //string granularity = null;
            //int? count = null;
            //string from = null;
            //string to = null;
            //bool? smooth = null;
            //bool? includeFirst = null;
            //int? dailyAlignment = null;
            //string alignmentTimezone = null;
            //string weeklyAlignment = null;
            //var response = instance.InstrumentsInstrumentCandlesGet(instrument, acceptDatetimeFormat, price, granularity, count, from, to, smooth, includeFirst, dailyAlignment, alignmentTimezone, weeklyAlignment);
            //Assert.IsType<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        
        /// <summary>
        /// Test InstrumentsInstrumentOrderBookGet
        /// </summary>
        [Fact]
        public void InstrumentsInstrumentOrderBookGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instrument = null;
            //string acceptDatetimeFormat = null;
            //string time = null;
            //var response = instance.InstrumentsInstrumentOrderBookGet(instrument, acceptDatetimeFormat, time);
            //Assert.IsType<InlineResponse2007> (response, "response is InlineResponse2007");
        }
        
        /// <summary>
        /// Test InstrumentsInstrumentPositionBookGet
        /// </summary>
        [Fact]
        public void InstrumentsInstrumentPositionBookGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instrument = null;
            //string acceptDatetimeFormat = null;
            //string time = null;
            //var response = instance.InstrumentsInstrumentPositionBookGet(instrument, acceptDatetimeFormat, time);
            //Assert.IsType<InlineResponse2008> (response, "response is InlineResponse2008");
        }
        
    }

}

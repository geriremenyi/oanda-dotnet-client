/* 
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using GeriRemenyi.Oanda.V20.Api;
using GeriRemenyi.Oanda.V20.Model;
using GeriRemenyi.Oanda.V20.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace GeriRemenyi.Oanda.V20.Test
{
    /// <summary>
    ///  Class for testing Instrument
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class InstrumentTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for Instrument
        //private Instrument instance;

        public InstrumentTests()
        {
            // TODO uncomment below to create an instance of Instrument
            //instance = new Instrument();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Instrument
        /// </summary>
        [Fact]
        public void InstrumentInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" Instrument
            //Assert.IsInstanceOfType<Instrument> (instance, "variable 'instance' is a Instrument");
        }


        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }
        /// <summary>
        /// Test the property 'DisplayName'
        /// </summary>
        [Fact]
        public void DisplayNameTest()
        {
            // TODO unit test for the property 'DisplayName'
        }
        /// <summary>
        /// Test the property 'PipLocation'
        /// </summary>
        [Fact]
        public void PipLocationTest()
        {
            // TODO unit test for the property 'PipLocation'
        }
        /// <summary>
        /// Test the property 'DisplayPrecision'
        /// </summary>
        [Fact]
        public void DisplayPrecisionTest()
        {
            // TODO unit test for the property 'DisplayPrecision'
        }
        /// <summary>
        /// Test the property 'TradeUnitsPrecision'
        /// </summary>
        [Fact]
        public void TradeUnitsPrecisionTest()
        {
            // TODO unit test for the property 'TradeUnitsPrecision'
        }
        /// <summary>
        /// Test the property 'MinimumTradeSize'
        /// </summary>
        [Fact]
        public void MinimumTradeSizeTest()
        {
            // TODO unit test for the property 'MinimumTradeSize'
        }
        /// <summary>
        /// Test the property 'MaximumTrailingStopDistance'
        /// </summary>
        [Fact]
        public void MaximumTrailingStopDistanceTest()
        {
            // TODO unit test for the property 'MaximumTrailingStopDistance'
        }
        /// <summary>
        /// Test the property 'MinimumTrailingStopDistance'
        /// </summary>
        [Fact]
        public void MinimumTrailingStopDistanceTest()
        {
            // TODO unit test for the property 'MinimumTrailingStopDistance'
        }
        /// <summary>
        /// Test the property 'MaximumPositionSize'
        /// </summary>
        [Fact]
        public void MaximumPositionSizeTest()
        {
            // TODO unit test for the property 'MaximumPositionSize'
        }
        /// <summary>
        /// Test the property 'MaximumOrderUnits'
        /// </summary>
        [Fact]
        public void MaximumOrderUnitsTest()
        {
            // TODO unit test for the property 'MaximumOrderUnits'
        }
        /// <summary>
        /// Test the property 'MarginRate'
        /// </summary>
        [Fact]
        public void MarginRateTest()
        {
            // TODO unit test for the property 'MarginRate'
        }
        /// <summary>
        /// Test the property 'Commission'
        /// </summary>
        [Fact]
        public void CommissionTest()
        {
            // TODO unit test for the property 'Commission'
        }

    }

}
